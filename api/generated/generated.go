// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/nifetency/nife.io/api/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Activity struct {
		Activities func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Message    func(childComplexity int) int
		Type       func(childComplexity int) int
	}

	Actor struct {
		Type func(childComplexity int) int
	}

	AddedDataDog struct {
		APIEndpoint    func(childComplexity int) int
		APIKey         func(childComplexity int) int
		AppKey         func(childComplexity int) int
		ClusterDetails func(childComplexity int) int
		ClusterID      func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	AllocationEvent struct {
		Message   func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	AllocationStatus struct {
		Canary             func(childComplexity int) int
		Checks             func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		CriticalCheckCount func(childComplexity int) int
		DesiredStatus      func(childComplexity int) int
		Events             func(childComplexity int) int
		Failed             func(childComplexity int) int
		Healthy            func(childComplexity int) int
		ID                 func(childComplexity int) int
		IDShort            func(childComplexity int) int
		LatestVersion      func(childComplexity int) int
		PassingCheckCount  func(childComplexity int) int
		RecentLogs         func(childComplexity int) int
		Region             func(childComplexity int) int
		Restarts           func(childComplexity int) int
		Status             func(childComplexity int) int
		Transitioning      func(childComplexity int) int
		UpdatedAt          func(childComplexity int) int
		Version            func(childComplexity int) int
		WarningCheckCount  func(childComplexity int) int
	}

	App struct {
		Allocation                 func(childComplexity int) int
		Allocations                func(childComplexity int, showCompleted *bool) int
		AppURL                     func(childComplexity int) int
		Autoscaling                func(childComplexity int) int
		BackupRegions              func(childComplexity int) int
		BuildLogsURL               func(childComplexity int) int
		BuildTime                  func(childComplexity int) int
		Builds                     func(childComplexity int) int
		BuiltinType                func(childComplexity int) int
		BusinessUnitID             func(childComplexity int) int
		BusinessUnitName           func(childComplexity int) int
		Certificate                func(childComplexity int) int
		Certificates               func(childComplexity int) int
		Changes                    func(childComplexity int) int
		ClusterDetials             func(childComplexity int) int
		Config                     func(childComplexity int) int
		ContainerID                func(childComplexity int) int
		CreatedAt                  func(childComplexity int) int
		CurrentRelease             func(childComplexity int) int
		DeployType                 func(childComplexity int) int
		Deployed                   func(childComplexity int) int
		DeploymentStatus           func(childComplexity int, id *string) int
		DeploymentTime             func(childComplexity int) int
		DockerID                   func(childComplexity int) int
		EnvArgs                    func(childComplexity int) int
		HostID                     func(childComplexity int) int
		Hostname                   func(childComplexity int) int
		ID                         func(childComplexity int) int
		IPAddress                  func(childComplexity int) int
		IPAddresses                func(childComplexity int) int
		ImageName                  func(childComplexity int) int
		InstanceID                 func(childComplexity int) int
		Name                       func(childComplexity int) int
		Organization               func(childComplexity int) int
		OrganizationID             func(childComplexity int) int
		OrganizationName           func(childComplexity int) int
		ParseConfig                func(childComplexity int, definition map[string]interface{}) int
		Port                       func(childComplexity int) int
		Regions                    func(childComplexity int) int
		Release                    func(childComplexity int) int
		Releases                   func(childComplexity int, first *int) int
		Replicas                   func(childComplexity int) int
		SecretRegistryID           func(childComplexity int) int
		Secrets                    func(childComplexity int) int
		Services                   func(childComplexity int) int
		Status                     func(childComplexity int) int
		SubOrganizationID          func(childComplexity int) int
		SubOrganizationName        func(childComplexity int) int
		TenantID                   func(childComplexity int) int
		UserDetails                func(childComplexity int) int
		VMSize                     func(childComplexity int) int
		Version                    func(childComplexity int) int
		Volumes                    func(childComplexity int) int
		WorkloadManagementEndPoint func(childComplexity int) int
		WorkloadManagementID       func(childComplexity int) int
		WorkloadManagementName     func(childComplexity int) int
	}

	AppCertificate struct {
		AcmeALPNConfigured        func(childComplexity int) int
		AcmeDNSConfigured         func(childComplexity int) int
		CertificateAuthority      func(childComplexity int) int
		ClientStatus              func(childComplexity int) int
		Configured                func(childComplexity int) int
		CreatedAt                 func(childComplexity int) int
		DNSProvider               func(childComplexity int) int
		DNSValidationHostname     func(childComplexity int) int
		DNSValidationInstructions func(childComplexity int) int
		DNSValidationTarget       func(childComplexity int) int
		Hostname                  func(childComplexity int) int
		ID                        func(childComplexity int) int
		IsApex                    func(childComplexity int) int
		IsWildcard                func(childComplexity int) int
		Issued                    func(childComplexity int) int
		Source                    func(childComplexity int) int
	}

	AppChange struct {
		Actor       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Reason      func(childComplexity int) int
		Status      func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		User        func(childComplexity int) int
	}

	AppCompact struct {
		AppURL       func(childComplexity int) int
		Deployed     func(childComplexity int) int
		Hostname     func(childComplexity int) int
		ID           func(childComplexity int) int
		IPAddresses  func(childComplexity int) int
		Name         func(childComplexity int) int
		Organization func(childComplexity int) int
		Release      func(childComplexity int) int
		Services     func(childComplexity int) int
		Status       func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	AppConfig struct {
		Build      func(childComplexity int) int
		Definition func(childComplexity int) int
		Errors     func(childComplexity int) int
		Services   func(childComplexity int) int
		Valid      func(childComplexity int) int
	}

	AppDeploymentRegion struct {
		AvailableRegions func(childComplexity int) int
		Regions          func(childComplexity int) int
	}

	AppInBusinessUnit struct {
		AppsInBusinessUnit func(childComplexity int) int
		BusinessUnitID     func(childComplexity int) int
		BusinessUnitName   func(childComplexity int) int
	}

	AppInSubOrg struct {
		AppsInSubOrgs func(childComplexity int) int
		SubOrgID      func(childComplexity int) int
		SubOrgName    func(childComplexity int) int
	}

	AppOrgCount struct {
		Apps         func(childComplexity int) int
		Organization func(childComplexity int) int
	}

	AppStatus struct {
		Allocations      func(childComplexity int) int
		AppURL           func(childComplexity int) int
		Deployed         func(childComplexity int) int
		DeploymentStatus func(childComplexity int) int
		Hostname         func(childComplexity int) int
		ID               func(childComplexity int) int
		Name             func(childComplexity int) int
		Organization     func(childComplexity int) int
		Status           func(childComplexity int) int
		Version          func(childComplexity int) int
	}

	Apps struct {
		Nodes func(childComplexity int) int
	}

	AppsAndOrgsAndSubOrgCountDetails struct {
		OrgByAppCount          func(childComplexity int) int
		Region                 func(childComplexity int) int
		TotalAppCount          func(childComplexity int) int
		TotalBusinessUnitCount func(childComplexity int) int
		TotalOrgCount          func(childComplexity int) int
		TotalSubOrgCount       func(childComplexity int) int
	}

	AppsAndOrgsCountDetails struct {
		OrgByAppCount func(childComplexity int) int
		Region        func(childComplexity int) int
		TotalAppCount func(childComplexity int) int
		TotalOrgCount func(childComplexity int) int
	}

	AppsCountbyBusinessUnit struct {
		ActiveApp   func(childComplexity int) int
		AppsCount   func(childComplexity int) int
		InActiveApp func(childComplexity int) int
		NewApp      func(childComplexity int) int
	}

	AppsOrgsCount struct {
		ActiveApp    func(childComplexity int) int
		AppsCount    func(childComplexity int) int
		InActiveApp  func(childComplexity int) int
		NewApp       func(childComplexity int) int
		Organization func(childComplexity int) int
	}

	AppsOrgsSubCount struct {
		ActiveApp       func(childComplexity int) int
		AppsCount       func(childComplexity int) int
		InActiveApp     func(childComplexity int) int
		NewApp          func(childComplexity int) int
		Organization    func(childComplexity int) int
		SubOrganization func(childComplexity int) int
	}

	AttachPayment struct {
		City            func(childComplexity int) int
		Country         func(childComplexity int) int
		CustomerID      func(childComplexity int) int
		Email           func(childComplexity int) int
		ID              func(childComplexity int) int
		Name            func(childComplexity int) int
		PaymentMethodID func(childComplexity int) int
		State           func(childComplexity int) int
		Type            func(childComplexity int) int
	}

	AutoscalingConfig struct {
		BalanceRegions func(childComplexity int) int
		Enabled        func(childComplexity int) int
		MaxCount       func(childComplexity int) int
		MinCount       func(childComplexity int) int
		Regions        func(childComplexity int) int
	}

	AutoscalingRegionConfig struct {
		Code     func(childComplexity int) int
		MinCount func(childComplexity int) int
		Weight   func(childComplexity int) int
	}

	Build struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Image      func(childComplexity int) int
		InProgress func(childComplexity int) int
		Logs       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		User       func(childComplexity int) int
	}

	BuildArgsInput struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Builder struct {
		Builder func(childComplexity int) int
		Builtin func(childComplexity int) int
		Image   func(childComplexity int) int
	}

	Builds struct {
		Nodes func(childComplexity int) int
	}

	BusinessUnitCount struct {
		AppsCount         func(childComplexity int) int
		BusinessUnitCount func(childComplexity int) int
	}

	Certificates struct {
		Nodes func(childComplexity int) int
	}

	Chages struct {
		Nodes func(childComplexity int) int
	}

	Changes struct {
		Nodes func(childComplexity int) int
	}

	Check struct {
		HTTPHeaders       func(childComplexity int) int
		HTTPMethod        func(childComplexity int) int
		HTTPPath          func(childComplexity int) int
		HTTPProtocol      func(childComplexity int) int
		HTTPSkipTLSVerify func(childComplexity int) int
		Interval          func(childComplexity int) int
		Timeout           func(childComplexity int) int
		Type              func(childComplexity int) int
	}

	CheckState struct {
		Name        func(childComplexity int) int
		Output      func(childComplexity int) int
		ServiceName func(childComplexity int) int
		Status      func(childComplexity int) int
	}

	CloudRegions struct {
		Code func(childComplexity int) int
		Name func(childComplexity int) int
		Type func(childComplexity int) int
	}

	ClusterDetail struct {
		AllocationTag         func(childComplexity int) int
		CloudType             func(childComplexity int) int
		ClusterConfigPath     func(childComplexity int) int
		ClusterType           func(childComplexity int) int
		EblEnabled            func(childComplexity int) int
		ExternalAgentPlatform func(childComplexity int) int
		ExternalBaseAddress   func(childComplexity int) int
		ExternalCloudType     func(childComplexity int) int
		ExternalLBType        func(childComplexity int) int
		Interface             func(childComplexity int) int
		IsDefault             func(childComplexity int) int
		Port                  func(childComplexity int) int
		ProviderType          func(childComplexity int) int
		RegionCode            func(childComplexity int) int
		RegionName            func(childComplexity int) int
		Route53CountryCode    func(childComplexity int) int
		TenantID              func(childComplexity int) int
	}

	ClusterDetails struct {
		AllocationTag         func(childComplexity int) int
		ClusterConfigPath     func(childComplexity int) int
		ClusterConfigURL      func(childComplexity int) int
		ClusterType           func(childComplexity int) int
		EblEnabled            func(childComplexity int) int
		ExternalAgentPlatForm func(childComplexity int) int
		ExternalBaseAddress   func(childComplexity int) int
		ExternalCloudType     func(childComplexity int) int
		ExternalLBType        func(childComplexity int) int
		ID                    func(childComplexity int) int
		InterfaceType         func(childComplexity int) int
		IsDefault             func(childComplexity int) int
		LoadBalancerURL       func(childComplexity int) int
		Port                  func(childComplexity int) int
		ProviderType          func(childComplexity int) int
		RegionCode            func(childComplexity int) int
		RegionName            func(childComplexity int) int
		Route53countryCode    func(childComplexity int) int
		TenantID              func(childComplexity int) int
	}

	ClusterInfo struct {
		ClusterConfigPath func(childComplexity int) int
		Clustertype       func(childComplexity int) int
		ID                func(childComplexity int) int
		IPAddress         func(childComplexity int) int
		IsLatency         func(childComplexity int) int
		Latitude          func(childComplexity int) int
		LoadBalancerURL   func(childComplexity int) int
		Longitude         func(childComplexity int) int
		Name              func(childComplexity int) int
		RegionCode        func(childComplexity int) int
	}

	ClusterNodes struct {
		Nodes func(childComplexity int) int
	}

	Config struct {
		DomainMapping func(childComplexity int) int
		Registry      func(childComplexity int) int
	}

	ConfigAppTemplates struct {
		CPULimit       func(childComplexity int) int
		CPURequests    func(childComplexity int) int
		Config         func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		CreatedBy      func(childComplexity int) int
		EnvArgs        func(childComplexity int) int
		ID             func(childComplexity int) int
		IsActive       func(childComplexity int) int
		MemoryLimit    func(childComplexity int) int
		MemoryRequests func(childComplexity int) int
		Name           func(childComplexity int) int
		RoutingPolicy  func(childComplexity int) int
		VolumeSize     func(childComplexity int) int
	}

	CreateOrganization struct {
		Organization func(childComplexity int) int
	}

	CurrentUserEmail struct {
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		LastName  func(childComplexity int) int
	}

	DNSRecord struct {
		CreatedAt  func(childComplexity int) int
		Fqdn       func(childComplexity int) int
		ID         func(childComplexity int) int
		IsApex     func(childComplexity int) int
		IsSystem   func(childComplexity int) int
		IsWildcard func(childComplexity int) int
		Name       func(childComplexity int) int
		RData      func(childComplexity int) int
		TTL        func(childComplexity int) int
		Type       func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	DeleteOrganization struct {
		DeletedOrganizationID func(childComplexity int) int
	}

	DeleteSubOrganization struct {
		DeletedSubOrganizationID func(childComplexity int) int
	}

	DeployImage struct {
		Release func(childComplexity int) int
	}

	DeployOutput struct {
		ContainerID     func(childComplexity int) int
		DeploymentName  func(childComplexity int) int
		ExistDeployment func(childComplexity int) int
		HostName        func(childComplexity int) int
		ID              func(childComplexity int) int
		LoadBalanceURL  func(childComplexity int) int
		ReleaseID       func(childComplexity int) int
		ServiceName     func(childComplexity int) int
		URL             func(childComplexity int) int
	}

	DeploymentCountByDate struct {
		Date     func(childComplexity int) int
		Deployed func(childComplexity int) int
	}

	DeploymentStatus struct {
		Allocations    func(childComplexity int) int
		CreatedAt      func(childComplexity int) int
		Description    func(childComplexity int) int
		DesiredCount   func(childComplexity int) int
		HealthyCount   func(childComplexity int) int
		ID             func(childComplexity int) int
		InProgress     func(childComplexity int) int
		PlacedCount    func(childComplexity int) int
		Status         func(childComplexity int) int
		Successful     func(childComplexity int) int
		UnhealthyCount func(childComplexity int) int
		Version        func(childComplexity int) int
	}

	DNSRecords struct {
		Nodes func(childComplexity int) int
	}

	Domain struct {
		AutoRenew            func(childComplexity int) int
		CreatedAt            func(childComplexity int) int
		DNSRecords           func(childComplexity int) int
		DNSStatus            func(childComplexity int) int
		DelegatedNameservers func(childComplexity int) int
		ExpireAt             func(childComplexity int) int
		ID                   func(childComplexity int) int
		Name                 func(childComplexity int) int
		Organization         func(childComplexity int) int
		RegistrationStatus   func(childComplexity int) int
		ZoneNameservers      func(childComplexity int) int
	}

	DomainMapping struct {
		DomainName     func(childComplexity int) int
		IPAddress      func(childComplexity int) int
		KubeConfigPath func(childComplexity int) int
		NodeName       func(childComplexity int) int
	}

	Domains struct {
		Edges func(childComplexity int) int
		Nodes func(childComplexity int) int
	}

	DuploDeployOutput struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Info      func(childComplexity int) int
		PollCount func(childComplexity int) int
		Progress  func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	Duplolog struct {
		Data     func(childComplexity int) int
		DockerID func(childComplexity int) int
		HostName func(childComplexity int) int
		StdErr   func(childComplexity int) int
		StdOut   func(childComplexity int) int
		Tail     func(childComplexity int) int
	}

	Edges struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	ElbURL struct {
		ElbURL func(childComplexity int) int
	}

	File struct {
		Link func(childComplexity int) int
	}

	GetClientSideLogs struct {
		ID        func(childComplexity int) int
		Level     func(childComplexity int) int
		Message   func(childComplexity int) int
		TimeStamp func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	GetSecRegistry struct {
		ID   func(childComplexity int) int
		Name func(childComplexity int) int
	}

	GetUserByID struct {
		CompanyID          func(childComplexity int) int
		CompanyName        func(childComplexity int) int
		Companylogo        func(childComplexity int) int
		Email              func(childComplexity int) int
		FirstName          func(childComplexity int) int
		FreePlan           func(childComplexity int) int
		ID                 func(childComplexity int) int
		Industry           func(childComplexity int) int
		IsActive           func(childComplexity int) int
		IsDelete           func(childComplexity int) int
		LastName           func(childComplexity int) int
		Location           func(childComplexity int) int
		Mode               func(childComplexity int) int
		Organization       func(childComplexity int) int
		PhoneNumber        func(childComplexity int) int
		ProfileImageURL    func(childComplexity int) int
		RoleID             func(childComplexity int) int
		SlackWebhookURL    func(childComplexity int) int
		SsoType            func(childComplexity int) int
		UserProfileCreated func(childComplexity int) int
	}

	GetUserMetrics struct {
		QueryType  func(childComplexity int) int
		ResolverIP func(childComplexity int) int
		TimeStamp  func(childComplexity int) int
	}

	GetUserPat struct {
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		PatToken  func(childComplexity int) int
		Type      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
		UserID    func(childComplexity int) int
	}

	GetUserSecret struct {
		ID             func(childComplexity int) int
		IsActive       func(childComplexity int) int
		KeyFileContent func(childComplexity int) int
		Name           func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		PassWord       func(childComplexity int) int
		RegistryName   func(childComplexity int) int
		RegistryType   func(childComplexity int) int
		SecretType     func(childComplexity int) int
		URL            func(childComplexity int) int
		UserName       func(childComplexity int) int
	}

	HTTPHeader struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	HostDetails struct {
		AccessKey         func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		ID                func(childComplexity int) int
		InstanceID        func(childComplexity int) int
		InstanceName      func(childComplexity int) int
		IsActive          func(childComplexity int) int
		OrgID             func(childComplexity int) int
		SecretKey         func(childComplexity int) int
		ServiceAccountURL func(childComplexity int) int
		Status            func(childComplexity int) int
		Type              func(childComplexity int) int
		Zone              func(childComplexity int) int
	}

	HostPayload struct {
		AccessKey         func(childComplexity int) int
		ClientID          func(childComplexity int) int
		ClientSecret      func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		CreatedBy         func(childComplexity int) int
		ID                func(childComplexity int) int
		InstanceActivity  func(childComplexity int) int
		InstanceID        func(childComplexity int) int
		InstanceName      func(childComplexity int) int
		OrgID             func(childComplexity int) int
		OrgName           func(childComplexity int) int
		ResourceGroupName func(childComplexity int) int
		SecretKey         func(childComplexity int) int
		ServiceAccountURL func(childComplexity int) int
		Status            func(childComplexity int) int
		SubscriptionID    func(childComplexity int) int
		TenantID          func(childComplexity int) int
		Type              func(childComplexity int) int
		Zone              func(childComplexity int) int
	}

	IPAddress struct {
		Address   func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Type      func(childComplexity int) int
	}

	IPAddresses struct {
		Nodes func(childComplexity int) int
	}

	InviteUserOutputMessage struct {
		Message func(childComplexity int) int
		UserID  func(childComplexity int) int
	}

	Issue struct {
		ExpireAt func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	Issued struct {
		Nodes func(childComplexity int) int
	}

	Link struct {
		Address func(childComplexity int) int
		ID      func(childComplexity int) int
		Title   func(childComplexity int) int
		User    func(childComplexity int) int
	}

	LogEntry struct {
		Instance  func(childComplexity int) int
		Level     func(childComplexity int) int
		Message   func(childComplexity int) int
		Meta      func(childComplexity int) int
		Region    func(childComplexity int) int
		Timestamp func(childComplexity int) int
	}

	Members struct {
		Edges func(childComplexity int) int
	}

	Meta struct {
		Instance func(childComplexity int) int
		Region   func(childComplexity int) int
	}

	MultipleRegionResponse struct {
		IsDefault func(childComplexity int) int
		Region    func(childComplexity int) int
	}

	Mutation struct {
		ActiveUser                        func(childComplexity int, isActive *bool, isDelete *bool) int
		AddDataDogByoc                    func(childComplexity int, input model.DataDogInput) int
		AddInviteUserRole                 func(childComplexity int, email string, roleID int) int
		AddPat                            func(childComplexity int, input *model.UserPat) int
		AddRegionUsingKubeConfig          func(childComplexity int, input *model.ClusterDetailsInput) int
		AddUserAddedregionsToOrganizatiom func(childComplexity int, organizationID []*string) int
		AddUserToOrg                      func(childComplexity int, input *model.AddUser) int
		AddWorkloadRegions                func(childComplexity int, workLoadID string, regionCode []*string) int
		AppTemplate                       func(childComplexity int, input model.ConfigTemplate) int
		ChangePassword                    func(childComplexity int, input model.ChangePassword) int
		CheckGithubRepoPrivateOrPublic    func(childComplexity int, githubURL *string) int
		ClientSideLog                     func(childComplexity int, input model.ClientSideLogs) int
		ConfigureRegions                  func(childComplexity int, input *model.ConfigureRegionsInput) int
		CreateApp                         func(childComplexity int, input model.CreateAppInput) int
		CreateAttachPaymentMethod         func(childComplexity int, input model.CreateAttachPaymentMethod) int
		CreateBusinessUnit                func(childComplexity int, input model.BusinessUnitInput) int
		CreateDuploVolume                 func(childComplexity int, input []*model.DuploVolumeInput) int
		CreateHost                        func(childComplexity int, input *model.Host) int
		CreateNamespaceInCluster          func(childComplexity int, input *model.CreateNamespace) int
		CreateNifeTomlFile                func(childComplexity int, input *model.CreateAppToml) int
		CreateOrganization                func(childComplexity int, input model.CreateOrganizationInput) int
		CreateOrganizationSecret          func(childComplexity int, input *model.CreateSecretInput) int
		CreatePaymentIntent               func(childComplexity int, input model.CreatePaymentIntent) int
		CreateStripeSubscription          func(childComplexity int, input model.CreateStripeSubscription) int
		CreateSubOrganization             func(childComplexity int, input model.CreateSubOrganizationInput) int
		CreateUser                        func(childComplexity int, input model.NewUser) int
		CreateWorkloadManagement          func(childComplexity int, input *model.WorkloadManagement) int
		DeleteApp                         func(childComplexity int, appID string, regionCode string) int
		DeleteAppTemplate                 func(childComplexity int, id *string) int
		DeleteBusinessUnit                func(childComplexity int, id string) int
		DeleteDataDogByoc                 func(childComplexity int, dataDogID string) int
		DeleteDuploApp                    func(childComplexity int, appName *string) int
		DeleteHost                        func(childComplexity int, id *int) int
		DeleteKubeConfigRegion            func(childComplexity int, id *string) int
		DeleteOrganization                func(childComplexity int, input model.DeleteOrganizationInput) int
		DeleteOrganizationSecret          func(childComplexity int, name *string, id *string) int
		DeletePat                         func(childComplexity int, id *string) int
		DeleteRequestedRegion             func(childComplexity int, id *string) int
		DeleteS3Deployment                func(childComplexity int, s3appName *string) int
		DeleteSubOrganization             func(childComplexity int, input model.DeleteSubOrganizationInput) int
		DeleteWorkloadManagement          func(childComplexity int, id *string) int
		DeployImage                       func(childComplexity int, input model.DeployImageInput) int
		DeployK8s                         func(childComplexity int, input model.DeployInput) int
		EditApp                           func(childComplexity int, input *model.EditAppByOrganization) int
		InviteUser                        func(childComplexity int, input *model.InviteUser) int
		Login                             func(childComplexity int, input model.Login) int
		MigrateOrganization               func(childComplexity int, input model.MigrateOrganizationInput) int
		MoveApp                           func(childComplexity int, input model.MoveAppInput) int
		MutipleRegion                     func(childComplexity int, input *model.MultipleRegionInput) int
		NewRegionRequest                  func(childComplexity int, input *model.RegionRequest) int
		NewRegionsRequest                 func(childComplexity int, input *model.RegionRequest) int
		NodeAction                        func(childComplexity int, input *model.StartAndStopVM) int
		NodeActionAws                     func(childComplexity int, input *model.StartAndStopVM) int
		NodeActionAzure                   func(childComplexity int, input *model.StartAndStopVM) int
		NotificationInfo                  func(childComplexity int, input *model.Notification) int
		OptimizeImage                     func(childComplexity int, input model.OptimizeImageInput) int
		PauseApp                          func(childComplexity int, input model.PauseAppInput) int
		RemoveFiles                       func(childComplexity int, s3appName *string) int
		RemoveInviteuser                  func(childComplexity int, userID *string) int
		RemoveUserOrg                     func(childComplexity int, organizationID *string, userID *string) int
		RemoveWorkloadRegions             func(childComplexity int, wlid *string, wlRegion *string) int
		RequestingPicoNets                func(childComplexity int, appName *string) int
		RestartApp                        func(childComplexity int, input model.RestartAppInput) int
		ResumeApp                         func(childComplexity int, input model.ResumeAppInput) int
		S3Deployment                      func(childComplexity int, input *model.S3DeployInput) int
		SetUserTokenExpireTime            func(childComplexity int, expireTime *int) int
		SingleUpload                      func(childComplexity int, file graphql.Upload) int
		StartBuild                        func(childComplexity int, input model.StartBuildInput) int
		UpdateApp                         func(childComplexity int, input model.UpdateAppInput) int
		UpdateAppTemplate                 func(childComplexity int, input model.ConfigTemplate) int
		UpdateBusinessUnit                func(childComplexity int, input model.BusinessUnitInput) int
		UpdateConfigApps                  func(childComplexity int, input *model.UpdateConfig) int
		UpdateDataDogByoc                 func(childComplexity int, input *model.DataDogInput) int
		UpdateDefaultRegion               func(childComplexity int, input *model.DefaultRegionInput) int
		UpdateImage                       func(childComplexity int, appName *string, imageName *string) int
		UpdateOrganization                func(childComplexity int, org *string, defaulttype *bool) int
		UpdateOrganizationSecret          func(childComplexity int, name *string, input *model.UpdateSecretInput) int
		UpdatePat                         func(childComplexity int, input *model.UserPat) int
		UpdateRegistryIDToApp             func(childComplexity int, appName string, name *string) int
		UpdateRole                        func(childComplexity int, userID *string, roleID *int) int
		UpdateUser                        func(childComplexity int, input *model.UpdateUserInput) int
		UpdateUserwebhookURLSlack         func(childComplexity int, webhookURL *string) int
		UpdateVolume                      func(childComplexity int, input *model.UpdateVolumeInput) int
		UploadCompanyLogo                 func(childComplexity int, input *model.Image) int
		UserProfileUpdated                func(childComplexity int, userID *string, userProfileCreated *bool) int
		UserRequestingByoh                func(childComplexity int, input *model.ByohRequest) int
	}

	NewApp struct {
		App func(childComplexity int) int
	}

	Nodes struct {
		Nodes func(childComplexity int) int
	}

	OptimizeImage struct {
		Status func(childComplexity int) int
	}

	OrgCountDetails struct {
		OrgByAppCount func(childComplexity int) int
		TotalOrgCount func(childComplexity int) int
	}

	Organization struct {
		Domains       func(childComplexity int) int
		ID            func(childComplexity int) int
		IsActive      func(childComplexity int) int
		Name          func(childComplexity int) int
		ParentID      func(childComplexity int) int
		ParentOrgName func(childComplexity int) int
		Region        func(childComplexity int) int
		Slug          func(childComplexity int) int
		SubOrg        func(childComplexity int) int
		Type          func(childComplexity int) int
	}

	OrganizationDetails struct {
		Apps       func(childComplexity int) int
		ID         func(childComplexity int) int
		Members    func(childComplexity int) int
		Name       func(childComplexity int) int
		Slug       func(childComplexity int) int
		Type       func(childComplexity int) int
		ViewerRole func(childComplexity int) int
	}

	OrganizationMembershipEdge struct {
		Cursor   func(childComplexity int) int
		ID       func(childComplexity int) int
		JoinedAt func(childComplexity int) int
		Node     func(childComplexity int) int
		Role     func(childComplexity int) int
		RoleID   func(childComplexity int) int
	}

	OrganizationRegionTable struct {
		ID             func(childComplexity int) int
		IsDefault      func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		RegionCode     func(childComplexity int) int
	}

	OrganizationRegistryType struct {
		ID       func(childComplexity int) int
		IsActive func(childComplexity int) int
		Name     func(childComplexity int) int
		Slug     func(childComplexity int) int
	}

	Organizations struct {
		Nodes func(childComplexity int) int
	}

	OrganizationsandBusinessUnit struct {
		BusinessUnit func(childComplexity int) int
		Nodes        func(childComplexity int) int
	}

	OutputMessage struct {
		Message func(childComplexity int) int
	}

	Password struct {
		Message   func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	Payment struct {
		Amount         func(childComplexity int) int
		ClientSecretID func(childComplexity int) int
		Currency       func(childComplexity int) int
		ID             func(childComplexity int) int
	}

	Permission struct {
		Create    func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		Delete    func(childComplexity int) int
		ID        func(childComplexity int) int
		IsActive  func(childComplexity int) int
		Module    func(childComplexity int) int
		Title     func(childComplexity int) int
		Update    func(childComplexity int) int
		View      func(childComplexity int) int
	}

	PlatFormOutput struct {
		Code      func(childComplexity int) int
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	PortHandler struct {
		Handlers func(childComplexity int) int
		Port     func(childComplexity int) int
	}

	PriceList struct {
		Description func(childComplexity int) int
		Nickname    func(childComplexity int) int
		Priceid     func(childComplexity int) int
		Productid   func(childComplexity int) int
		Unitamount  func(childComplexity int) int
	}

	Query struct {
		App                                 func(childComplexity int, name *string) int
		AppQuotaExist                       func(childComplexity int) int
		AppStatusList                       func(childComplexity int, status *string) int
		Appcompact                          func(childComplexity int, name *string) int
		Apps                                func(childComplexity int, typeArg *string, first *int, region *string, orgSlug *string) int
		AppsBusinessUnit                    func(childComplexity int, typeArg *string, first *int, region *string, businessUnit *string) int
		AppsCount                           func(childComplexity int) int
		AppsSubOrg                          func(childComplexity int, typeArg *string, first *int, region *string, subOrgSlug *string) int
		AppsWorkload                        func(childComplexity int, name *string, organiztionID *string) int
		AppsWorkloadIDOrUserRole            func(childComplexity int, workloadID *string, userID *string) int
		BusinessUnitList                    func(childComplexity int) int
		CheckAppByID                        func(childComplexity int, name string) int
		CurrentUser                         func(childComplexity int) int
		GetAllParentOrganizations           func(childComplexity int) int
		GetAllS3deployments                 func(childComplexity int) int
		GetAppByAppID                       func(childComplexity int, id *string) int
		GetAppByRegionCount                 func(childComplexity int) int
		GetAppRegion                        func(childComplexity int, name string, status string) int
		GetAppTemplates                     func(childComplexity int) int
		GetAppsAndOrgsCountDetails          func(childComplexity int) int
		GetAppsAndOrgsandSubOrgCountDetails func(childComplexity int) int
		GetAvailabilityCluster              func(childComplexity int, isLatency *string, first *int) int
		GetAvailableBuiltIn                 func(childComplexity int, first *int) int
		GetBusinessUnit                     func(childComplexity int, orgID string, subOrgID string) int
		GetBusinessUnitByID                 func(childComplexity int, name *string) int
		GetBusinessUnitByOrgID              func(childComplexity int, orgID *string, subOrgID *string) int
		GetCloudRegions                     func(childComplexity int, typeArg *string) int
		GetClusterDetails                   func(childComplexity int, regCode *string) int
		GetClusterDetailsByOrgID            func(childComplexity int, orgID *string) int
		GetClusterDetailsByOrgIDMultipleReg func(childComplexity int, orgID *string) int
		GetDataDogByUserID                  func(childComplexity int) int
		GetDuploStatus                      func(childComplexity int, appName *string) int
		GetElbURL                           func(childComplexity int, input *model.ElbURLInput) int
		GetHost                             func(childComplexity int, orgID *string) int
		GetHostByName                       func(childComplexity int, instanceName *string) int
		GetInviteUserCountByAdminUser       func(childComplexity int) int
		GetOrganizationByOrgID              func(childComplexity int, id string) int
		GetParentIDBySubOrganization        func(childComplexity int, subOrgID *string) int
		GetQueryLog                         func(childComplexity int, input model.GetQueryLog) int
		GetRegionStatus                     func(childComplexity int, appID string) int
		GetRegistryByUser                   func(childComplexity int, orgID string, regType string) int
		GetRequestedRegions                 func(childComplexity int) int
		GetS3deployments                    func(childComplexity int, s3appName *string) int
		GetSecret                           func(childComplexity int, name *string) int
		GetSecretByRegistryID               func(childComplexity int, secretID *string) int
		GetUserAddedRegions                 func(childComplexity int) int
		GetUserByAdmin                      func(childComplexity int) int
		GetUserByAdminAndOrganization       func(childComplexity int, organizationID *string) int
		GetUserByID                         func(childComplexity int) int
		GetUserByOrganizationID             func(childComplexity int, organizationID *string) int
		GetUserPat                          func(childComplexity int) int
		GetUserPermissions                  func(childComplexity int) int
		GetUserPermissionsByPlan            func(childComplexity int) int
		GetVolumeByAppID                    func(childComplexity int, appID *string) int
		GetVolumeType                       func(childComplexity int) int
		GetWorkloadMangementByUser          func(childComplexity int) int
		GetWorkloadMangementByWlID          func(childComplexity int, workloadID *string) int
		GetWorkloadMangementByWlName        func(childComplexity int, workloadName *string) int
		GetWorkloadMangementByorgnizationID func(childComplexity int, orgID *string, subOrgID *string, businessUnitID *string) int
		GetWorkloadRegion                   func(childComplexity int, workloadID string) int
		GetclusterLog                       func(childComplexity int, appName *string, region *string) int
		Getpricelist                        func(childComplexity int) int
		Organization                        func(childComplexity int, slug string) int
		OrganizationRegistryType            func(childComplexity int) int
		Organizations                       func(childComplexity int) int
		OrganizationsandBusinessUnit        func(childComplexity int) int
		Platform                            func(childComplexity int) int
		SubOrganizations                    func(childComplexity int) int
		SubOrganizationsByParentID          func(childComplexity int, parentOrgID *string) int
		UserActivities                      func(childComplexity int, first *int) int
		UserActivitiesByDate                func(childComplexity int, startDate *string, endDate *string) int
		UserDeploymentCountDetails          func(childComplexity int, startDate *string, endDate *string) int
		UserMetrics                         func(childComplexity int, appName *string) int
	}

	QueryLogOutput struct {
		ID           func(childComplexity int) int
		LastSyncTime func(childComplexity int) int
		Message      func(childComplexity int) int
		QueryName    func(childComplexity int) int
		ResolverIP   func(childComplexity int) int
		ResponseCode func(childComplexity int) int
		TimeStamp    func(childComplexity int) int
		Times        func(childComplexity int) int
	}

	ReDeploymentCountByDate struct {
		Date       func(childComplexity int) int
		ReDeployed func(childComplexity int) int
	}

	Region struct {
		Code      func(childComplexity int) int
		Latitude  func(childComplexity int) int
		Longitude func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	RegionDetails struct {
		ClusterType func(childComplexity int) int
		IsDefault   func(childComplexity int) int
		RegCode     func(childComplexity int) int
		RegionName  func(childComplexity int) int
	}

	RegionStatus struct {
		AppURL        func(childComplexity int) int
		DeploymentID  func(childComplexity int) int
		ElbRecordID   func(childComplexity int) int
		ElbRecordName func(childComplexity int) int
		ID            func(childComplexity int) int
		Port          func(childComplexity int) int
		RegionCode    func(childComplexity int) int
		ReleaseID     func(childComplexity int) int
		Status        func(childComplexity int) int
	}

	RegionStatusNodes struct {
		Nodes func(childComplexity int) int
	}

	Regions struct {
		Regions func(childComplexity int) int
	}

	Registry struct {
		Email          func(childComplexity int) int
		IsDefault      func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		Password       func(childComplexity int) int
		RepoType       func(childComplexity int) int
		SecretName     func(childComplexity int) int
		Server         func(childComplexity int) int
		Username       func(childComplexity int) int
	}

	Release struct {
		ArchiveURL         func(childComplexity int) int
		BuilderType        func(childComplexity int) int
		CreatedAt          func(childComplexity int) int
		Deployment         func(childComplexity int) int
		DeploymentStrategy func(childComplexity int) int
		Description        func(childComplexity int) int
		ID                 func(childComplexity int) int
		Image              func(childComplexity int) int
		InProgress         func(childComplexity int) int
		Port               func(childComplexity int) int
		Reason             func(childComplexity int) int
		RoutingPolicy      func(childComplexity int) int
		Stable             func(childComplexity int) int
		Status             func(childComplexity int) int
		User               func(childComplexity int) int
		Version            func(childComplexity int) int
	}

	Releases struct {
		Nodes func(childComplexity int) int
	}

	RequestedRegions struct {
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		ID              func(childComplexity int) int
		RequestedRegion func(childComplexity int) int
		Status          func(childComplexity int) int
		UserName        func(childComplexity int) int
	}

	RequestedRegionsResponse struct {
		AlreadyRequestedRegions func(childComplexity int) int
		Message                 func(childComplexity int) int
		RequestedRegions        func(childComplexity int) int
	}

	Requirement struct {
		LimitRequirement   func(childComplexity int) int
		RequestRequirement func(childComplexity int) int
	}

	RequirementProperties struct {
		CPU    func(childComplexity int) int
		Memory func(childComplexity int) int
	}

	Response struct {
		Message func(childComplexity int) int
	}

	RestartApp struct {
		App func(childComplexity int) int
	}

	ResumeApp struct {
		App func(childComplexity int) int
	}

	S3BuildCommand struct {
		S3Cmd func(childComplexity int) int
	}

	S3Deployments struct {
		AppURL          func(childComplexity int) int
		BuildCommandsS3 func(childComplexity int) int
		BuildTime       func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		CreatedBy       func(childComplexity int) int
		DeploymentTime  func(childComplexity int) int
		EnvVariablesS3  func(childComplexity int) int
		ID              func(childComplexity int) int
		OrgDetails      func(childComplexity int) int
		OrganizationID  func(childComplexity int) int
		S3AppName       func(childComplexity int) int
		Status          func(childComplexity int) int
		UserDetails     func(childComplexity int) int
	}

	S3EnvVariable struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	Secret struct {
		CreatedAt func(childComplexity int) int
		Digest    func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	Service struct {
		Checks          func(childComplexity int) int
		Description     func(childComplexity int) int
		HardConcurrency func(childComplexity int) int
		InternalPort    func(childComplexity int) int
		Ports           func(childComplexity int) int
		Protocol        func(childComplexity int) int
		SoftConcurrency func(childComplexity int) int
	}

	StartBuild struct {
		Build     func(childComplexity int) int
		BuildLogs func(childComplexity int) int
	}

	StripeSubscription struct {
		AccessToken            func(childComplexity int) int
		CustomerID             func(childComplexity int) int
		CustomerSubscriptionID func(childComplexity int) int
		DefaultPaymentMethodid func(childComplexity int) int
		Email                  func(childComplexity int) int
		Name                   func(childComplexity int) int
		PlanID                 func(childComplexity int) int
		Price                  func(childComplexity int) int
		PriceID                func(childComplexity int) int
		Status                 func(childComplexity int) int
		UserID                 func(childComplexity int) int
	}

	SubOrgCount struct {
		BusinessUnit         func(childComplexity int) int
		SubOrganizationCount func(childComplexity int) int
	}

	SubOrganization struct {
		Domains  func(childComplexity int) int
		ID       func(childComplexity int) int
		IsActive func(childComplexity int) int
		Name     func(childComplexity int) int
		Region   func(childComplexity int) int
		Slug     func(childComplexity int) int
		Type     func(childComplexity int) int
	}

	SuspendApp struct {
		App func(childComplexity int) int
	}

	TokenValidation struct {
		RefreshToken func(childComplexity int) int
	}

	UpdateAppConfig struct {
		AppID        func(childComplexity int) int
		AppName      func(childComplexity int) int
		ExternalPort func(childComplexity int) int
		Image        func(childComplexity int) int
		InternalPort func(childComplexity int) int
		Version      func(childComplexity int) int
	}

	UpdateImageOutput struct {
		Message func(childComplexity int) int
	}

	UpdateUser struct {
		CompanyName func(childComplexity int) int
		Industry    func(childComplexity int) int
		Location    func(childComplexity int) int
		PhoneNumber func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	User struct {
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Name      func(childComplexity int) int
	}

	UserDeploymentDetailCount struct {
		CompanyName     func(childComplexity int) int
		DeployData      func(childComplexity int) int
		Email           func(childComplexity int) int
		ReDeployData    func(childComplexity int) int
		RoleID          func(childComplexity int) int
		TotalDeployed   func(childComplexity int) int
		TotalReDeployed func(childComplexity int) int
		UserName        func(childComplexity int) int
	}

	VMSize struct {
		CPUCores    func(childComplexity int) int
		MemoryGb    func(childComplexity int) int
		MemoryMb    func(childComplexity int) int
		Name        func(childComplexity int) int
		PriceMonth  func(childComplexity int) int
		PriceSecond func(childComplexity int) int
	}

	VMInstanceMessage struct {
		ID      func(childComplexity int) int
		Message func(childComplexity int) int
	}

	Volume struct {
		App       func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Region    func(childComplexity int) int
		SizeGb    func(childComplexity int) int
	}

	VolumeByApp struct {
		AccessMode    func(childComplexity int) int
		AppID         func(childComplexity int) int
		ContainerPath func(childComplexity int) int
		HostPath      func(childComplexity int) int
		IsHostVolume  func(childComplexity int) int
		IsRead        func(childComplexity int) int
		Name          func(childComplexity int) int
		Path          func(childComplexity int) int
		Size          func(childComplexity int) int
		VolumeTypeID  func(childComplexity int) int
	}

	VolumeType struct {
		Description  func(childComplexity int) int
		ID           func(childComplexity int) int
		IsHostVolume func(childComplexity int) int
		IsRead       func(childComplexity int) int
		Name         func(childComplexity int) int
	}

	Volumes struct {
		Nodes func(childComplexity int) int
	}

	WorkLoadRegions struct {
		AddedWorkLoadRegions func(childComplexity int) int
		EnvironmentEndpoint  func(childComplexity int) int
		EnvironmentName      func(childComplexity int) int
		ID                   func(childComplexity int) int
		OrganizationID       func(childComplexity int) int
	}

	WorkloadManagementList struct {
		Apps                func(childComplexity int) int
		BusinessUnitID      func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		EnvironmentEndpoint func(childComplexity int) int
		EnvironmentName     func(childComplexity int) int
		ID                  func(childComplexity int) int
		OrganizationID      func(childComplexity int) int
		OrganizationName    func(childComplexity int) int
		SubOrganizationID   func(childComplexity int) int
		UserID              func(childComplexity int) int
	}

	AppCount struct {
		Active     func(childComplexity int) int
		InActive   func(childComplexity int) int
		New        func(childComplexity int) int
		Region     func(childComplexity int) int
		Terminated func(childComplexity int) int
		TotalApps  func(childComplexity int) int
	}

	AppCountsDetails struct {
		ActiveApps  func(childComplexity int) int
		DeletedApps func(childComplexity int) int
	}

	BusinessUnitListInSubOrg struct {
		BusinessUnitUnderSubOrg func(childComplexity int) int
		SubOrgID                func(childComplexity int) int
		SubOrgName              func(childComplexity int) int
	}

	GetBusinessUnit struct {
		ID       func(childComplexity int) int
		IsActive func(childComplexity int) int
		Name     func(childComplexity int) int
	}

	ListBusinessUnit struct {
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		OrgID      func(childComplexity int) int
		OrgName    func(childComplexity int) int
		SubOrgID   func(childComplexity int) int
		SubOrgName func(childComplexity int) int
	}

	PlanAndPermission struct {
		AlertsAdvisories            func(childComplexity int) int
		AppNotification             func(childComplexity int) int
		ApplicationHealthDashboard  func(childComplexity int) int
		Apps                        func(childComplexity int) int
		AuditLogs                   func(childComplexity int) int
		BusinessunitCount           func(childComplexity int) int
		Byoh                        func(childComplexity int) int
		CustomDomain                func(childComplexity int) int
		ID                          func(childComplexity int) int
		InfrastructureConfiguration func(childComplexity int) int
		InviteUserLimit             func(childComplexity int) int
		K8sRegions                  func(childComplexity int) int
		MonitoringPlatform          func(childComplexity int) int
		OrganizationCount           func(childComplexity int) int
		OrganizationManagement      func(childComplexity int) int
		PlanName                    func(childComplexity int) int
		Replicas                    func(childComplexity int) int
		Secret                      func(childComplexity int) int
		SingleSignOn                func(childComplexity int) int
		SslSecurity                 func(childComplexity int) int
		Storage                     func(childComplexity int) int
		SubOrganizationCount        func(childComplexity int) int
		VersionControlPanel         func(childComplexity int) int
		WorkloadManagement          func(childComplexity int) int
	}

	RegionAppCount struct {
		Apps   func(childComplexity int) int
		Region func(childComplexity int) int
	}

	UpdateConfigApp struct {
		Message func(childComplexity int) int
	}

	UserActivities struct {
		Activities          func(childComplexity int) int
		AppsCount           func(childComplexity int) int
		CreatedAt           func(childComplexity int) int
		ID                  func(childComplexity int) int
		IsRead              func(childComplexity int) int
		Message             func(childComplexity int) int
		OrganizationName    func(childComplexity int) int
		ReferenceID         func(childComplexity int) int
		SubOrganizationName func(childComplexity int) int
		Type                func(childComplexity int) int
		UserID              func(childComplexity int) int
	}
}

type MutationResolver interface {
	CreateApp(ctx context.Context, input model.CreateAppInput) (*model.NewApp, error)
	DeleteApp(ctx context.Context, appID string, regionCode string) (*model.App, error)
	MoveApp(ctx context.Context, input model.MoveAppInput) (*model.NewApp, error)
	PauseApp(ctx context.Context, input model.PauseAppInput) (*model.SuspendApp, error)
	ResumeApp(ctx context.Context, input model.ResumeAppInput) (*model.ResumeApp, error)
	RestartApp(ctx context.Context, input model.RestartAppInput) (*model.RestartApp, error)
	ConfigureRegions(ctx context.Context, input *model.ConfigureRegionsInput) (*model.App, error)
	UpdateApp(ctx context.Context, input model.UpdateAppInput) (*model.App, error)
	UpdateImage(ctx context.Context, appName *string, imageName *string) (*model.UpdateImageOutput, error)
	EditApp(ctx context.Context, input *model.EditAppByOrganization) (*string, error)
	UpdateConfigApps(ctx context.Context, input *model.UpdateConfig) (*model.UpdateAppConfig, error)
	AppTemplate(ctx context.Context, input model.ConfigTemplate) (string, error)
	UpdateAppTemplate(ctx context.Context, input model.ConfigTemplate) (string, error)
	DeleteAppTemplate(ctx context.Context, id *string) (string, error)
	CheckGithubRepoPrivateOrPublic(ctx context.Context, githubURL *string) (*bool, error)
	CreateNifeTomlFile(ctx context.Context, input *model.CreateAppToml) (string, error)
	CreateUser(ctx context.Context, input model.NewUser) (string, error)
	Login(ctx context.Context, input model.Login) (string, error)
	CreateBusinessUnit(ctx context.Context, input model.BusinessUnitInput) (string, error)
	UpdateBusinessUnit(ctx context.Context, input model.BusinessUnitInput) (string, error)
	DeleteBusinessUnit(ctx context.Context, id string) (string, error)
	AddRegionUsingKubeConfig(ctx context.Context, input *model.ClusterDetailsInput) (string, error)
	DeleteKubeConfigRegion(ctx context.Context, id *string) (string, error)
	DeployImage(ctx context.Context, input model.DeployImageInput) (*model.DeployImage, error)
	OptimizeImage(ctx context.Context, input model.OptimizeImageInput) (*model.OptimizeImage, error)
	DeployK8s(ctx context.Context, input model.DeployInput) (*model.DeployOutput, error)
	StartBuild(ctx context.Context, input model.StartBuildInput) (*model.StartBuild, error)
	S3Deployment(ctx context.Context, input *model.S3DeployInput) (string, error)
	RemoveFiles(ctx context.Context, s3appName *string) (*string, error)
	DeleteS3Deployment(ctx context.Context, s3appName *string) (*string, error)
	ClientSideLog(ctx context.Context, input model.ClientSideLogs) (string, error)
	DeleteDuploApp(ctx context.Context, appName *string) (*model.OutputMessage, error)
	SingleUpload(ctx context.Context, file graphql.Upload) (*model.File, error)
	AddDataDogByoc(ctx context.Context, input model.DataDogInput) (string, error)
	UpdateDataDogByoc(ctx context.Context, input *model.DataDogInput) (string, error)
	DeleteDataDogByoc(ctx context.Context, dataDogID string) (string, error)
	MigrateOrganization(ctx context.Context, input model.MigrateOrganizationInput) (string, error)
	CreateOrganization(ctx context.Context, input model.CreateOrganizationInput) (*model.CreateOrganization, error)
	CreateSubOrganization(ctx context.Context, input model.CreateSubOrganizationInput) (*model.CreateOrganization, error)
	DeleteOrganization(ctx context.Context, input model.DeleteOrganizationInput) (*model.DeleteOrganization, error)
	DeleteSubOrganization(ctx context.Context, input model.DeleteSubOrganizationInput) (*model.DeleteSubOrganization, error)
	CreateOrganizationSecret(ctx context.Context, input *model.CreateSecretInput) (*model.Response, error)
	UpdateOrganizationSecret(ctx context.Context, name *string, input *model.UpdateSecretInput) (*model.Response, error)
	DeleteOrganizationSecret(ctx context.Context, name *string, id *string) (*model.Response, error)
	UpdateRegistryIDToApp(ctx context.Context, appName string, name *string) (*model.Response, error)
	UpdateOrganization(ctx context.Context, org *string, defaulttype *bool) (string, error)
	CreateNamespaceInCluster(ctx context.Context, input *model.CreateNamespace) (string, error)
	AddUserAddedregionsToOrganizatiom(ctx context.Context, organizationID []*string) (string, error)
	CreatePaymentIntent(ctx context.Context, input model.CreatePaymentIntent) (*model.Payment, error)
	CreateAttachPaymentMethod(ctx context.Context, input model.CreateAttachPaymentMethod) (*model.AttachPayment, error)
	CreateStripeSubscription(ctx context.Context, input model.CreateStripeSubscription) (*model.StripeSubscription, error)
	UpdateDefaultRegion(ctx context.Context, input *model.DefaultRegionInput) (string, error)
	NewRegionRequest(ctx context.Context, input *model.RegionRequest) (string, error)
	NewRegionsRequest(ctx context.Context, input *model.RegionRequest) (*model.RequestedRegionsResponse, error)
	MutipleRegion(ctx context.Context, input *model.MultipleRegionInput) (*model.MultipleRegionResponse, error)
	DeleteRequestedRegion(ctx context.Context, id *string) (string, error)
	UpdateRole(ctx context.Context, userID *string, roleID *int) (*string, error)
	UpdateUser(ctx context.Context, input *model.UpdateUserInput) (*model.UpdateUser, error)
	ChangePassword(ctx context.Context, input model.ChangePassword) (*model.Password, error)
	ActiveUser(ctx context.Context, isActive *bool, isDelete *bool) (string, error)
	InviteUser(ctx context.Context, input *model.InviteUser) (*model.InviteUserOutputMessage, error)
	AddInviteUserRole(ctx context.Context, email string, roleID int) (*string, error)
	RemoveUserOrg(ctx context.Context, organizationID *string, userID *string) (*string, error)
	UserProfileUpdated(ctx context.Context, userID *string, userProfileCreated *bool) (*string, error)
	AddUserToOrg(ctx context.Context, input *model.AddUser) (string, error)
	UploadCompanyLogo(ctx context.Context, input *model.Image) (string, error)
	RemoveInviteuser(ctx context.Context, userID *string) (string, error)
	NotificationInfo(ctx context.Context, input *model.Notification) (string, error)
	UserRequestingByoh(ctx context.Context, input *model.ByohRequest) (string, error)
	RequestingPicoNets(ctx context.Context, appName *string) (string, error)
	SetUserTokenExpireTime(ctx context.Context, expireTime *int) (string, error)
	UpdateUserwebhookURLSlack(ctx context.Context, webhookURL *string) (string, error)
	AddPat(ctx context.Context, input *model.UserPat) (string, error)
	UpdatePat(ctx context.Context, input *model.UserPat) (string, error)
	DeletePat(ctx context.Context, id *string) (string, error)
	NodeAction(ctx context.Context, input *model.StartAndStopVM) (*model.VMInstanceMessage, error)
	CreateHost(ctx context.Context, input *model.Host) (*model.VMInstanceMessage, error)
	DeleteHost(ctx context.Context, id *int) (string, error)
	NodeActionAws(ctx context.Context, input *model.StartAndStopVM) (*model.VMInstanceMessage, error)
	NodeActionAzure(ctx context.Context, input *model.StartAndStopVM) (*model.VMInstanceMessage, error)
	CreateDuploVolume(ctx context.Context, input []*model.DuploVolumeInput) (*model.OutputMessage, error)
	UpdateVolume(ctx context.Context, input *model.UpdateVolumeInput) (*string, error)
	CreateWorkloadManagement(ctx context.Context, input *model.WorkloadManagement) (string, error)
	DeleteWorkloadManagement(ctx context.Context, id *string) (string, error)
	AddWorkloadRegions(ctx context.Context, workLoadID string, regionCode []*string) (string, error)
	RemoveWorkloadRegions(ctx context.Context, wlid *string, wlRegion *string) (string, error)
}
type QueryResolver interface {
	App(ctx context.Context, name *string) (*model.App, error)
	Apps(ctx context.Context, typeArg *string, first *int, region *string, orgSlug *string) (*model.Nodes, error)
	AppsSubOrg(ctx context.Context, typeArg *string, first *int, region *string, subOrgSlug *string) (*model.Nodes, error)
	AppsBusinessUnit(ctx context.Context, typeArg *string, first *int, region *string, businessUnit *string) (*model.Nodes, error)
	AppsWorkload(ctx context.Context, name *string, organiztionID *string) (*model.Nodes, error)
	AppsWorkloadIDOrUserRole(ctx context.Context, workloadID *string, userID *string) (*model.Nodes, error)
	Appcompact(ctx context.Context, name *string) (*model.AppCompact, error)
	GetAppRegion(ctx context.Context, name string, status string) (*model.AppDeploymentRegion, error)
	GetAvailabilityCluster(ctx context.Context, isLatency *string, first *int) (*model.ClusterNodes, error)
	GetRegionStatus(ctx context.Context, appID string) (*model.RegionStatusNodes, error)
	Platform(ctx context.Context) (*model.Regions, error)
	AppStatusList(ctx context.Context, status *string) (*model.Nodes, error)
	AppQuotaExist(ctx context.Context) (bool, error)
	CheckAppByID(ctx context.Context, name string) (bool, error)
	GetAppByAppID(ctx context.Context, id *string) (*model.App, error)
	AppsCount(ctx context.Context) (*model.AppCount, error)
	GetAppTemplates(ctx context.Context) ([]*model.ConfigAppTemplates, error)
	GetAppsAndOrgsCountDetails(ctx context.Context) (*model.AppsAndOrgsCountDetails, error)
	GetAppsAndOrgsandSubOrgCountDetails(ctx context.Context) (*model.AppsAndOrgsAndSubOrgCountDetails, error)
	BusinessUnitList(ctx context.Context) ([]*model.ListBusinessUnit, error)
	GetBusinessUnitByID(ctx context.Context, name *string) (*model.ListBusinessUnit, error)
	GetBusinessUnitByOrgID(ctx context.Context, orgID *string, subOrgID *string) ([]*model.ListBusinessUnit, error)
	GetBusinessUnit(ctx context.Context, orgID string, subOrgID string) ([]*model.GetBusinessUnit, error)
	GetClusterDetails(ctx context.Context, regCode *string) (*model.ClusterDetails, error)
	GetClusterDetailsByOrgID(ctx context.Context, orgID *string) (*model.ClusterDetails, error)
	GetClusterDetailsByOrgIDMultipleReg(ctx context.Context, orgID *string) ([]*model.ClusterDetails, error)
	GetUserAddedRegions(ctx context.Context) ([]*model.ClusterDetails, error)
	GetCloudRegions(ctx context.Context, typeArg *string) ([]*model.CloudRegions, error)
	GetAvailableBuiltIn(ctx context.Context, first *int) ([]string, error)
	GetElbURL(ctx context.Context, input *model.ElbURLInput) (*model.ElbURL, error)
	GetAllS3deployments(ctx context.Context) ([]*model.S3Deployments, error)
	GetS3deployments(ctx context.Context, s3appName *string) (*model.S3Deployments, error)
	GetQueryLog(ctx context.Context, input model.GetQueryLog) ([]*model.QueryLogOutput, error)
	GetDuploStatus(ctx context.Context, appName *string) ([]*model.DuploDeployOutput, error)
	GetclusterLog(ctx context.Context, appName *string, region *string) (*string, error)
	UserMetrics(ctx context.Context, appName *string) ([]*model.GetUserMetrics, error)
	GetDataDogByUserID(ctx context.Context) ([]*model.AddedDataDog, error)
	Organizations(ctx context.Context) (*model.Organizations, error)
	GetAllParentOrganizations(ctx context.Context) (*model.Organizations, error)
	OrganizationsandBusinessUnit(ctx context.Context) (*model.OrganizationsandBusinessUnit, error)
	SubOrganizations(ctx context.Context) (*model.Organizations, error)
	SubOrganizationsByParentID(ctx context.Context, parentOrgID *string) (*model.Organizations, error)
	GetParentIDBySubOrganization(ctx context.Context, subOrgID *string) (*model.Organizations, error)
	Organization(ctx context.Context, slug string) (*model.OrganizationDetails, error)
	GetOrganizationByOrgID(ctx context.Context, id string) (*model.Organization, error)
	OrganizationRegistryType(ctx context.Context) ([]*model.OrganizationRegistryType, error)
	GetSecret(ctx context.Context, name *string) ([]*model.GetUserSecret, error)
	GetRegistryByUser(ctx context.Context, orgID string, regType string) ([]*model.GetSecRegistry, error)
	GetAppByRegionCount(ctx context.Context) (*model.OrgCountDetails, error)
	GetSecretByRegistryID(ctx context.Context, secretID *string) (*model.GetUserSecret, error)
	Getpricelist(ctx context.Context) ([]*model.PriceList, error)
	GetRequestedRegions(ctx context.Context) ([]*model.RequestedRegions, error)
	GetUserPermissions(ctx context.Context) ([]*model.Permission, error)
	GetUserPermissionsByPlan(ctx context.Context) (*model.PlanAndPermission, error)
	GetUserByID(ctx context.Context) (*model.GetUserByID, error)
	CurrentUser(ctx context.Context) (*model.CurrentUserEmail, error)
	GetUserByAdmin(ctx context.Context) ([]*model.GetUserByID, error)
	GetUserByAdminAndOrganization(ctx context.Context, organizationID *string) ([]*model.GetUserByID, error)
	UserActivities(ctx context.Context, first *int) ([]*model.UserActivities, error)
	UserActivitiesByDate(ctx context.Context, startDate *string, endDate *string) ([]*model.UserActivities, error)
	GetInviteUserCountByAdminUser(ctx context.Context) (*int, error)
	UserDeploymentCountDetails(ctx context.Context, startDate *string, endDate *string) ([]*model.UserDeploymentDetailCount, error)
	GetUserByOrganizationID(ctx context.Context, organizationID *string) ([]*model.GetUserByID, error)
	GetUserPat(ctx context.Context) ([]*model.GetUserPat, error)
	GetHost(ctx context.Context, orgID *string) ([]*model.HostPayload, error)
	GetHostByName(ctx context.Context, instanceName *string) (*model.HostDetails, error)
	GetVolumeType(ctx context.Context) ([]*model.VolumeType, error)
	GetVolumeByAppID(ctx context.Context, appID *string) ([]*model.VolumeByApp, error)
	GetWorkloadMangementByUser(ctx context.Context) ([]*model.WorkloadManagementList, error)
	GetWorkloadMangementByorgnizationID(ctx context.Context, orgID *string, subOrgID *string, businessUnitID *string) ([]*model.WorkloadManagementList, error)
	GetWorkloadMangementByWlID(ctx context.Context, workloadID *string) (*model.WorkloadManagementList, error)
	GetWorkloadMangementByWlName(ctx context.Context, workloadName *string) (*model.WorkloadManagementList, error)
	GetWorkloadRegion(ctx context.Context, workloadID string) (*model.WorkLoadRegions, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Activity.Activities":
		if e.complexity.Activity.Activities == nil {
			break
		}

		return e.complexity.Activity.Activities(childComplexity), true

	case "Activity.createdAt":
		if e.complexity.Activity.CreatedAt == nil {
			break
		}

		return e.complexity.Activity.CreatedAt(childComplexity), true

	case "Activity.Id":
		if e.complexity.Activity.ID == nil {
			break
		}

		return e.complexity.Activity.ID(childComplexity), true

	case "Activity.Message":
		if e.complexity.Activity.Message == nil {
			break
		}

		return e.complexity.Activity.Message(childComplexity), true

	case "Activity.Type":
		if e.complexity.Activity.Type == nil {
			break
		}

		return e.complexity.Activity.Type(childComplexity), true

	case "Actor.type":
		if e.complexity.Actor.Type == nil {
			break
		}

		return e.complexity.Actor.Type(childComplexity), true

	case "AddedDataDog.apiEndpoint":
		if e.complexity.AddedDataDog.APIEndpoint == nil {
			break
		}

		return e.complexity.AddedDataDog.APIEndpoint(childComplexity), true

	case "AddedDataDog.apiKey":
		if e.complexity.AddedDataDog.APIKey == nil {
			break
		}

		return e.complexity.AddedDataDog.APIKey(childComplexity), true

	case "AddedDataDog.appKey":
		if e.complexity.AddedDataDog.AppKey == nil {
			break
		}

		return e.complexity.AddedDataDog.AppKey(childComplexity), true

	case "AddedDataDog.clusterDetails":
		if e.complexity.AddedDataDog.ClusterDetails == nil {
			break
		}

		return e.complexity.AddedDataDog.ClusterDetails(childComplexity), true

	case "AddedDataDog.clusterId":
		if e.complexity.AddedDataDog.ClusterID == nil {
			break
		}

		return e.complexity.AddedDataDog.ClusterID(childComplexity), true

	case "AddedDataDog.id":
		if e.complexity.AddedDataDog.ID == nil {
			break
		}

		return e.complexity.AddedDataDog.ID(childComplexity), true

	case "AllocationEvent.message":
		if e.complexity.AllocationEvent.Message == nil {
			break
		}

		return e.complexity.AllocationEvent.Message(childComplexity), true

	case "AllocationEvent.timestamp":
		if e.complexity.AllocationEvent.Timestamp == nil {
			break
		}

		return e.complexity.AllocationEvent.Timestamp(childComplexity), true

	case "AllocationEvent.type":
		if e.complexity.AllocationEvent.Type == nil {
			break
		}

		return e.complexity.AllocationEvent.Type(childComplexity), true

	case "AllocationStatus.canary":
		if e.complexity.AllocationStatus.Canary == nil {
			break
		}

		return e.complexity.AllocationStatus.Canary(childComplexity), true

	case "AllocationStatus.checks":
		if e.complexity.AllocationStatus.Checks == nil {
			break
		}

		return e.complexity.AllocationStatus.Checks(childComplexity), true

	case "AllocationStatus.createdAt":
		if e.complexity.AllocationStatus.CreatedAt == nil {
			break
		}

		return e.complexity.AllocationStatus.CreatedAt(childComplexity), true

	case "AllocationStatus.criticalCheckCount":
		if e.complexity.AllocationStatus.CriticalCheckCount == nil {
			break
		}

		return e.complexity.AllocationStatus.CriticalCheckCount(childComplexity), true

	case "AllocationStatus.desiredStatus":
		if e.complexity.AllocationStatus.DesiredStatus == nil {
			break
		}

		return e.complexity.AllocationStatus.DesiredStatus(childComplexity), true

	case "AllocationStatus.events":
		if e.complexity.AllocationStatus.Events == nil {
			break
		}

		return e.complexity.AllocationStatus.Events(childComplexity), true

	case "AllocationStatus.failed":
		if e.complexity.AllocationStatus.Failed == nil {
			break
		}

		return e.complexity.AllocationStatus.Failed(childComplexity), true

	case "AllocationStatus.healthy":
		if e.complexity.AllocationStatus.Healthy == nil {
			break
		}

		return e.complexity.AllocationStatus.Healthy(childComplexity), true

	case "AllocationStatus.id":
		if e.complexity.AllocationStatus.ID == nil {
			break
		}

		return e.complexity.AllocationStatus.ID(childComplexity), true

	case "AllocationStatus.idShort":
		if e.complexity.AllocationStatus.IDShort == nil {
			break
		}

		return e.complexity.AllocationStatus.IDShort(childComplexity), true

	case "AllocationStatus.latestVersion":
		if e.complexity.AllocationStatus.LatestVersion == nil {
			break
		}

		return e.complexity.AllocationStatus.LatestVersion(childComplexity), true

	case "AllocationStatus.passingCheckCount":
		if e.complexity.AllocationStatus.PassingCheckCount == nil {
			break
		}

		return e.complexity.AllocationStatus.PassingCheckCount(childComplexity), true

	case "AllocationStatus.recentLogs":
		if e.complexity.AllocationStatus.RecentLogs == nil {
			break
		}

		return e.complexity.AllocationStatus.RecentLogs(childComplexity), true

	case "AllocationStatus.region":
		if e.complexity.AllocationStatus.Region == nil {
			break
		}

		return e.complexity.AllocationStatus.Region(childComplexity), true

	case "AllocationStatus.restarts":
		if e.complexity.AllocationStatus.Restarts == nil {
			break
		}

		return e.complexity.AllocationStatus.Restarts(childComplexity), true

	case "AllocationStatus.status":
		if e.complexity.AllocationStatus.Status == nil {
			break
		}

		return e.complexity.AllocationStatus.Status(childComplexity), true

	case "AllocationStatus.transitioning":
		if e.complexity.AllocationStatus.Transitioning == nil {
			break
		}

		return e.complexity.AllocationStatus.Transitioning(childComplexity), true

	case "AllocationStatus.updatedAt":
		if e.complexity.AllocationStatus.UpdatedAt == nil {
			break
		}

		return e.complexity.AllocationStatus.UpdatedAt(childComplexity), true

	case "AllocationStatus.version":
		if e.complexity.AllocationStatus.Version == nil {
			break
		}

		return e.complexity.AllocationStatus.Version(childComplexity), true

	case "AllocationStatus.warningCheckCount":
		if e.complexity.AllocationStatus.WarningCheckCount == nil {
			break
		}

		return e.complexity.AllocationStatus.WarningCheckCount(childComplexity), true

	case "App.allocation":
		if e.complexity.App.Allocation == nil {
			break
		}

		return e.complexity.App.Allocation(childComplexity), true

	case "App.allocations":
		if e.complexity.App.Allocations == nil {
			break
		}

		args, err := ec.field_App_allocations_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Allocations(childComplexity, args["showCompleted"].(*bool)), true

	case "App.appUrl":
		if e.complexity.App.AppURL == nil {
			break
		}

		return e.complexity.App.AppURL(childComplexity), true

	case "App.autoscaling":
		if e.complexity.App.Autoscaling == nil {
			break
		}

		return e.complexity.App.Autoscaling(childComplexity), true

	case "App.backupRegions":
		if e.complexity.App.BackupRegions == nil {
			break
		}

		return e.complexity.App.BackupRegions(childComplexity), true

	case "App.buildLogsUrl":
		if e.complexity.App.BuildLogsURL == nil {
			break
		}

		return e.complexity.App.BuildLogsURL(childComplexity), true

	case "App.buildTime":
		if e.complexity.App.BuildTime == nil {
			break
		}

		return e.complexity.App.BuildTime(childComplexity), true

	case "App.builds":
		if e.complexity.App.Builds == nil {
			break
		}

		return e.complexity.App.Builds(childComplexity), true

	case "App.builtinType":
		if e.complexity.App.BuiltinType == nil {
			break
		}

		return e.complexity.App.BuiltinType(childComplexity), true

	case "App.businessUnitId":
		if e.complexity.App.BusinessUnitID == nil {
			break
		}

		return e.complexity.App.BusinessUnitID(childComplexity), true

	case "App.businessUnitName":
		if e.complexity.App.BusinessUnitName == nil {
			break
		}

		return e.complexity.App.BusinessUnitName(childComplexity), true

	case "App.certificate":
		if e.complexity.App.Certificate == nil {
			break
		}

		return e.complexity.App.Certificate(childComplexity), true

	case "App.certificates":
		if e.complexity.App.Certificates == nil {
			break
		}

		return e.complexity.App.Certificates(childComplexity), true

	case "App.changes":
		if e.complexity.App.Changes == nil {
			break
		}

		return e.complexity.App.Changes(childComplexity), true

	case "App.clusterDetials":
		if e.complexity.App.ClusterDetials == nil {
			break
		}

		return e.complexity.App.ClusterDetials(childComplexity), true

	case "App.config":
		if e.complexity.App.Config == nil {
			break
		}

		return e.complexity.App.Config(childComplexity), true

	case "App.containerId":
		if e.complexity.App.ContainerID == nil {
			break
		}

		return e.complexity.App.ContainerID(childComplexity), true

	case "App.createdAt":
		if e.complexity.App.CreatedAt == nil {
			break
		}

		return e.complexity.App.CreatedAt(childComplexity), true

	case "App.currentRelease":
		if e.complexity.App.CurrentRelease == nil {
			break
		}

		return e.complexity.App.CurrentRelease(childComplexity), true

	case "App.deployType":
		if e.complexity.App.DeployType == nil {
			break
		}

		return e.complexity.App.DeployType(childComplexity), true

	case "App.deployed":
		if e.complexity.App.Deployed == nil {
			break
		}

		return e.complexity.App.Deployed(childComplexity), true

	case "App.deploymentStatus":
		if e.complexity.App.DeploymentStatus == nil {
			break
		}

		args, err := ec.field_App_deploymentStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.DeploymentStatus(childComplexity, args["id"].(*string)), true

	case "App.deploymentTime":
		if e.complexity.App.DeploymentTime == nil {
			break
		}

		return e.complexity.App.DeploymentTime(childComplexity), true

	case "App.dockerId":
		if e.complexity.App.DockerID == nil {
			break
		}

		return e.complexity.App.DockerID(childComplexity), true

	case "App.envArgs":
		if e.complexity.App.EnvArgs == nil {
			break
		}

		return e.complexity.App.EnvArgs(childComplexity), true

	case "App.hostId":
		if e.complexity.App.HostID == nil {
			break
		}

		return e.complexity.App.HostID(childComplexity), true

	case "App.hostname":
		if e.complexity.App.Hostname == nil {
			break
		}

		return e.complexity.App.Hostname(childComplexity), true

	case "App.id":
		if e.complexity.App.ID == nil {
			break
		}

		return e.complexity.App.ID(childComplexity), true

	case "App.ipAddress":
		if e.complexity.App.IPAddress == nil {
			break
		}

		return e.complexity.App.IPAddress(childComplexity), true

	case "App.ipAddresses":
		if e.complexity.App.IPAddresses == nil {
			break
		}

		return e.complexity.App.IPAddresses(childComplexity), true

	case "App.imageName":
		if e.complexity.App.ImageName == nil {
			break
		}

		return e.complexity.App.ImageName(childComplexity), true

	case "App.instanceId":
		if e.complexity.App.InstanceID == nil {
			break
		}

		return e.complexity.App.InstanceID(childComplexity), true

	case "App.name":
		if e.complexity.App.Name == nil {
			break
		}

		return e.complexity.App.Name(childComplexity), true

	case "App.organization":
		if e.complexity.App.Organization == nil {
			break
		}

		return e.complexity.App.Organization(childComplexity), true

	case "App.organizationId":
		if e.complexity.App.OrganizationID == nil {
			break
		}

		return e.complexity.App.OrganizationID(childComplexity), true

	case "App.organizationName":
		if e.complexity.App.OrganizationName == nil {
			break
		}

		return e.complexity.App.OrganizationName(childComplexity), true

	case "App.parseConfig":
		if e.complexity.App.ParseConfig == nil {
			break
		}

		args, err := ec.field_App_parseConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.ParseConfig(childComplexity, args["definition"].(map[string]interface{})), true

	case "App.port":
		if e.complexity.App.Port == nil {
			break
		}

		return e.complexity.App.Port(childComplexity), true

	case "App.regions":
		if e.complexity.App.Regions == nil {
			break
		}

		return e.complexity.App.Regions(childComplexity), true

	case "App.release":
		if e.complexity.App.Release == nil {
			break
		}

		return e.complexity.App.Release(childComplexity), true

	case "App.releases":
		if e.complexity.App.Releases == nil {
			break
		}

		args, err := ec.field_App_releases_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.App.Releases(childComplexity, args["first"].(*int)), true

	case "App.replicas":
		if e.complexity.App.Replicas == nil {
			break
		}

		return e.complexity.App.Replicas(childComplexity), true

	case "App.secretRegistryId":
		if e.complexity.App.SecretRegistryID == nil {
			break
		}

		return e.complexity.App.SecretRegistryID(childComplexity), true

	case "App.secrets":
		if e.complexity.App.Secrets == nil {
			break
		}

		return e.complexity.App.Secrets(childComplexity), true

	case "App.services":
		if e.complexity.App.Services == nil {
			break
		}

		return e.complexity.App.Services(childComplexity), true

	case "App.status":
		if e.complexity.App.Status == nil {
			break
		}

		return e.complexity.App.Status(childComplexity), true

	case "App.subOrganizationId":
		if e.complexity.App.SubOrganizationID == nil {
			break
		}

		return e.complexity.App.SubOrganizationID(childComplexity), true

	case "App.subOrganizationName":
		if e.complexity.App.SubOrganizationName == nil {
			break
		}

		return e.complexity.App.SubOrganizationName(childComplexity), true

	case "App.tenantId":
		if e.complexity.App.TenantID == nil {
			break
		}

		return e.complexity.App.TenantID(childComplexity), true

	case "App.userDetails":
		if e.complexity.App.UserDetails == nil {
			break
		}

		return e.complexity.App.UserDetails(childComplexity), true

	case "App.vmSize":
		if e.complexity.App.VMSize == nil {
			break
		}

		return e.complexity.App.VMSize(childComplexity), true

	case "App.version":
		if e.complexity.App.Version == nil {
			break
		}

		return e.complexity.App.Version(childComplexity), true

	case "App.volumes":
		if e.complexity.App.Volumes == nil {
			break
		}

		return e.complexity.App.Volumes(childComplexity), true

	case "App.WorkloadManagementEndPoint":
		if e.complexity.App.WorkloadManagementEndPoint == nil {
			break
		}

		return e.complexity.App.WorkloadManagementEndPoint(childComplexity), true

	case "App.workloadManagementId":
		if e.complexity.App.WorkloadManagementID == nil {
			break
		}

		return e.complexity.App.WorkloadManagementID(childComplexity), true

	case "App.WorkloadManagementName":
		if e.complexity.App.WorkloadManagementName == nil {
			break
		}

		return e.complexity.App.WorkloadManagementName(childComplexity), true

	case "AppCertificate.acmeALPNConfigured":
		if e.complexity.AppCertificate.AcmeALPNConfigured == nil {
			break
		}

		return e.complexity.AppCertificate.AcmeALPNConfigured(childComplexity), true

	case "AppCertificate.acmeDNSConfigured":
		if e.complexity.AppCertificate.AcmeDNSConfigured == nil {
			break
		}

		return e.complexity.AppCertificate.AcmeDNSConfigured(childComplexity), true

	case "AppCertificate.certificateAuthority":
		if e.complexity.AppCertificate.CertificateAuthority == nil {
			break
		}

		return e.complexity.AppCertificate.CertificateAuthority(childComplexity), true

	case "AppCertificate.clientStatus":
		if e.complexity.AppCertificate.ClientStatus == nil {
			break
		}

		return e.complexity.AppCertificate.ClientStatus(childComplexity), true

	case "AppCertificate.configured":
		if e.complexity.AppCertificate.Configured == nil {
			break
		}

		return e.complexity.AppCertificate.Configured(childComplexity), true

	case "AppCertificate.createdAt":
		if e.complexity.AppCertificate.CreatedAt == nil {
			break
		}

		return e.complexity.AppCertificate.CreatedAt(childComplexity), true

	case "AppCertificate.DNSProvider":
		if e.complexity.AppCertificate.DNSProvider == nil {
			break
		}

		return e.complexity.AppCertificate.DNSProvider(childComplexity), true

	case "AppCertificate.dNSValidationHostname":
		if e.complexity.AppCertificate.DNSValidationHostname == nil {
			break
		}

		return e.complexity.AppCertificate.DNSValidationHostname(childComplexity), true

	case "AppCertificate.dNSValidationInstructions":
		if e.complexity.AppCertificate.DNSValidationInstructions == nil {
			break
		}

		return e.complexity.AppCertificate.DNSValidationInstructions(childComplexity), true

	case "AppCertificate.dNSValidationTarget":
		if e.complexity.AppCertificate.DNSValidationTarget == nil {
			break
		}

		return e.complexity.AppCertificate.DNSValidationTarget(childComplexity), true

	case "AppCertificate.hostname":
		if e.complexity.AppCertificate.Hostname == nil {
			break
		}

		return e.complexity.AppCertificate.Hostname(childComplexity), true

	case "AppCertificate.id":
		if e.complexity.AppCertificate.ID == nil {
			break
		}

		return e.complexity.AppCertificate.ID(childComplexity), true

	case "AppCertificate.isApex":
		if e.complexity.AppCertificate.IsApex == nil {
			break
		}

		return e.complexity.AppCertificate.IsApex(childComplexity), true

	case "AppCertificate.isWildcard":
		if e.complexity.AppCertificate.IsWildcard == nil {
			break
		}

		return e.complexity.AppCertificate.IsWildcard(childComplexity), true

	case "AppCertificate.issued":
		if e.complexity.AppCertificate.Issued == nil {
			break
		}

		return e.complexity.AppCertificate.Issued(childComplexity), true

	case "AppCertificate.source":
		if e.complexity.AppCertificate.Source == nil {
			break
		}

		return e.complexity.AppCertificate.Source(childComplexity), true

	case "AppChange.actor":
		if e.complexity.AppChange.Actor == nil {
			break
		}

		return e.complexity.AppChange.Actor(childComplexity), true

	case "AppChange.createdAt":
		if e.complexity.AppChange.CreatedAt == nil {
			break
		}

		return e.complexity.AppChange.CreatedAt(childComplexity), true

	case "AppChange.description":
		if e.complexity.AppChange.Description == nil {
			break
		}

		return e.complexity.AppChange.Description(childComplexity), true

	case "AppChange.id":
		if e.complexity.AppChange.ID == nil {
			break
		}

		return e.complexity.AppChange.ID(childComplexity), true

	case "AppChange.reason":
		if e.complexity.AppChange.Reason == nil {
			break
		}

		return e.complexity.AppChange.Reason(childComplexity), true

	case "AppChange.status":
		if e.complexity.AppChange.Status == nil {
			break
		}

		return e.complexity.AppChange.Status(childComplexity), true

	case "AppChange.updatedAt":
		if e.complexity.AppChange.UpdatedAt == nil {
			break
		}

		return e.complexity.AppChange.UpdatedAt(childComplexity), true

	case "AppChange.user":
		if e.complexity.AppChange.User == nil {
			break
		}

		return e.complexity.AppChange.User(childComplexity), true

	case "AppCompact.appUrl":
		if e.complexity.AppCompact.AppURL == nil {
			break
		}

		return e.complexity.AppCompact.AppURL(childComplexity), true

	case "AppCompact.deployed":
		if e.complexity.AppCompact.Deployed == nil {
			break
		}

		return e.complexity.AppCompact.Deployed(childComplexity), true

	case "AppCompact.hostname":
		if e.complexity.AppCompact.Hostname == nil {
			break
		}

		return e.complexity.AppCompact.Hostname(childComplexity), true

	case "AppCompact.id":
		if e.complexity.AppCompact.ID == nil {
			break
		}

		return e.complexity.AppCompact.ID(childComplexity), true

	case "AppCompact.ipAddresses":
		if e.complexity.AppCompact.IPAddresses == nil {
			break
		}

		return e.complexity.AppCompact.IPAddresses(childComplexity), true

	case "AppCompact.name":
		if e.complexity.AppCompact.Name == nil {
			break
		}

		return e.complexity.AppCompact.Name(childComplexity), true

	case "AppCompact.organization":
		if e.complexity.AppCompact.Organization == nil {
			break
		}

		return e.complexity.AppCompact.Organization(childComplexity), true

	case "AppCompact.release":
		if e.complexity.AppCompact.Release == nil {
			break
		}

		return e.complexity.AppCompact.Release(childComplexity), true

	case "AppCompact.services":
		if e.complexity.AppCompact.Services == nil {
			break
		}

		return e.complexity.AppCompact.Services(childComplexity), true

	case "AppCompact.status":
		if e.complexity.AppCompact.Status == nil {
			break
		}

		return e.complexity.AppCompact.Status(childComplexity), true

	case "AppCompact.version":
		if e.complexity.AppCompact.Version == nil {
			break
		}

		return e.complexity.AppCompact.Version(childComplexity), true

	case "AppConfig.build":
		if e.complexity.AppConfig.Build == nil {
			break
		}

		return e.complexity.AppConfig.Build(childComplexity), true

	case "AppConfig.definition":
		if e.complexity.AppConfig.Definition == nil {
			break
		}

		return e.complexity.AppConfig.Definition(childComplexity), true

	case "AppConfig.errors":
		if e.complexity.AppConfig.Errors == nil {
			break
		}

		return e.complexity.AppConfig.Errors(childComplexity), true

	case "AppConfig.services":
		if e.complexity.AppConfig.Services == nil {
			break
		}

		return e.complexity.AppConfig.Services(childComplexity), true

	case "AppConfig.valid":
		if e.complexity.AppConfig.Valid == nil {
			break
		}

		return e.complexity.AppConfig.Valid(childComplexity), true

	case "AppDeploymentRegion.availableRegions":
		if e.complexity.AppDeploymentRegion.AvailableRegions == nil {
			break
		}

		return e.complexity.AppDeploymentRegion.AvailableRegions(childComplexity), true

	case "AppDeploymentRegion.regions":
		if e.complexity.AppDeploymentRegion.Regions == nil {
			break
		}

		return e.complexity.AppDeploymentRegion.Regions(childComplexity), true

	case "AppInBusinessUnit.appsInBusinessUnit":
		if e.complexity.AppInBusinessUnit.AppsInBusinessUnit == nil {
			break
		}

		return e.complexity.AppInBusinessUnit.AppsInBusinessUnit(childComplexity), true

	case "AppInBusinessUnit.businessUnitId":
		if e.complexity.AppInBusinessUnit.BusinessUnitID == nil {
			break
		}

		return e.complexity.AppInBusinessUnit.BusinessUnitID(childComplexity), true

	case "AppInBusinessUnit.businessUnitName":
		if e.complexity.AppInBusinessUnit.BusinessUnitName == nil {
			break
		}

		return e.complexity.AppInBusinessUnit.BusinessUnitName(childComplexity), true

	case "AppInSubOrg.appsInSubOrgs":
		if e.complexity.AppInSubOrg.AppsInSubOrgs == nil {
			break
		}

		return e.complexity.AppInSubOrg.AppsInSubOrgs(childComplexity), true

	case "AppInSubOrg.subOrgId":
		if e.complexity.AppInSubOrg.SubOrgID == nil {
			break
		}

		return e.complexity.AppInSubOrg.SubOrgID(childComplexity), true

	case "AppInSubOrg.subOrgName":
		if e.complexity.AppInSubOrg.SubOrgName == nil {
			break
		}

		return e.complexity.AppInSubOrg.SubOrgName(childComplexity), true

	case "AppOrgCount.apps":
		if e.complexity.AppOrgCount.Apps == nil {
			break
		}

		return e.complexity.AppOrgCount.Apps(childComplexity), true

	case "AppOrgCount.organization":
		if e.complexity.AppOrgCount.Organization == nil {
			break
		}

		return e.complexity.AppOrgCount.Organization(childComplexity), true

	case "AppStatus.allocations":
		if e.complexity.AppStatus.Allocations == nil {
			break
		}

		return e.complexity.AppStatus.Allocations(childComplexity), true

	case "AppStatus.appURL":
		if e.complexity.AppStatus.AppURL == nil {
			break
		}

		return e.complexity.AppStatus.AppURL(childComplexity), true

	case "AppStatus.deployed":
		if e.complexity.AppStatus.Deployed == nil {
			break
		}

		return e.complexity.AppStatus.Deployed(childComplexity), true

	case "AppStatus.deploymentStatus":
		if e.complexity.AppStatus.DeploymentStatus == nil {
			break
		}

		return e.complexity.AppStatus.DeploymentStatus(childComplexity), true

	case "AppStatus.hostname":
		if e.complexity.AppStatus.Hostname == nil {
			break
		}

		return e.complexity.AppStatus.Hostname(childComplexity), true

	case "AppStatus.id":
		if e.complexity.AppStatus.ID == nil {
			break
		}

		return e.complexity.AppStatus.ID(childComplexity), true

	case "AppStatus.name":
		if e.complexity.AppStatus.Name == nil {
			break
		}

		return e.complexity.AppStatus.Name(childComplexity), true

	case "AppStatus.organization":
		if e.complexity.AppStatus.Organization == nil {
			break
		}

		return e.complexity.AppStatus.Organization(childComplexity), true

	case "AppStatus.status":
		if e.complexity.AppStatus.Status == nil {
			break
		}

		return e.complexity.AppStatus.Status(childComplexity), true

	case "AppStatus.version":
		if e.complexity.AppStatus.Version == nil {
			break
		}

		return e.complexity.AppStatus.Version(childComplexity), true

	case "Apps.nodes":
		if e.complexity.Apps.Nodes == nil {
			break
		}

		return e.complexity.Apps.Nodes(childComplexity), true

	case "AppsAndOrgsAndSubOrgCountDetails.orgByAppCount":
		if e.complexity.AppsAndOrgsAndSubOrgCountDetails.OrgByAppCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsAndSubOrgCountDetails.OrgByAppCount(childComplexity), true

	case "AppsAndOrgsAndSubOrgCountDetails.region":
		if e.complexity.AppsAndOrgsAndSubOrgCountDetails.Region == nil {
			break
		}

		return e.complexity.AppsAndOrgsAndSubOrgCountDetails.Region(childComplexity), true

	case "AppsAndOrgsAndSubOrgCountDetails.totalAppCount":
		if e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalAppCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalAppCount(childComplexity), true

	case "AppsAndOrgsAndSubOrgCountDetails.totalBusinessUnitCount":
		if e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalBusinessUnitCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalBusinessUnitCount(childComplexity), true

	case "AppsAndOrgsAndSubOrgCountDetails.totalOrgCount":
		if e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalOrgCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalOrgCount(childComplexity), true

	case "AppsAndOrgsAndSubOrgCountDetails.totalSubOrgCount":
		if e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalSubOrgCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsAndSubOrgCountDetails.TotalSubOrgCount(childComplexity), true

	case "AppsAndOrgsCountDetails.orgByAppCount":
		if e.complexity.AppsAndOrgsCountDetails.OrgByAppCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsCountDetails.OrgByAppCount(childComplexity), true

	case "AppsAndOrgsCountDetails.region":
		if e.complexity.AppsAndOrgsCountDetails.Region == nil {
			break
		}

		return e.complexity.AppsAndOrgsCountDetails.Region(childComplexity), true

	case "AppsAndOrgsCountDetails.totalAppCount":
		if e.complexity.AppsAndOrgsCountDetails.TotalAppCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsCountDetails.TotalAppCount(childComplexity), true

	case "AppsAndOrgsCountDetails.totalOrgCount":
		if e.complexity.AppsAndOrgsCountDetails.TotalOrgCount == nil {
			break
		}

		return e.complexity.AppsAndOrgsCountDetails.TotalOrgCount(childComplexity), true

	case "AppsCountbyBusinessUnit.activeApp":
		if e.complexity.AppsCountbyBusinessUnit.ActiveApp == nil {
			break
		}

		return e.complexity.AppsCountbyBusinessUnit.ActiveApp(childComplexity), true

	case "AppsCountbyBusinessUnit.appsCount":
		if e.complexity.AppsCountbyBusinessUnit.AppsCount == nil {
			break
		}

		return e.complexity.AppsCountbyBusinessUnit.AppsCount(childComplexity), true

	case "AppsCountbyBusinessUnit.inActiveApp":
		if e.complexity.AppsCountbyBusinessUnit.InActiveApp == nil {
			break
		}

		return e.complexity.AppsCountbyBusinessUnit.InActiveApp(childComplexity), true

	case "AppsCountbyBusinessUnit.newApp":
		if e.complexity.AppsCountbyBusinessUnit.NewApp == nil {
			break
		}

		return e.complexity.AppsCountbyBusinessUnit.NewApp(childComplexity), true

	case "AppsOrgsCount.activeApp":
		if e.complexity.AppsOrgsCount.ActiveApp == nil {
			break
		}

		return e.complexity.AppsOrgsCount.ActiveApp(childComplexity), true

	case "AppsOrgsCount.appsCount":
		if e.complexity.AppsOrgsCount.AppsCount == nil {
			break
		}

		return e.complexity.AppsOrgsCount.AppsCount(childComplexity), true

	case "AppsOrgsCount.inActiveApp":
		if e.complexity.AppsOrgsCount.InActiveApp == nil {
			break
		}

		return e.complexity.AppsOrgsCount.InActiveApp(childComplexity), true

	case "AppsOrgsCount.newApp":
		if e.complexity.AppsOrgsCount.NewApp == nil {
			break
		}

		return e.complexity.AppsOrgsCount.NewApp(childComplexity), true

	case "AppsOrgsCount.organization":
		if e.complexity.AppsOrgsCount.Organization == nil {
			break
		}

		return e.complexity.AppsOrgsCount.Organization(childComplexity), true

	case "AppsOrgsSubCount.activeApp":
		if e.complexity.AppsOrgsSubCount.ActiveApp == nil {
			break
		}

		return e.complexity.AppsOrgsSubCount.ActiveApp(childComplexity), true

	case "AppsOrgsSubCount.appsCount":
		if e.complexity.AppsOrgsSubCount.AppsCount == nil {
			break
		}

		return e.complexity.AppsOrgsSubCount.AppsCount(childComplexity), true

	case "AppsOrgsSubCount.inActiveApp":
		if e.complexity.AppsOrgsSubCount.InActiveApp == nil {
			break
		}

		return e.complexity.AppsOrgsSubCount.InActiveApp(childComplexity), true

	case "AppsOrgsSubCount.newApp":
		if e.complexity.AppsOrgsSubCount.NewApp == nil {
			break
		}

		return e.complexity.AppsOrgsSubCount.NewApp(childComplexity), true

	case "AppsOrgsSubCount.organization":
		if e.complexity.AppsOrgsSubCount.Organization == nil {
			break
		}

		return e.complexity.AppsOrgsSubCount.Organization(childComplexity), true

	case "AppsOrgsSubCount.subOrganization":
		if e.complexity.AppsOrgsSubCount.SubOrganization == nil {
			break
		}

		return e.complexity.AppsOrgsSubCount.SubOrganization(childComplexity), true

	case "AttachPayment.city":
		if e.complexity.AttachPayment.City == nil {
			break
		}

		return e.complexity.AttachPayment.City(childComplexity), true

	case "AttachPayment.country":
		if e.complexity.AttachPayment.Country == nil {
			break
		}

		return e.complexity.AttachPayment.Country(childComplexity), true

	case "AttachPayment.customerId":
		if e.complexity.AttachPayment.CustomerID == nil {
			break
		}

		return e.complexity.AttachPayment.CustomerID(childComplexity), true

	case "AttachPayment.email":
		if e.complexity.AttachPayment.Email == nil {
			break
		}

		return e.complexity.AttachPayment.Email(childComplexity), true

	case "AttachPayment.id":
		if e.complexity.AttachPayment.ID == nil {
			break
		}

		return e.complexity.AttachPayment.ID(childComplexity), true

	case "AttachPayment.name":
		if e.complexity.AttachPayment.Name == nil {
			break
		}

		return e.complexity.AttachPayment.Name(childComplexity), true

	case "AttachPayment.paymentMethodId":
		if e.complexity.AttachPayment.PaymentMethodID == nil {
			break
		}

		return e.complexity.AttachPayment.PaymentMethodID(childComplexity), true

	case "AttachPayment.state":
		if e.complexity.AttachPayment.State == nil {
			break
		}

		return e.complexity.AttachPayment.State(childComplexity), true

	case "AttachPayment.type":
		if e.complexity.AttachPayment.Type == nil {
			break
		}

		return e.complexity.AttachPayment.Type(childComplexity), true

	case "AutoscalingConfig.balanceRegions":
		if e.complexity.AutoscalingConfig.BalanceRegions == nil {
			break
		}

		return e.complexity.AutoscalingConfig.BalanceRegions(childComplexity), true

	case "AutoscalingConfig.enabled":
		if e.complexity.AutoscalingConfig.Enabled == nil {
			break
		}

		return e.complexity.AutoscalingConfig.Enabled(childComplexity), true

	case "AutoscalingConfig.maxCount":
		if e.complexity.AutoscalingConfig.MaxCount == nil {
			break
		}

		return e.complexity.AutoscalingConfig.MaxCount(childComplexity), true

	case "AutoscalingConfig.minCount":
		if e.complexity.AutoscalingConfig.MinCount == nil {
			break
		}

		return e.complexity.AutoscalingConfig.MinCount(childComplexity), true

	case "AutoscalingConfig.regions":
		if e.complexity.AutoscalingConfig.Regions == nil {
			break
		}

		return e.complexity.AutoscalingConfig.Regions(childComplexity), true

	case "AutoscalingRegionConfig.code":
		if e.complexity.AutoscalingRegionConfig.Code == nil {
			break
		}

		return e.complexity.AutoscalingRegionConfig.Code(childComplexity), true

	case "AutoscalingRegionConfig.minCount":
		if e.complexity.AutoscalingRegionConfig.MinCount == nil {
			break
		}

		return e.complexity.AutoscalingRegionConfig.MinCount(childComplexity), true

	case "AutoscalingRegionConfig.weight":
		if e.complexity.AutoscalingRegionConfig.Weight == nil {
			break
		}

		return e.complexity.AutoscalingRegionConfig.Weight(childComplexity), true

	case "Build.createdAt":
		if e.complexity.Build.CreatedAt == nil {
			break
		}

		return e.complexity.Build.CreatedAt(childComplexity), true

	case "Build.id":
		if e.complexity.Build.ID == nil {
			break
		}

		return e.complexity.Build.ID(childComplexity), true

	case "Build.image":
		if e.complexity.Build.Image == nil {
			break
		}

		return e.complexity.Build.Image(childComplexity), true

	case "Build.inProgress":
		if e.complexity.Build.InProgress == nil {
			break
		}

		return e.complexity.Build.InProgress(childComplexity), true

	case "Build.logs":
		if e.complexity.Build.Logs == nil {
			break
		}

		return e.complexity.Build.Logs(childComplexity), true

	case "Build.status":
		if e.complexity.Build.Status == nil {
			break
		}

		return e.complexity.Build.Status(childComplexity), true

	case "Build.updatedAt":
		if e.complexity.Build.UpdatedAt == nil {
			break
		}

		return e.complexity.Build.UpdatedAt(childComplexity), true

	case "Build.user":
		if e.complexity.Build.User == nil {
			break
		}

		return e.complexity.Build.User(childComplexity), true

	case "BuildArgsInput.name":
		if e.complexity.BuildArgsInput.Name == nil {
			break
		}

		return e.complexity.BuildArgsInput.Name(childComplexity), true

	case "BuildArgsInput.value":
		if e.complexity.BuildArgsInput.Value == nil {
			break
		}

		return e.complexity.BuildArgsInput.Value(childComplexity), true

	case "Builder.builder":
		if e.complexity.Builder.Builder == nil {
			break
		}

		return e.complexity.Builder.Builder(childComplexity), true

	case "Builder.builtin":
		if e.complexity.Builder.Builtin == nil {
			break
		}

		return e.complexity.Builder.Builtin(childComplexity), true

	case "Builder.image":
		if e.complexity.Builder.Image == nil {
			break
		}

		return e.complexity.Builder.Image(childComplexity), true

	case "Builds.nodes":
		if e.complexity.Builds.Nodes == nil {
			break
		}

		return e.complexity.Builds.Nodes(childComplexity), true

	case "BusinessUnitCount.appsCount":
		if e.complexity.BusinessUnitCount.AppsCount == nil {
			break
		}

		return e.complexity.BusinessUnitCount.AppsCount(childComplexity), true

	case "BusinessUnitCount.businessUnitCount":
		if e.complexity.BusinessUnitCount.BusinessUnitCount == nil {
			break
		}

		return e.complexity.BusinessUnitCount.BusinessUnitCount(childComplexity), true

	case "Certificates.nodes":
		if e.complexity.Certificates.Nodes == nil {
			break
		}

		return e.complexity.Certificates.Nodes(childComplexity), true

	case "Chages.nodes":
		if e.complexity.Chages.Nodes == nil {
			break
		}

		return e.complexity.Chages.Nodes(childComplexity), true

	case "Changes.nodes":
		if e.complexity.Changes.Nodes == nil {
			break
		}

		return e.complexity.Changes.Nodes(childComplexity), true

	case "Check.httpHeaders":
		if e.complexity.Check.HTTPHeaders == nil {
			break
		}

		return e.complexity.Check.HTTPHeaders(childComplexity), true

	case "Check.httpMethod":
		if e.complexity.Check.HTTPMethod == nil {
			break
		}

		return e.complexity.Check.HTTPMethod(childComplexity), true

	case "Check.httpPath":
		if e.complexity.Check.HTTPPath == nil {
			break
		}

		return e.complexity.Check.HTTPPath(childComplexity), true

	case "Check.httpProtocol":
		if e.complexity.Check.HTTPProtocol == nil {
			break
		}

		return e.complexity.Check.HTTPProtocol(childComplexity), true

	case "Check.httpSkipTLSVerify":
		if e.complexity.Check.HTTPSkipTLSVerify == nil {
			break
		}

		return e.complexity.Check.HTTPSkipTLSVerify(childComplexity), true

	case "Check.interval":
		if e.complexity.Check.Interval == nil {
			break
		}

		return e.complexity.Check.Interval(childComplexity), true

	case "Check.timeout":
		if e.complexity.Check.Timeout == nil {
			break
		}

		return e.complexity.Check.Timeout(childComplexity), true

	case "Check.type":
		if e.complexity.Check.Type == nil {
			break
		}

		return e.complexity.Check.Type(childComplexity), true

	case "CheckState.name":
		if e.complexity.CheckState.Name == nil {
			break
		}

		return e.complexity.CheckState.Name(childComplexity), true

	case "CheckState.output":
		if e.complexity.CheckState.Output == nil {
			break
		}

		return e.complexity.CheckState.Output(childComplexity), true

	case "CheckState.serviceName":
		if e.complexity.CheckState.ServiceName == nil {
			break
		}

		return e.complexity.CheckState.ServiceName(childComplexity), true

	case "CheckState.status":
		if e.complexity.CheckState.Status == nil {
			break
		}

		return e.complexity.CheckState.Status(childComplexity), true

	case "CloudRegions.code":
		if e.complexity.CloudRegions.Code == nil {
			break
		}

		return e.complexity.CloudRegions.Code(childComplexity), true

	case "CloudRegions.name":
		if e.complexity.CloudRegions.Name == nil {
			break
		}

		return e.complexity.CloudRegions.Name(childComplexity), true

	case "CloudRegions.type":
		if e.complexity.CloudRegions.Type == nil {
			break
		}

		return e.complexity.CloudRegions.Type(childComplexity), true

	case "ClusterDetail.allocationTag":
		if e.complexity.ClusterDetail.AllocationTag == nil {
			break
		}

		return e.complexity.ClusterDetail.AllocationTag(childComplexity), true

	case "ClusterDetail.cloudType":
		if e.complexity.ClusterDetail.CloudType == nil {
			break
		}

		return e.complexity.ClusterDetail.CloudType(childComplexity), true

	case "ClusterDetail.cluster_config_path":
		if e.complexity.ClusterDetail.ClusterConfigPath == nil {
			break
		}

		return e.complexity.ClusterDetail.ClusterConfigPath(childComplexity), true

	case "ClusterDetail.clusterType":
		if e.complexity.ClusterDetail.ClusterType == nil {
			break
		}

		return e.complexity.ClusterDetail.ClusterType(childComplexity), true

	case "ClusterDetail.ebl_enabled":
		if e.complexity.ClusterDetail.EblEnabled == nil {
			break
		}

		return e.complexity.ClusterDetail.EblEnabled(childComplexity), true

	case "ClusterDetail.externalAgentPlatform":
		if e.complexity.ClusterDetail.ExternalAgentPlatform == nil {
			break
		}

		return e.complexity.ClusterDetail.ExternalAgentPlatform(childComplexity), true

	case "ClusterDetail.externalBaseAddress":
		if e.complexity.ClusterDetail.ExternalBaseAddress == nil {
			break
		}

		return e.complexity.ClusterDetail.ExternalBaseAddress(childComplexity), true

	case "ClusterDetail.externalCloudType":
		if e.complexity.ClusterDetail.ExternalCloudType == nil {
			break
		}

		return e.complexity.ClusterDetail.ExternalCloudType(childComplexity), true

	case "ClusterDetail.externalLBType":
		if e.complexity.ClusterDetail.ExternalLBType == nil {
			break
		}

		return e.complexity.ClusterDetail.ExternalLBType(childComplexity), true

	case "ClusterDetail.interface":
		if e.complexity.ClusterDetail.Interface == nil {
			break
		}

		return e.complexity.ClusterDetail.Interface(childComplexity), true

	case "ClusterDetail.isDefault":
		if e.complexity.ClusterDetail.IsDefault == nil {
			break
		}

		return e.complexity.ClusterDetail.IsDefault(childComplexity), true

	case "ClusterDetail.port":
		if e.complexity.ClusterDetail.Port == nil {
			break
		}

		return e.complexity.ClusterDetail.Port(childComplexity), true

	case "ClusterDetail.providerType":
		if e.complexity.ClusterDetail.ProviderType == nil {
			break
		}

		return e.complexity.ClusterDetail.ProviderType(childComplexity), true

	case "ClusterDetail.region_code":
		if e.complexity.ClusterDetail.RegionCode == nil {
			break
		}

		return e.complexity.ClusterDetail.RegionCode(childComplexity), true

	case "ClusterDetail.regionName":
		if e.complexity.ClusterDetail.RegionName == nil {
			break
		}

		return e.complexity.ClusterDetail.RegionName(childComplexity), true

	case "ClusterDetail.route53CountryCode":
		if e.complexity.ClusterDetail.Route53CountryCode == nil {
			break
		}

		return e.complexity.ClusterDetail.Route53CountryCode(childComplexity), true

	case "ClusterDetail.tenantId":
		if e.complexity.ClusterDetail.TenantID == nil {
			break
		}

		return e.complexity.ClusterDetail.TenantID(childComplexity), true

	case "ClusterDetails.allocationTag":
		if e.complexity.ClusterDetails.AllocationTag == nil {
			break
		}

		return e.complexity.ClusterDetails.AllocationTag(childComplexity), true

	case "ClusterDetails.clusterConfigPath":
		if e.complexity.ClusterDetails.ClusterConfigPath == nil {
			break
		}

		return e.complexity.ClusterDetails.ClusterConfigPath(childComplexity), true

	case "ClusterDetails.clusterConfigUrl":
		if e.complexity.ClusterDetails.ClusterConfigURL == nil {
			break
		}

		return e.complexity.ClusterDetails.ClusterConfigURL(childComplexity), true

	case "ClusterDetails.clusterType":
		if e.complexity.ClusterDetails.ClusterType == nil {
			break
		}

		return e.complexity.ClusterDetails.ClusterType(childComplexity), true

	case "ClusterDetails.eblEnabled":
		if e.complexity.ClusterDetails.EblEnabled == nil {
			break
		}

		return e.complexity.ClusterDetails.EblEnabled(childComplexity), true

	case "ClusterDetails.externalAgentPlatForm":
		if e.complexity.ClusterDetails.ExternalAgentPlatForm == nil {
			break
		}

		return e.complexity.ClusterDetails.ExternalAgentPlatForm(childComplexity), true

	case "ClusterDetails.externalBaseAddress":
		if e.complexity.ClusterDetails.ExternalBaseAddress == nil {
			break
		}

		return e.complexity.ClusterDetails.ExternalBaseAddress(childComplexity), true

	case "ClusterDetails.externalCloudType":
		if e.complexity.ClusterDetails.ExternalCloudType == nil {
			break
		}

		return e.complexity.ClusterDetails.ExternalCloudType(childComplexity), true

	case "ClusterDetails.externalLBType":
		if e.complexity.ClusterDetails.ExternalLBType == nil {
			break
		}

		return e.complexity.ClusterDetails.ExternalLBType(childComplexity), true

	case "ClusterDetails.id":
		if e.complexity.ClusterDetails.ID == nil {
			break
		}

		return e.complexity.ClusterDetails.ID(childComplexity), true

	case "ClusterDetails.interfaceType":
		if e.complexity.ClusterDetails.InterfaceType == nil {
			break
		}

		return e.complexity.ClusterDetails.InterfaceType(childComplexity), true

	case "ClusterDetails.isDefault":
		if e.complexity.ClusterDetails.IsDefault == nil {
			break
		}

		return e.complexity.ClusterDetails.IsDefault(childComplexity), true

	case "ClusterDetails.loadBalancerURL":
		if e.complexity.ClusterDetails.LoadBalancerURL == nil {
			break
		}

		return e.complexity.ClusterDetails.LoadBalancerURL(childComplexity), true

	case "ClusterDetails.port":
		if e.complexity.ClusterDetails.Port == nil {
			break
		}

		return e.complexity.ClusterDetails.Port(childComplexity), true

	case "ClusterDetails.providerType":
		if e.complexity.ClusterDetails.ProviderType == nil {
			break
		}

		return e.complexity.ClusterDetails.ProviderType(childComplexity), true

	case "ClusterDetails.regionCode":
		if e.complexity.ClusterDetails.RegionCode == nil {
			break
		}

		return e.complexity.ClusterDetails.RegionCode(childComplexity), true

	case "ClusterDetails.regionName":
		if e.complexity.ClusterDetails.RegionName == nil {
			break
		}

		return e.complexity.ClusterDetails.RegionName(childComplexity), true

	case "ClusterDetails.route53countryCode":
		if e.complexity.ClusterDetails.Route53countryCode == nil {
			break
		}

		return e.complexity.ClusterDetails.Route53countryCode(childComplexity), true

	case "ClusterDetails.tenantId":
		if e.complexity.ClusterDetails.TenantID == nil {
			break
		}

		return e.complexity.ClusterDetails.TenantID(childComplexity), true

	case "ClusterInfo.clusterConfigPath":
		if e.complexity.ClusterInfo.ClusterConfigPath == nil {
			break
		}

		return e.complexity.ClusterInfo.ClusterConfigPath(childComplexity), true

	case "ClusterInfo.clustertype":
		if e.complexity.ClusterInfo.Clustertype == nil {
			break
		}

		return e.complexity.ClusterInfo.Clustertype(childComplexity), true

	case "ClusterInfo.id":
		if e.complexity.ClusterInfo.ID == nil {
			break
		}

		return e.complexity.ClusterInfo.ID(childComplexity), true

	case "ClusterInfo.ipAddress":
		if e.complexity.ClusterInfo.IPAddress == nil {
			break
		}

		return e.complexity.ClusterInfo.IPAddress(childComplexity), true

	case "ClusterInfo.isLatency":
		if e.complexity.ClusterInfo.IsLatency == nil {
			break
		}

		return e.complexity.ClusterInfo.IsLatency(childComplexity), true

	case "ClusterInfo.latitude":
		if e.complexity.ClusterInfo.Latitude == nil {
			break
		}

		return e.complexity.ClusterInfo.Latitude(childComplexity), true

	case "ClusterInfo.loadBalancerURL":
		if e.complexity.ClusterInfo.LoadBalancerURL == nil {
			break
		}

		return e.complexity.ClusterInfo.LoadBalancerURL(childComplexity), true

	case "ClusterInfo.longitude":
		if e.complexity.ClusterInfo.Longitude == nil {
			break
		}

		return e.complexity.ClusterInfo.Longitude(childComplexity), true

	case "ClusterInfo.name":
		if e.complexity.ClusterInfo.Name == nil {
			break
		}

		return e.complexity.ClusterInfo.Name(childComplexity), true

	case "ClusterInfo.regionCode":
		if e.complexity.ClusterInfo.RegionCode == nil {
			break
		}

		return e.complexity.ClusterInfo.RegionCode(childComplexity), true

	case "ClusterNodes.nodes":
		if e.complexity.ClusterNodes.Nodes == nil {
			break
		}

		return e.complexity.ClusterNodes.Nodes(childComplexity), true

	case "Config.domain_mapping":
		if e.complexity.Config.DomainMapping == nil {
			break
		}

		return e.complexity.Config.DomainMapping(childComplexity), true

	case "Config.registry":
		if e.complexity.Config.Registry == nil {
			break
		}

		return e.complexity.Config.Registry(childComplexity), true

	case "ConfigAppTemplates.cpuLimit":
		if e.complexity.ConfigAppTemplates.CPULimit == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.CPULimit(childComplexity), true

	case "ConfigAppTemplates.cpuRequests":
		if e.complexity.ConfigAppTemplates.CPURequests == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.CPURequests(childComplexity), true

	case "ConfigAppTemplates.config":
		if e.complexity.ConfigAppTemplates.Config == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.Config(childComplexity), true

	case "ConfigAppTemplates.createdAt":
		if e.complexity.ConfigAppTemplates.CreatedAt == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.CreatedAt(childComplexity), true

	case "ConfigAppTemplates.createdBy":
		if e.complexity.ConfigAppTemplates.CreatedBy == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.CreatedBy(childComplexity), true

	case "ConfigAppTemplates.envArgs":
		if e.complexity.ConfigAppTemplates.EnvArgs == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.EnvArgs(childComplexity), true

	case "ConfigAppTemplates.id":
		if e.complexity.ConfigAppTemplates.ID == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.ID(childComplexity), true

	case "ConfigAppTemplates.isActive":
		if e.complexity.ConfigAppTemplates.IsActive == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.IsActive(childComplexity), true

	case "ConfigAppTemplates.memoryLimit":
		if e.complexity.ConfigAppTemplates.MemoryLimit == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.MemoryLimit(childComplexity), true

	case "ConfigAppTemplates.memoryRequests":
		if e.complexity.ConfigAppTemplates.MemoryRequests == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.MemoryRequests(childComplexity), true

	case "ConfigAppTemplates.name":
		if e.complexity.ConfigAppTemplates.Name == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.Name(childComplexity), true

	case "ConfigAppTemplates.routingPolicy":
		if e.complexity.ConfigAppTemplates.RoutingPolicy == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.RoutingPolicy(childComplexity), true

	case "ConfigAppTemplates.volumeSize":
		if e.complexity.ConfigAppTemplates.VolumeSize == nil {
			break
		}

		return e.complexity.ConfigAppTemplates.VolumeSize(childComplexity), true

	case "CreateOrganization.organization":
		if e.complexity.CreateOrganization.Organization == nil {
			break
		}

		return e.complexity.CreateOrganization.Organization(childComplexity), true

	case "CurrentUserEmail.email":
		if e.complexity.CurrentUserEmail.Email == nil {
			break
		}

		return e.complexity.CurrentUserEmail.Email(childComplexity), true

	case "CurrentUserEmail.firstName":
		if e.complexity.CurrentUserEmail.FirstName == nil {
			break
		}

		return e.complexity.CurrentUserEmail.FirstName(childComplexity), true

	case "CurrentUserEmail.lastName":
		if e.complexity.CurrentUserEmail.LastName == nil {
			break
		}

		return e.complexity.CurrentUserEmail.LastName(childComplexity), true

	case "DNSRecord.createdAt":
		if e.complexity.DNSRecord.CreatedAt == nil {
			break
		}

		return e.complexity.DNSRecord.CreatedAt(childComplexity), true

	case "DNSRecord.FQDN":
		if e.complexity.DNSRecord.Fqdn == nil {
			break
		}

		return e.complexity.DNSRecord.Fqdn(childComplexity), true

	case "DNSRecord.id":
		if e.complexity.DNSRecord.ID == nil {
			break
		}

		return e.complexity.DNSRecord.ID(childComplexity), true

	case "DNSRecord.isApex":
		if e.complexity.DNSRecord.IsApex == nil {
			break
		}

		return e.complexity.DNSRecord.IsApex(childComplexity), true

	case "DNSRecord.isSystem":
		if e.complexity.DNSRecord.IsSystem == nil {
			break
		}

		return e.complexity.DNSRecord.IsSystem(childComplexity), true

	case "DNSRecord.isWildcard":
		if e.complexity.DNSRecord.IsWildcard == nil {
			break
		}

		return e.complexity.DNSRecord.IsWildcard(childComplexity), true

	case "DNSRecord.name":
		if e.complexity.DNSRecord.Name == nil {
			break
		}

		return e.complexity.DNSRecord.Name(childComplexity), true

	case "DNSRecord.rData":
		if e.complexity.DNSRecord.RData == nil {
			break
		}

		return e.complexity.DNSRecord.RData(childComplexity), true

	case "DNSRecord.TTL":
		if e.complexity.DNSRecord.TTL == nil {
			break
		}

		return e.complexity.DNSRecord.TTL(childComplexity), true

	case "DNSRecord.type":
		if e.complexity.DNSRecord.Type == nil {
			break
		}

		return e.complexity.DNSRecord.Type(childComplexity), true

	case "DNSRecord.updatedAt":
		if e.complexity.DNSRecord.UpdatedAt == nil {
			break
		}

		return e.complexity.DNSRecord.UpdatedAt(childComplexity), true

	case "DeleteOrganization.deletedOrganizationId":
		if e.complexity.DeleteOrganization.DeletedOrganizationID == nil {
			break
		}

		return e.complexity.DeleteOrganization.DeletedOrganizationID(childComplexity), true

	case "DeleteSubOrganization.deletedSubOrganizationId":
		if e.complexity.DeleteSubOrganization.DeletedSubOrganizationID == nil {
			break
		}

		return e.complexity.DeleteSubOrganization.DeletedSubOrganizationID(childComplexity), true

	case "DeployImage.release":
		if e.complexity.DeployImage.Release == nil {
			break
		}

		return e.complexity.DeployImage.Release(childComplexity), true

	case "DeployOutput.containerId":
		if e.complexity.DeployOutput.ContainerID == nil {
			break
		}

		return e.complexity.DeployOutput.ContainerID(childComplexity), true

	case "DeployOutput.deploymentName":
		if e.complexity.DeployOutput.DeploymentName == nil {
			break
		}

		return e.complexity.DeployOutput.DeploymentName(childComplexity), true

	case "DeployOutput.existDeployment":
		if e.complexity.DeployOutput.ExistDeployment == nil {
			break
		}

		return e.complexity.DeployOutput.ExistDeployment(childComplexity), true

	case "DeployOutput.hostName":
		if e.complexity.DeployOutput.HostName == nil {
			break
		}

		return e.complexity.DeployOutput.HostName(childComplexity), true

	case "DeployOutput.Id":
		if e.complexity.DeployOutput.ID == nil {
			break
		}

		return e.complexity.DeployOutput.ID(childComplexity), true

	case "DeployOutput.loadBalanceURL":
		if e.complexity.DeployOutput.LoadBalanceURL == nil {
			break
		}

		return e.complexity.DeployOutput.LoadBalanceURL(childComplexity), true

	case "DeployOutput.releaseId":
		if e.complexity.DeployOutput.ReleaseID == nil {
			break
		}

		return e.complexity.DeployOutput.ReleaseID(childComplexity), true

	case "DeployOutput.serviceName":
		if e.complexity.DeployOutput.ServiceName == nil {
			break
		}

		return e.complexity.DeployOutput.ServiceName(childComplexity), true

	case "DeployOutput.url":
		if e.complexity.DeployOutput.URL == nil {
			break
		}

		return e.complexity.DeployOutput.URL(childComplexity), true

	case "DeploymentCountByDate.date":
		if e.complexity.DeploymentCountByDate.Date == nil {
			break
		}

		return e.complexity.DeploymentCountByDate.Date(childComplexity), true

	case "DeploymentCountByDate.deployed":
		if e.complexity.DeploymentCountByDate.Deployed == nil {
			break
		}

		return e.complexity.DeploymentCountByDate.Deployed(childComplexity), true

	case "DeploymentStatus.allocations":
		if e.complexity.DeploymentStatus.Allocations == nil {
			break
		}

		return e.complexity.DeploymentStatus.Allocations(childComplexity), true

	case "DeploymentStatus.createdAt":
		if e.complexity.DeploymentStatus.CreatedAt == nil {
			break
		}

		return e.complexity.DeploymentStatus.CreatedAt(childComplexity), true

	case "DeploymentStatus.description":
		if e.complexity.DeploymentStatus.Description == nil {
			break
		}

		return e.complexity.DeploymentStatus.Description(childComplexity), true

	case "DeploymentStatus.desiredCount":
		if e.complexity.DeploymentStatus.DesiredCount == nil {
			break
		}

		return e.complexity.DeploymentStatus.DesiredCount(childComplexity), true

	case "DeploymentStatus.healthyCount":
		if e.complexity.DeploymentStatus.HealthyCount == nil {
			break
		}

		return e.complexity.DeploymentStatus.HealthyCount(childComplexity), true

	case "DeploymentStatus.id":
		if e.complexity.DeploymentStatus.ID == nil {
			break
		}

		return e.complexity.DeploymentStatus.ID(childComplexity), true

	case "DeploymentStatus.inProgress":
		if e.complexity.DeploymentStatus.InProgress == nil {
			break
		}

		return e.complexity.DeploymentStatus.InProgress(childComplexity), true

	case "DeploymentStatus.placedCount":
		if e.complexity.DeploymentStatus.PlacedCount == nil {
			break
		}

		return e.complexity.DeploymentStatus.PlacedCount(childComplexity), true

	case "DeploymentStatus.status":
		if e.complexity.DeploymentStatus.Status == nil {
			break
		}

		return e.complexity.DeploymentStatus.Status(childComplexity), true

	case "DeploymentStatus.successful":
		if e.complexity.DeploymentStatus.Successful == nil {
			break
		}

		return e.complexity.DeploymentStatus.Successful(childComplexity), true

	case "DeploymentStatus.unhealthyCount":
		if e.complexity.DeploymentStatus.UnhealthyCount == nil {
			break
		}

		return e.complexity.DeploymentStatus.UnhealthyCount(childComplexity), true

	case "DeploymentStatus.version":
		if e.complexity.DeploymentStatus.Version == nil {
			break
		}

		return e.complexity.DeploymentStatus.Version(childComplexity), true

	case "DnsRecords.nodes":
		if e.complexity.DNSRecords.Nodes == nil {
			break
		}

		return e.complexity.DNSRecords.Nodes(childComplexity), true

	case "Domain.autoRenew":
		if e.complexity.Domain.AutoRenew == nil {
			break
		}

		return e.complexity.Domain.AutoRenew(childComplexity), true

	case "Domain.createdAt":
		if e.complexity.Domain.CreatedAt == nil {
			break
		}

		return e.complexity.Domain.CreatedAt(childComplexity), true

	case "Domain.dnsRecords":
		if e.complexity.Domain.DNSRecords == nil {
			break
		}

		return e.complexity.Domain.DNSRecords(childComplexity), true

	case "Domain.dnsStatus":
		if e.complexity.Domain.DNSStatus == nil {
			break
		}

		return e.complexity.Domain.DNSStatus(childComplexity), true

	case "Domain.delegatedNameservers":
		if e.complexity.Domain.DelegatedNameservers == nil {
			break
		}

		return e.complexity.Domain.DelegatedNameservers(childComplexity), true

	case "Domain.expireAt":
		if e.complexity.Domain.ExpireAt == nil {
			break
		}

		return e.complexity.Domain.ExpireAt(childComplexity), true

	case "Domain.id":
		if e.complexity.Domain.ID == nil {
			break
		}

		return e.complexity.Domain.ID(childComplexity), true

	case "Domain.name":
		if e.complexity.Domain.Name == nil {
			break
		}

		return e.complexity.Domain.Name(childComplexity), true

	case "Domain.organization":
		if e.complexity.Domain.Organization == nil {
			break
		}

		return e.complexity.Domain.Organization(childComplexity), true

	case "Domain.registrationStatus":
		if e.complexity.Domain.RegistrationStatus == nil {
			break
		}

		return e.complexity.Domain.RegistrationStatus(childComplexity), true

	case "Domain.zoneNameservers":
		if e.complexity.Domain.ZoneNameservers == nil {
			break
		}

		return e.complexity.Domain.ZoneNameservers(childComplexity), true

	case "DomainMapping.domain_name":
		if e.complexity.DomainMapping.DomainName == nil {
			break
		}

		return e.complexity.DomainMapping.DomainName(childComplexity), true

	case "DomainMapping.ip_address":
		if e.complexity.DomainMapping.IPAddress == nil {
			break
		}

		return e.complexity.DomainMapping.IPAddress(childComplexity), true

	case "DomainMapping.kube_config_path":
		if e.complexity.DomainMapping.KubeConfigPath == nil {
			break
		}

		return e.complexity.DomainMapping.KubeConfigPath(childComplexity), true

	case "DomainMapping.node_name":
		if e.complexity.DomainMapping.NodeName == nil {
			break
		}

		return e.complexity.DomainMapping.NodeName(childComplexity), true

	case "Domains.edges":
		if e.complexity.Domains.Edges == nil {
			break
		}

		return e.complexity.Domains.Edges(childComplexity), true

	case "Domains.nodes":
		if e.complexity.Domains.Nodes == nil {
			break
		}

		return e.complexity.Domains.Nodes(childComplexity), true

	case "DuploDeployOutput.createdAt":
		if e.complexity.DuploDeployOutput.CreatedAt == nil {
			break
		}

		return e.complexity.DuploDeployOutput.CreatedAt(childComplexity), true

	case "DuploDeployOutput.id":
		if e.complexity.DuploDeployOutput.ID == nil {
			break
		}

		return e.complexity.DuploDeployOutput.ID(childComplexity), true

	case "DuploDeployOutput.info":
		if e.complexity.DuploDeployOutput.Info == nil {
			break
		}

		return e.complexity.DuploDeployOutput.Info(childComplexity), true

	case "DuploDeployOutput.pollCount":
		if e.complexity.DuploDeployOutput.PollCount == nil {
			break
		}

		return e.complexity.DuploDeployOutput.PollCount(childComplexity), true

	case "DuploDeployOutput.progress":
		if e.complexity.DuploDeployOutput.Progress == nil {
			break
		}

		return e.complexity.DuploDeployOutput.Progress(childComplexity), true

	case "DuploDeployOutput.status":
		if e.complexity.DuploDeployOutput.Status == nil {
			break
		}

		return e.complexity.DuploDeployOutput.Status(childComplexity), true

	case "DuploDeployOutput.UpdatedAt":
		if e.complexity.DuploDeployOutput.UpdatedAt == nil {
			break
		}

		return e.complexity.DuploDeployOutput.UpdatedAt(childComplexity), true

	case "DuploDeployOutput.UserId":
		if e.complexity.DuploDeployOutput.UserID == nil {
			break
		}

		return e.complexity.DuploDeployOutput.UserID(childComplexity), true

	case "Duplolog.data":
		if e.complexity.Duplolog.Data == nil {
			break
		}

		return e.complexity.Duplolog.Data(childComplexity), true

	case "Duplolog.dockerId":
		if e.complexity.Duplolog.DockerID == nil {
			break
		}

		return e.complexity.Duplolog.DockerID(childComplexity), true

	case "Duplolog.hostName":
		if e.complexity.Duplolog.HostName == nil {
			break
		}

		return e.complexity.Duplolog.HostName(childComplexity), true

	case "Duplolog.stdErr":
		if e.complexity.Duplolog.StdErr == nil {
			break
		}

		return e.complexity.Duplolog.StdErr(childComplexity), true

	case "Duplolog.stdOut":
		if e.complexity.Duplolog.StdOut == nil {
			break
		}

		return e.complexity.Duplolog.StdOut(childComplexity), true

	case "Duplolog.tail":
		if e.complexity.Duplolog.Tail == nil {
			break
		}

		return e.complexity.Duplolog.Tail(childComplexity), true

	case "Edges.cursor":
		if e.complexity.Edges.Cursor == nil {
			break
		}

		return e.complexity.Edges.Cursor(childComplexity), true

	case "Edges.node":
		if e.complexity.Edges.Node == nil {
			break
		}

		return e.complexity.Edges.Node(childComplexity), true

	case "ElbUrl.elbUrl":
		if e.complexity.ElbURL.ElbURL == nil {
			break
		}

		return e.complexity.ElbURL.ElbURL(childComplexity), true

	case "File.link":
		if e.complexity.File.Link == nil {
			break
		}

		return e.complexity.File.Link(childComplexity), true

	case "GetClientSideLogs.id":
		if e.complexity.GetClientSideLogs.ID == nil {
			break
		}

		return e.complexity.GetClientSideLogs.ID(childComplexity), true

	case "GetClientSideLogs.level":
		if e.complexity.GetClientSideLogs.Level == nil {
			break
		}

		return e.complexity.GetClientSideLogs.Level(childComplexity), true

	case "GetClientSideLogs.message":
		if e.complexity.GetClientSideLogs.Message == nil {
			break
		}

		return e.complexity.GetClientSideLogs.Message(childComplexity), true

	case "GetClientSideLogs.timeStamp":
		if e.complexity.GetClientSideLogs.TimeStamp == nil {
			break
		}

		return e.complexity.GetClientSideLogs.TimeStamp(childComplexity), true

	case "GetClientSideLogs.userId":
		if e.complexity.GetClientSideLogs.UserID == nil {
			break
		}

		return e.complexity.GetClientSideLogs.UserID(childComplexity), true

	case "GetSecRegistry.id":
		if e.complexity.GetSecRegistry.ID == nil {
			break
		}

		return e.complexity.GetSecRegistry.ID(childComplexity), true

	case "GetSecRegistry.name":
		if e.complexity.GetSecRegistry.Name == nil {
			break
		}

		return e.complexity.GetSecRegistry.Name(childComplexity), true

	case "GetUserById.companyId":
		if e.complexity.GetUserByID.CompanyID == nil {
			break
		}

		return e.complexity.GetUserByID.CompanyID(childComplexity), true

	case "GetUserById.companyName":
		if e.complexity.GetUserByID.CompanyName == nil {
			break
		}

		return e.complexity.GetUserByID.CompanyName(childComplexity), true

	case "GetUserById.companylogo":
		if e.complexity.GetUserByID.Companylogo == nil {
			break
		}

		return e.complexity.GetUserByID.Companylogo(childComplexity), true

	case "GetUserById.email":
		if e.complexity.GetUserByID.Email == nil {
			break
		}

		return e.complexity.GetUserByID.Email(childComplexity), true

	case "GetUserById.firstName":
		if e.complexity.GetUserByID.FirstName == nil {
			break
		}

		return e.complexity.GetUserByID.FirstName(childComplexity), true

	case "GetUserById.freePlan":
		if e.complexity.GetUserByID.FreePlan == nil {
			break
		}

		return e.complexity.GetUserByID.FreePlan(childComplexity), true

	case "GetUserById.id":
		if e.complexity.GetUserByID.ID == nil {
			break
		}

		return e.complexity.GetUserByID.ID(childComplexity), true

	case "GetUserById.industry":
		if e.complexity.GetUserByID.Industry == nil {
			break
		}

		return e.complexity.GetUserByID.Industry(childComplexity), true

	case "GetUserById.isActive":
		if e.complexity.GetUserByID.IsActive == nil {
			break
		}

		return e.complexity.GetUserByID.IsActive(childComplexity), true

	case "GetUserById.isDelete":
		if e.complexity.GetUserByID.IsDelete == nil {
			break
		}

		return e.complexity.GetUserByID.IsDelete(childComplexity), true

	case "GetUserById.lastName":
		if e.complexity.GetUserByID.LastName == nil {
			break
		}

		return e.complexity.GetUserByID.LastName(childComplexity), true

	case "GetUserById.location":
		if e.complexity.GetUserByID.Location == nil {
			break
		}

		return e.complexity.GetUserByID.Location(childComplexity), true

	case "GetUserById.mode":
		if e.complexity.GetUserByID.Mode == nil {
			break
		}

		return e.complexity.GetUserByID.Mode(childComplexity), true

	case "GetUserById.organization":
		if e.complexity.GetUserByID.Organization == nil {
			break
		}

		return e.complexity.GetUserByID.Organization(childComplexity), true

	case "GetUserById.phoneNumber":
		if e.complexity.GetUserByID.PhoneNumber == nil {
			break
		}

		return e.complexity.GetUserByID.PhoneNumber(childComplexity), true

	case "GetUserById.profileImageUrl":
		if e.complexity.GetUserByID.ProfileImageURL == nil {
			break
		}

		return e.complexity.GetUserByID.ProfileImageURL(childComplexity), true

	case "GetUserById.roleId":
		if e.complexity.GetUserByID.RoleID == nil {
			break
		}

		return e.complexity.GetUserByID.RoleID(childComplexity), true

	case "GetUserById.slackWebhookURL":
		if e.complexity.GetUserByID.SlackWebhookURL == nil {
			break
		}

		return e.complexity.GetUserByID.SlackWebhookURL(childComplexity), true

	case "GetUserById.ssoType":
		if e.complexity.GetUserByID.SsoType == nil {
			break
		}

		return e.complexity.GetUserByID.SsoType(childComplexity), true

	case "GetUserById.userProfileCreated":
		if e.complexity.GetUserByID.UserProfileCreated == nil {
			break
		}

		return e.complexity.GetUserByID.UserProfileCreated(childComplexity), true

	case "GetUserMetrics.queryType":
		if e.complexity.GetUserMetrics.QueryType == nil {
			break
		}

		return e.complexity.GetUserMetrics.QueryType(childComplexity), true

	case "GetUserMetrics.resolverIp":
		if e.complexity.GetUserMetrics.ResolverIP == nil {
			break
		}

		return e.complexity.GetUserMetrics.ResolverIP(childComplexity), true

	case "GetUserMetrics.timeStamp":
		if e.complexity.GetUserMetrics.TimeStamp == nil {
			break
		}

		return e.complexity.GetUserMetrics.TimeStamp(childComplexity), true

	case "GetUserPAT.createdAt":
		if e.complexity.GetUserPat.CreatedAt == nil {
			break
		}

		return e.complexity.GetUserPat.CreatedAt(childComplexity), true

	case "GetUserPAT.id":
		if e.complexity.GetUserPat.ID == nil {
			break
		}

		return e.complexity.GetUserPat.ID(childComplexity), true

	case "GetUserPAT.patToken":
		if e.complexity.GetUserPat.PatToken == nil {
			break
		}

		return e.complexity.GetUserPat.PatToken(childComplexity), true

	case "GetUserPAT.type":
		if e.complexity.GetUserPat.Type == nil {
			break
		}

		return e.complexity.GetUserPat.Type(childComplexity), true

	case "GetUserPAT.updatedAt":
		if e.complexity.GetUserPat.UpdatedAt == nil {
			break
		}

		return e.complexity.GetUserPat.UpdatedAt(childComplexity), true

	case "GetUserPAT.userId":
		if e.complexity.GetUserPat.UserID == nil {
			break
		}

		return e.complexity.GetUserPat.UserID(childComplexity), true

	case "GetUserSecret.id":
		if e.complexity.GetUserSecret.ID == nil {
			break
		}

		return e.complexity.GetUserSecret.ID(childComplexity), true

	case "GetUserSecret.isActive":
		if e.complexity.GetUserSecret.IsActive == nil {
			break
		}

		return e.complexity.GetUserSecret.IsActive(childComplexity), true

	case "GetUserSecret.keyFileContent":
		if e.complexity.GetUserSecret.KeyFileContent == nil {
			break
		}

		return e.complexity.GetUserSecret.KeyFileContent(childComplexity), true

	case "GetUserSecret.name":
		if e.complexity.GetUserSecret.Name == nil {
			break
		}

		return e.complexity.GetUserSecret.Name(childComplexity), true

	case "GetUserSecret.organizationId":
		if e.complexity.GetUserSecret.OrganizationID == nil {
			break
		}

		return e.complexity.GetUserSecret.OrganizationID(childComplexity), true

	case "GetUserSecret.passWord":
		if e.complexity.GetUserSecret.PassWord == nil {
			break
		}

		return e.complexity.GetUserSecret.PassWord(childComplexity), true

	case "GetUserSecret.registryName":
		if e.complexity.GetUserSecret.RegistryName == nil {
			break
		}

		return e.complexity.GetUserSecret.RegistryName(childComplexity), true

	case "GetUserSecret.registryType":
		if e.complexity.GetUserSecret.RegistryType == nil {
			break
		}

		return e.complexity.GetUserSecret.RegistryType(childComplexity), true

	case "GetUserSecret.secretType":
		if e.complexity.GetUserSecret.SecretType == nil {
			break
		}

		return e.complexity.GetUserSecret.SecretType(childComplexity), true

	case "GetUserSecret.Url":
		if e.complexity.GetUserSecret.URL == nil {
			break
		}

		return e.complexity.GetUserSecret.URL(childComplexity), true

	case "GetUserSecret.userName":
		if e.complexity.GetUserSecret.UserName == nil {
			break
		}

		return e.complexity.GetUserSecret.UserName(childComplexity), true

	case "HTTPHeader.name":
		if e.complexity.HTTPHeader.Name == nil {
			break
		}

		return e.complexity.HTTPHeader.Name(childComplexity), true

	case "HTTPHeader.value":
		if e.complexity.HTTPHeader.Value == nil {
			break
		}

		return e.complexity.HTTPHeader.Value(childComplexity), true

	case "HostDetails.accessKey":
		if e.complexity.HostDetails.AccessKey == nil {
			break
		}

		return e.complexity.HostDetails.AccessKey(childComplexity), true

	case "HostDetails.createdAt":
		if e.complexity.HostDetails.CreatedAt == nil {
			break
		}

		return e.complexity.HostDetails.CreatedAt(childComplexity), true

	case "HostDetails.createdBy":
		if e.complexity.HostDetails.CreatedBy == nil {
			break
		}

		return e.complexity.HostDetails.CreatedBy(childComplexity), true

	case "HostDetails.id":
		if e.complexity.HostDetails.ID == nil {
			break
		}

		return e.complexity.HostDetails.ID(childComplexity), true

	case "HostDetails.instanceId":
		if e.complexity.HostDetails.InstanceID == nil {
			break
		}

		return e.complexity.HostDetails.InstanceID(childComplexity), true

	case "HostDetails.instanceName":
		if e.complexity.HostDetails.InstanceName == nil {
			break
		}

		return e.complexity.HostDetails.InstanceName(childComplexity), true

	case "HostDetails.isActive":
		if e.complexity.HostDetails.IsActive == nil {
			break
		}

		return e.complexity.HostDetails.IsActive(childComplexity), true

	case "HostDetails.orgId":
		if e.complexity.HostDetails.OrgID == nil {
			break
		}

		return e.complexity.HostDetails.OrgID(childComplexity), true

	case "HostDetails.secretKey":
		if e.complexity.HostDetails.SecretKey == nil {
			break
		}

		return e.complexity.HostDetails.SecretKey(childComplexity), true

	case "HostDetails.serviceAccountURL":
		if e.complexity.HostDetails.ServiceAccountURL == nil {
			break
		}

		return e.complexity.HostDetails.ServiceAccountURL(childComplexity), true

	case "HostDetails.status":
		if e.complexity.HostDetails.Status == nil {
			break
		}

		return e.complexity.HostDetails.Status(childComplexity), true

	case "HostDetails.type":
		if e.complexity.HostDetails.Type == nil {
			break
		}

		return e.complexity.HostDetails.Type(childComplexity), true

	case "HostDetails.zone":
		if e.complexity.HostDetails.Zone == nil {
			break
		}

		return e.complexity.HostDetails.Zone(childComplexity), true

	case "HostPayload.accessKey":
		if e.complexity.HostPayload.AccessKey == nil {
			break
		}

		return e.complexity.HostPayload.AccessKey(childComplexity), true

	case "HostPayload.clientId":
		if e.complexity.HostPayload.ClientID == nil {
			break
		}

		return e.complexity.HostPayload.ClientID(childComplexity), true

	case "HostPayload.clientSecret":
		if e.complexity.HostPayload.ClientSecret == nil {
			break
		}

		return e.complexity.HostPayload.ClientSecret(childComplexity), true

	case "HostPayload.createdAt":
		if e.complexity.HostPayload.CreatedAt == nil {
			break
		}

		return e.complexity.HostPayload.CreatedAt(childComplexity), true

	case "HostPayload.createdBy":
		if e.complexity.HostPayload.CreatedBy == nil {
			break
		}

		return e.complexity.HostPayload.CreatedBy(childComplexity), true

	case "HostPayload.id":
		if e.complexity.HostPayload.ID == nil {
			break
		}

		return e.complexity.HostPayload.ID(childComplexity), true

	case "HostPayload.InstanceActivity":
		if e.complexity.HostPayload.InstanceActivity == nil {
			break
		}

		return e.complexity.HostPayload.InstanceActivity(childComplexity), true

	case "HostPayload.instanceId":
		if e.complexity.HostPayload.InstanceID == nil {
			break
		}

		return e.complexity.HostPayload.InstanceID(childComplexity), true

	case "HostPayload.instanceName":
		if e.complexity.HostPayload.InstanceName == nil {
			break
		}

		return e.complexity.HostPayload.InstanceName(childComplexity), true

	case "HostPayload.orgId":
		if e.complexity.HostPayload.OrgID == nil {
			break
		}

		return e.complexity.HostPayload.OrgID(childComplexity), true

	case "HostPayload.orgName":
		if e.complexity.HostPayload.OrgName == nil {
			break
		}

		return e.complexity.HostPayload.OrgName(childComplexity), true

	case "HostPayload.resourceGroupName":
		if e.complexity.HostPayload.ResourceGroupName == nil {
			break
		}

		return e.complexity.HostPayload.ResourceGroupName(childComplexity), true

	case "HostPayload.secretKey":
		if e.complexity.HostPayload.SecretKey == nil {
			break
		}

		return e.complexity.HostPayload.SecretKey(childComplexity), true

	case "HostPayload.serviceAccountURL":
		if e.complexity.HostPayload.ServiceAccountURL == nil {
			break
		}

		return e.complexity.HostPayload.ServiceAccountURL(childComplexity), true

	case "HostPayload.status":
		if e.complexity.HostPayload.Status == nil {
			break
		}

		return e.complexity.HostPayload.Status(childComplexity), true

	case "HostPayload.subscriptionId":
		if e.complexity.HostPayload.SubscriptionID == nil {
			break
		}

		return e.complexity.HostPayload.SubscriptionID(childComplexity), true

	case "HostPayload.tenantId":
		if e.complexity.HostPayload.TenantID == nil {
			break
		}

		return e.complexity.HostPayload.TenantID(childComplexity), true

	case "HostPayload.type":
		if e.complexity.HostPayload.Type == nil {
			break
		}

		return e.complexity.HostPayload.Type(childComplexity), true

	case "HostPayload.zone":
		if e.complexity.HostPayload.Zone == nil {
			break
		}

		return e.complexity.HostPayload.Zone(childComplexity), true

	case "IPAddress.address":
		if e.complexity.IPAddress.Address == nil {
			break
		}

		return e.complexity.IPAddress.Address(childComplexity), true

	case "IPAddress.createdAt":
		if e.complexity.IPAddress.CreatedAt == nil {
			break
		}

		return e.complexity.IPAddress.CreatedAt(childComplexity), true

	case "IPAddress.id":
		if e.complexity.IPAddress.ID == nil {
			break
		}

		return e.complexity.IPAddress.ID(childComplexity), true

	case "IPAddress.type":
		if e.complexity.IPAddress.Type == nil {
			break
		}

		return e.complexity.IPAddress.Type(childComplexity), true

	case "IPAddresses.nodes":
		if e.complexity.IPAddresses.Nodes == nil {
			break
		}

		return e.complexity.IPAddresses.Nodes(childComplexity), true

	case "InviteUserOutputMessage.message":
		if e.complexity.InviteUserOutputMessage.Message == nil {
			break
		}

		return e.complexity.InviteUserOutputMessage.Message(childComplexity), true

	case "InviteUserOutputMessage.userId":
		if e.complexity.InviteUserOutputMessage.UserID == nil {
			break
		}

		return e.complexity.InviteUserOutputMessage.UserID(childComplexity), true

	case "Issue.expireAt":
		if e.complexity.Issue.ExpireAt == nil {
			break
		}

		return e.complexity.Issue.ExpireAt(childComplexity), true

	case "Issue.type":
		if e.complexity.Issue.Type == nil {
			break
		}

		return e.complexity.Issue.Type(childComplexity), true

	case "Issued.nodes":
		if e.complexity.Issued.Nodes == nil {
			break
		}

		return e.complexity.Issued.Nodes(childComplexity), true

	case "Link.address":
		if e.complexity.Link.Address == nil {
			break
		}

		return e.complexity.Link.Address(childComplexity), true

	case "Link.id":
		if e.complexity.Link.ID == nil {
			break
		}

		return e.complexity.Link.ID(childComplexity), true

	case "Link.title":
		if e.complexity.Link.Title == nil {
			break
		}

		return e.complexity.Link.Title(childComplexity), true

	case "Link.user":
		if e.complexity.Link.User == nil {
			break
		}

		return e.complexity.Link.User(childComplexity), true

	case "LogEntry.instance":
		if e.complexity.LogEntry.Instance == nil {
			break
		}

		return e.complexity.LogEntry.Instance(childComplexity), true

	case "LogEntry.level":
		if e.complexity.LogEntry.Level == nil {
			break
		}

		return e.complexity.LogEntry.Level(childComplexity), true

	case "LogEntry.message":
		if e.complexity.LogEntry.Message == nil {
			break
		}

		return e.complexity.LogEntry.Message(childComplexity), true

	case "LogEntry.meta":
		if e.complexity.LogEntry.Meta == nil {
			break
		}

		return e.complexity.LogEntry.Meta(childComplexity), true

	case "LogEntry.region":
		if e.complexity.LogEntry.Region == nil {
			break
		}

		return e.complexity.LogEntry.Region(childComplexity), true

	case "LogEntry.timestamp":
		if e.complexity.LogEntry.Timestamp == nil {
			break
		}

		return e.complexity.LogEntry.Timestamp(childComplexity), true

	case "Members.edges":
		if e.complexity.Members.Edges == nil {
			break
		}

		return e.complexity.Members.Edges(childComplexity), true

	case "Meta.instance":
		if e.complexity.Meta.Instance == nil {
			break
		}

		return e.complexity.Meta.Instance(childComplexity), true

	case "Meta.region":
		if e.complexity.Meta.Region == nil {
			break
		}

		return e.complexity.Meta.Region(childComplexity), true

	case "MultipleRegionResponse.isDefault":
		if e.complexity.MultipleRegionResponse.IsDefault == nil {
			break
		}

		return e.complexity.MultipleRegionResponse.IsDefault(childComplexity), true

	case "MultipleRegionResponse.region":
		if e.complexity.MultipleRegionResponse.Region == nil {
			break
		}

		return e.complexity.MultipleRegionResponse.Region(childComplexity), true

	case "Mutation.ActiveUser":
		if e.complexity.Mutation.ActiveUser == nil {
			break
		}

		args, err := ec.field_Mutation_ActiveUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ActiveUser(childComplexity, args["IsActive"].(*bool), args["IsDelete"].(*bool)), true

	case "Mutation.addDataDogBYOC":
		if e.complexity.Mutation.AddDataDogByoc == nil {
			break
		}

		args, err := ec.field_Mutation_addDataDogBYOC_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddDataDogByoc(childComplexity, args["input"].(model.DataDogInput)), true

	case "Mutation.addInviteUserRole":
		if e.complexity.Mutation.AddInviteUserRole == nil {
			break
		}

		args, err := ec.field_Mutation_addInviteUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddInviteUserRole(childComplexity, args["email"].(string), args["roleId"].(int)), true

	case "Mutation.addPAT":
		if e.complexity.Mutation.AddPat == nil {
			break
		}

		args, err := ec.field_Mutation_addPAT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddPat(childComplexity, args["input"].(*model.UserPat)), true

	case "Mutation.addRegionUsingKubeConfig":
		if e.complexity.Mutation.AddRegionUsingKubeConfig == nil {
			break
		}

		args, err := ec.field_Mutation_addRegionUsingKubeConfig_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddRegionUsingKubeConfig(childComplexity, args["input"].(*model.ClusterDetailsInput)), true

	case "Mutation.addUserAddedregionsToOrganizatiom":
		if e.complexity.Mutation.AddUserAddedregionsToOrganizatiom == nil {
			break
		}

		args, err := ec.field_Mutation_addUserAddedregionsToOrganizatiom_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserAddedregionsToOrganizatiom(childComplexity, args["organizationId"].([]*string)), true

	case "Mutation.addUserToOrg":
		if e.complexity.Mutation.AddUserToOrg == nil {
			break
		}

		args, err := ec.field_Mutation_addUserToOrg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddUserToOrg(childComplexity, args["input"].(*model.AddUser)), true

	case "Mutation.addWorkloadRegions":
		if e.complexity.Mutation.AddWorkloadRegions == nil {
			break
		}

		args, err := ec.field_Mutation_addWorkloadRegions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AddWorkloadRegions(childComplexity, args["workLoadId"].(string), args["regionCode"].([]*string)), true

	case "Mutation.appTemplate":
		if e.complexity.Mutation.AppTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_appTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AppTemplate(childComplexity, args["input"].(model.ConfigTemplate)), true

	case "Mutation.changePassword":
		if e.complexity.Mutation.ChangePassword == nil {
			break
		}

		args, err := ec.field_Mutation_changePassword_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ChangePassword(childComplexity, args["input"].(model.ChangePassword)), true

	case "Mutation.checkGithubRepoPrivateOrPublic":
		if e.complexity.Mutation.CheckGithubRepoPrivateOrPublic == nil {
			break
		}

		args, err := ec.field_Mutation_checkGithubRepoPrivateOrPublic_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CheckGithubRepoPrivateOrPublic(childComplexity, args["githubUrl"].(*string)), true

	case "Mutation.clientSideLog":
		if e.complexity.Mutation.ClientSideLog == nil {
			break
		}

		args, err := ec.field_Mutation_clientSideLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClientSideLog(childComplexity, args["input"].(model.ClientSideLogs)), true

	case "Mutation.configureRegions":
		if e.complexity.Mutation.ConfigureRegions == nil {
			break
		}

		args, err := ec.field_Mutation_configureRegions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ConfigureRegions(childComplexity, args["input"].(*model.ConfigureRegionsInput)), true

	case "Mutation.createApp":
		if e.complexity.Mutation.CreateApp == nil {
			break
		}

		args, err := ec.field_Mutation_createApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateApp(childComplexity, args["input"].(model.CreateAppInput)), true

	case "Mutation.CreateAttachPaymentMethod":
		if e.complexity.Mutation.CreateAttachPaymentMethod == nil {
			break
		}

		args, err := ec.field_Mutation_CreateAttachPaymentMethod_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateAttachPaymentMethod(childComplexity, args["input"].(model.CreateAttachPaymentMethod)), true

	case "Mutation.createBusinessUnit":
		if e.complexity.Mutation.CreateBusinessUnit == nil {
			break
		}

		args, err := ec.field_Mutation_createBusinessUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateBusinessUnit(childComplexity, args["input"].(model.BusinessUnitInput)), true

	case "Mutation.createDuploVolume":
		if e.complexity.Mutation.CreateDuploVolume == nil {
			break
		}

		args, err := ec.field_Mutation_createDuploVolume_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateDuploVolume(childComplexity, args["input"].([]*model.DuploVolumeInput)), true

	case "Mutation.createHost":
		if e.complexity.Mutation.CreateHost == nil {
			break
		}

		args, err := ec.field_Mutation_createHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateHost(childComplexity, args["input"].(*model.Host)), true

	case "Mutation.createNamespaceInCluster":
		if e.complexity.Mutation.CreateNamespaceInCluster == nil {
			break
		}

		args, err := ec.field_Mutation_createNamespaceInCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNamespaceInCluster(childComplexity, args["input"].(*model.CreateNamespace)), true

	case "Mutation.createNifeTomlFile":
		if e.complexity.Mutation.CreateNifeTomlFile == nil {
			break
		}

		args, err := ec.field_Mutation_createNifeTomlFile_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateNifeTomlFile(childComplexity, args["input"].(*model.CreateAppToml)), true

	case "Mutation.createOrganization":
		if e.complexity.Mutation.CreateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganization(childComplexity, args["input"].(model.CreateOrganizationInput)), true

	case "Mutation.createOrganizationSecret":
		if e.complexity.Mutation.CreateOrganizationSecret == nil {
			break
		}

		args, err := ec.field_Mutation_createOrganizationSecret_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOrganizationSecret(childComplexity, args["input"].(*model.CreateSecretInput)), true

	case "Mutation.CreatePaymentIntent":
		if e.complexity.Mutation.CreatePaymentIntent == nil {
			break
		}

		args, err := ec.field_Mutation_CreatePaymentIntent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePaymentIntent(childComplexity, args["input"].(model.CreatePaymentIntent)), true

	case "Mutation.CreateStripeSubscription":
		if e.complexity.Mutation.CreateStripeSubscription == nil {
			break
		}

		args, err := ec.field_Mutation_CreateStripeSubscription_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateStripeSubscription(childComplexity, args["input"].(model.CreateStripeSubscription)), true

	case "Mutation.createSubOrganization":
		if e.complexity.Mutation.CreateSubOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_createSubOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSubOrganization(childComplexity, args["input"].(model.CreateSubOrganizationInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(model.NewUser)), true

	case "Mutation.createWorkloadManagement":
		if e.complexity.Mutation.CreateWorkloadManagement == nil {
			break
		}

		args, err := ec.field_Mutation_createWorkloadManagement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateWorkloadManagement(childComplexity, args["input"].(*model.WorkloadManagement)), true

	case "Mutation.deleteApp":
		if e.complexity.Mutation.DeleteApp == nil {
			break
		}

		args, err := ec.field_Mutation_deleteApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteApp(childComplexity, args["appId"].(string), args["regionCode"].(string)), true

	case "Mutation.deleteAppTemplate":
		if e.complexity.Mutation.DeleteAppTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_deleteAppTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteAppTemplate(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteBusinessUnit":
		if e.complexity.Mutation.DeleteBusinessUnit == nil {
			break
		}

		args, err := ec.field_Mutation_deleteBusinessUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteBusinessUnit(childComplexity, args["id"].(string)), true

	case "Mutation.deleteDataDogByoc":
		if e.complexity.Mutation.DeleteDataDogByoc == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDataDogByoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDataDogByoc(childComplexity, args["dataDogId"].(string)), true

	case "Mutation.deleteDuploApp":
		if e.complexity.Mutation.DeleteDuploApp == nil {
			break
		}

		args, err := ec.field_Mutation_deleteDuploApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteDuploApp(childComplexity, args["appName"].(*string)), true

	case "Mutation.deleteHost":
		if e.complexity.Mutation.DeleteHost == nil {
			break
		}

		args, err := ec.field_Mutation_deleteHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteHost(childComplexity, args["id"].(*int)), true

	case "Mutation.deleteKubeConfigRegion":
		if e.complexity.Mutation.DeleteKubeConfigRegion == nil {
			break
		}

		args, err := ec.field_Mutation_deleteKubeConfigRegion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteKubeConfigRegion(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteOrganization":
		if e.complexity.Mutation.DeleteOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganization(childComplexity, args["input"].(model.DeleteOrganizationInput)), true

	case "Mutation.deleteOrganizationSecret":
		if e.complexity.Mutation.DeleteOrganizationSecret == nil {
			break
		}

		args, err := ec.field_Mutation_deleteOrganizationSecret_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteOrganizationSecret(childComplexity, args["name"].(*string), args["id"].(*string)), true

	case "Mutation.deletePAT":
		if e.complexity.Mutation.DeletePat == nil {
			break
		}

		args, err := ec.field_Mutation_deletePAT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePat(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteRequestedRegion":
		if e.complexity.Mutation.DeleteRequestedRegion == nil {
			break
		}

		args, err := ec.field_Mutation_deleteRequestedRegion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteRequestedRegion(childComplexity, args["id"].(*string)), true

	case "Mutation.deleteS3Deployment":
		if e.complexity.Mutation.DeleteS3Deployment == nil {
			break
		}

		args, err := ec.field_Mutation_deleteS3Deployment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteS3Deployment(childComplexity, args["s3AppName"].(*string)), true

	case "Mutation.deleteSubOrganization":
		if e.complexity.Mutation.DeleteSubOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_deleteSubOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteSubOrganization(childComplexity, args["input"].(model.DeleteSubOrganizationInput)), true

	case "Mutation.deleteWorkloadManagement":
		if e.complexity.Mutation.DeleteWorkloadManagement == nil {
			break
		}

		args, err := ec.field_Mutation_deleteWorkloadManagement_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteWorkloadManagement(childComplexity, args["id"].(*string)), true

	case "Mutation.deployImage":
		if e.complexity.Mutation.DeployImage == nil {
			break
		}

		args, err := ec.field_Mutation_deployImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeployImage(childComplexity, args["input"].(model.DeployImageInput)), true

	case "Mutation.deployK8S":
		if e.complexity.Mutation.DeployK8s == nil {
			break
		}

		args, err := ec.field_Mutation_deployK8S_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeployK8s(childComplexity, args["input"].(model.DeployInput)), true

	case "Mutation.editApp":
		if e.complexity.Mutation.EditApp == nil {
			break
		}

		args, err := ec.field_Mutation_editApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditApp(childComplexity, args["input"].(*model.EditAppByOrganization)), true

	case "Mutation.inviteUser":
		if e.complexity.Mutation.InviteUser == nil {
			break
		}

		args, err := ec.field_Mutation_inviteUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.InviteUser(childComplexity, args["input"].(*model.InviteUser)), true

	case "Mutation.login":
		if e.complexity.Mutation.Login == nil {
			break
		}

		args, err := ec.field_Mutation_login_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Login(childComplexity, args["input"].(model.Login)), true

	case "Mutation.migrateOrganization":
		if e.complexity.Mutation.MigrateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_migrateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MigrateOrganization(childComplexity, args["input"].(model.MigrateOrganizationInput)), true

	case "Mutation.moveApp":
		if e.complexity.Mutation.MoveApp == nil {
			break
		}

		args, err := ec.field_Mutation_moveApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MoveApp(childComplexity, args["input"].(model.MoveAppInput)), true

	case "Mutation.mutipleRegion":
		if e.complexity.Mutation.MutipleRegion == nil {
			break
		}

		args, err := ec.field_Mutation_mutipleRegion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.MutipleRegion(childComplexity, args["input"].(*model.MultipleRegionInput)), true

	case "Mutation.newRegionRequest":
		if e.complexity.Mutation.NewRegionRequest == nil {
			break
		}

		args, err := ec.field_Mutation_newRegionRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewRegionRequest(childComplexity, args["input"].(*model.RegionRequest)), true

	case "Mutation.newRegionsRequest":
		if e.complexity.Mutation.NewRegionsRequest == nil {
			break
		}

		args, err := ec.field_Mutation_newRegionsRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NewRegionsRequest(childComplexity, args["input"].(*model.RegionRequest)), true

	case "Mutation.NodeAction":
		if e.complexity.Mutation.NodeAction == nil {
			break
		}

		args, err := ec.field_Mutation_NodeAction_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NodeAction(childComplexity, args["input"].(*model.StartAndStopVM)), true

	case "Mutation.NodeActionAWS":
		if e.complexity.Mutation.NodeActionAws == nil {
			break
		}

		args, err := ec.field_Mutation_NodeActionAWS_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NodeActionAws(childComplexity, args["input"].(*model.StartAndStopVM)), true

	case "Mutation.NodeActionAzure":
		if e.complexity.Mutation.NodeActionAzure == nil {
			break
		}

		args, err := ec.field_Mutation_NodeActionAzure_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NodeActionAzure(childComplexity, args["input"].(*model.StartAndStopVM)), true

	case "Mutation.notificationInfo":
		if e.complexity.Mutation.NotificationInfo == nil {
			break
		}

		args, err := ec.field_Mutation_notificationInfo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.NotificationInfo(childComplexity, args["input"].(*model.Notification)), true

	case "Mutation.optimizeImage":
		if e.complexity.Mutation.OptimizeImage == nil {
			break
		}

		args, err := ec.field_Mutation_optimizeImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.OptimizeImage(childComplexity, args["input"].(model.OptimizeImageInput)), true

	case "Mutation.pauseApp":
		if e.complexity.Mutation.PauseApp == nil {
			break
		}

		args, err := ec.field_Mutation_pauseApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PauseApp(childComplexity, args["input"].(model.PauseAppInput)), true

	case "Mutation.removeFiles":
		if e.complexity.Mutation.RemoveFiles == nil {
			break
		}

		args, err := ec.field_Mutation_removeFiles_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveFiles(childComplexity, args["s3AppName"].(*string)), true

	case "Mutation.removeInviteuser":
		if e.complexity.Mutation.RemoveInviteuser == nil {
			break
		}

		args, err := ec.field_Mutation_removeInviteuser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveInviteuser(childComplexity, args["userId"].(*string)), true

	case "Mutation.removeUserOrg":
		if e.complexity.Mutation.RemoveUserOrg == nil {
			break
		}

		args, err := ec.field_Mutation_removeUserOrg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveUserOrg(childComplexity, args["OrganizationId"].(*string), args["UserId"].(*string)), true

	case "Mutation.removeWorkloadRegions":
		if e.complexity.Mutation.RemoveWorkloadRegions == nil {
			break
		}

		args, err := ec.field_Mutation_removeWorkloadRegions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveWorkloadRegions(childComplexity, args["wlid"].(*string), args["wlRegion"].(*string)), true

	case "Mutation.requestingPicoNets":
		if e.complexity.Mutation.RequestingPicoNets == nil {
			break
		}

		args, err := ec.field_Mutation_requestingPicoNets_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RequestingPicoNets(childComplexity, args["appName"].(*string)), true

	case "Mutation.restartApp":
		if e.complexity.Mutation.RestartApp == nil {
			break
		}

		args, err := ec.field_Mutation_restartApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RestartApp(childComplexity, args["input"].(model.RestartAppInput)), true

	case "Mutation.resumeApp":
		if e.complexity.Mutation.ResumeApp == nil {
			break
		}

		args, err := ec.field_Mutation_resumeApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResumeApp(childComplexity, args["input"].(model.ResumeAppInput)), true

	case "Mutation.S3Deployment":
		if e.complexity.Mutation.S3Deployment == nil {
			break
		}

		args, err := ec.field_Mutation_S3Deployment_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.S3Deployment(childComplexity, args["input"].(*model.S3DeployInput)), true

	case "Mutation.setUserTokenExpireTime":
		if e.complexity.Mutation.SetUserTokenExpireTime == nil {
			break
		}

		args, err := ec.field_Mutation_setUserTokenExpireTime_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetUserTokenExpireTime(childComplexity, args["ExpireTime"].(*int)), true

	case "Mutation.singleUpload":
		if e.complexity.Mutation.SingleUpload == nil {
			break
		}

		args, err := ec.field_Mutation_singleUpload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SingleUpload(childComplexity, args["file"].(graphql.Upload)), true

	case "Mutation.startBuild":
		if e.complexity.Mutation.StartBuild == nil {
			break
		}

		args, err := ec.field_Mutation_startBuild_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.StartBuild(childComplexity, args["input"].(model.StartBuildInput)), true

	case "Mutation.updateApp":
		if e.complexity.Mutation.UpdateApp == nil {
			break
		}

		args, err := ec.field_Mutation_updateApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateApp(childComplexity, args["input"].(model.UpdateAppInput)), true

	case "Mutation.updateAppTemplate":
		if e.complexity.Mutation.UpdateAppTemplate == nil {
			break
		}

		args, err := ec.field_Mutation_updateAppTemplate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateAppTemplate(childComplexity, args["input"].(model.ConfigTemplate)), true

	case "Mutation.updateBusinessUnit":
		if e.complexity.Mutation.UpdateBusinessUnit == nil {
			break
		}

		args, err := ec.field_Mutation_updateBusinessUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateBusinessUnit(childComplexity, args["input"].(model.BusinessUnitInput)), true

	case "Mutation.updateConfigApps":
		if e.complexity.Mutation.UpdateConfigApps == nil {
			break
		}

		args, err := ec.field_Mutation_updateConfigApps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateConfigApps(childComplexity, args["input"].(*model.UpdateConfig)), true

	case "Mutation.updateDataDogByoc":
		if e.complexity.Mutation.UpdateDataDogByoc == nil {
			break
		}

		args, err := ec.field_Mutation_updateDataDogByoc_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDataDogByoc(childComplexity, args["input"].(*model.DataDogInput)), true

	case "Mutation.updateDefaultRegion":
		if e.complexity.Mutation.UpdateDefaultRegion == nil {
			break
		}

		args, err := ec.field_Mutation_updateDefaultRegion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateDefaultRegion(childComplexity, args["input"].(*model.DefaultRegionInput)), true

	case "Mutation.updateImage":
		if e.complexity.Mutation.UpdateImage == nil {
			break
		}

		args, err := ec.field_Mutation_updateImage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateImage(childComplexity, args["appName"].(*string), args["imageName"].(*string)), true

	case "Mutation.updateOrganization":
		if e.complexity.Mutation.UpdateOrganization == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganization(childComplexity, args["org"].(*string), args["defaulttype"].(*bool)), true

	case "Mutation.updateOrganizationSecret":
		if e.complexity.Mutation.UpdateOrganizationSecret == nil {
			break
		}

		args, err := ec.field_Mutation_updateOrganizationSecret_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOrganizationSecret(childComplexity, args["name"].(*string), args["input"].(*model.UpdateSecretInput)), true

	case "Mutation.updatePAT":
		if e.complexity.Mutation.UpdatePat == nil {
			break
		}

		args, err := ec.field_Mutation_updatePAT_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePat(childComplexity, args["input"].(*model.UserPat)), true

	case "Mutation.updateRegistryIdToApp":
		if e.complexity.Mutation.UpdateRegistryIDToApp == nil {
			break
		}

		args, err := ec.field_Mutation_updateRegistryIdToApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRegistryIDToApp(childComplexity, args["appName"].(string), args["name"].(*string)), true

	case "Mutation.updateRole":
		if e.complexity.Mutation.UpdateRole == nil {
			break
		}

		args, err := ec.field_Mutation_updateRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateRole(childComplexity, args["userId"].(*string), args["roleId"].(*int)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["input"].(*model.UpdateUserInput)), true

	case "Mutation.updateUserwebhookURLSlack":
		if e.complexity.Mutation.UpdateUserwebhookURLSlack == nil {
			break
		}

		args, err := ec.field_Mutation_updateUserwebhookURLSlack_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUserwebhookURLSlack(childComplexity, args["webhookURL"].(*string)), true

	case "Mutation.updateVolume":
		if e.complexity.Mutation.UpdateVolume == nil {
			break
		}

		args, err := ec.field_Mutation_updateVolume_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateVolume(childComplexity, args["input"].(*model.UpdateVolumeInput)), true

	case "Mutation.uploadCompanyLogo":
		if e.complexity.Mutation.UploadCompanyLogo == nil {
			break
		}

		args, err := ec.field_Mutation_uploadCompanyLogo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UploadCompanyLogo(childComplexity, args["input"].(*model.Image)), true

	case "Mutation.userProfileUpdated":
		if e.complexity.Mutation.UserProfileUpdated == nil {
			break
		}

		args, err := ec.field_Mutation_userProfileUpdated_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserProfileUpdated(childComplexity, args["userId"].(*string), args["userProfileCreated"].(*bool)), true

	case "Mutation.userRequestingByoh":
		if e.complexity.Mutation.UserRequestingByoh == nil {
			break
		}

		args, err := ec.field_Mutation_userRequestingByoh_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UserRequestingByoh(childComplexity, args["input"].(*model.ByohRequest)), true

	case "NewApp.app":
		if e.complexity.NewApp.App == nil {
			break
		}

		return e.complexity.NewApp.App(childComplexity), true

	case "Nodes.nodes":
		if e.complexity.Nodes.Nodes == nil {
			break
		}

		return e.complexity.Nodes.Nodes(childComplexity), true

	case "OptimizeImage.status":
		if e.complexity.OptimizeImage.Status == nil {
			break
		}

		return e.complexity.OptimizeImage.Status(childComplexity), true

	case "OrgCountDetails.orgByAppCount":
		if e.complexity.OrgCountDetails.OrgByAppCount == nil {
			break
		}

		return e.complexity.OrgCountDetails.OrgByAppCount(childComplexity), true

	case "OrgCountDetails.totalOrgCount":
		if e.complexity.OrgCountDetails.TotalOrgCount == nil {
			break
		}

		return e.complexity.OrgCountDetails.TotalOrgCount(childComplexity), true

	case "Organization.domains":
		if e.complexity.Organization.Domains == nil {
			break
		}

		return e.complexity.Organization.Domains(childComplexity), true

	case "Organization.id":
		if e.complexity.Organization.ID == nil {
			break
		}

		return e.complexity.Organization.ID(childComplexity), true

	case "Organization.isActive":
		if e.complexity.Organization.IsActive == nil {
			break
		}

		return e.complexity.Organization.IsActive(childComplexity), true

	case "Organization.name":
		if e.complexity.Organization.Name == nil {
			break
		}

		return e.complexity.Organization.Name(childComplexity), true

	case "Organization.parentId":
		if e.complexity.Organization.ParentID == nil {
			break
		}

		return e.complexity.Organization.ParentID(childComplexity), true

	case "Organization.parentOrgName":
		if e.complexity.Organization.ParentOrgName == nil {
			break
		}

		return e.complexity.Organization.ParentOrgName(childComplexity), true

	case "Organization.region":
		if e.complexity.Organization.Region == nil {
			break
		}

		return e.complexity.Organization.Region(childComplexity), true

	case "Organization.slug":
		if e.complexity.Organization.Slug == nil {
			break
		}

		return e.complexity.Organization.Slug(childComplexity), true

	case "Organization.subOrg":
		if e.complexity.Organization.SubOrg == nil {
			break
		}

		return e.complexity.Organization.SubOrg(childComplexity), true

	case "Organization.type":
		if e.complexity.Organization.Type == nil {
			break
		}

		return e.complexity.Organization.Type(childComplexity), true

	case "OrganizationDetails.apps":
		if e.complexity.OrganizationDetails.Apps == nil {
			break
		}

		return e.complexity.OrganizationDetails.Apps(childComplexity), true

	case "OrganizationDetails.id":
		if e.complexity.OrganizationDetails.ID == nil {
			break
		}

		return e.complexity.OrganizationDetails.ID(childComplexity), true

	case "OrganizationDetails.members":
		if e.complexity.OrganizationDetails.Members == nil {
			break
		}

		return e.complexity.OrganizationDetails.Members(childComplexity), true

	case "OrganizationDetails.name":
		if e.complexity.OrganizationDetails.Name == nil {
			break
		}

		return e.complexity.OrganizationDetails.Name(childComplexity), true

	case "OrganizationDetails.slug":
		if e.complexity.OrganizationDetails.Slug == nil {
			break
		}

		return e.complexity.OrganizationDetails.Slug(childComplexity), true

	case "OrganizationDetails.type":
		if e.complexity.OrganizationDetails.Type == nil {
			break
		}

		return e.complexity.OrganizationDetails.Type(childComplexity), true

	case "OrganizationDetails.viewerRole":
		if e.complexity.OrganizationDetails.ViewerRole == nil {
			break
		}

		return e.complexity.OrganizationDetails.ViewerRole(childComplexity), true

	case "OrganizationMembershipEdge.cursor":
		if e.complexity.OrganizationMembershipEdge.Cursor == nil {
			break
		}

		return e.complexity.OrganizationMembershipEdge.Cursor(childComplexity), true

	case "OrganizationMembershipEdge.id":
		if e.complexity.OrganizationMembershipEdge.ID == nil {
			break
		}

		return e.complexity.OrganizationMembershipEdge.ID(childComplexity), true

	case "OrganizationMembershipEdge.joinedAt":
		if e.complexity.OrganizationMembershipEdge.JoinedAt == nil {
			break
		}

		return e.complexity.OrganizationMembershipEdge.JoinedAt(childComplexity), true

	case "OrganizationMembershipEdge.node":
		if e.complexity.OrganizationMembershipEdge.Node == nil {
			break
		}

		return e.complexity.OrganizationMembershipEdge.Node(childComplexity), true

	case "OrganizationMembershipEdge.role":
		if e.complexity.OrganizationMembershipEdge.Role == nil {
			break
		}

		return e.complexity.OrganizationMembershipEdge.Role(childComplexity), true

	case "OrganizationMembershipEdge.roleId":
		if e.complexity.OrganizationMembershipEdge.RoleID == nil {
			break
		}

		return e.complexity.OrganizationMembershipEdge.RoleID(childComplexity), true

	case "OrganizationRegionTable.id":
		if e.complexity.OrganizationRegionTable.ID == nil {
			break
		}

		return e.complexity.OrganizationRegionTable.ID(childComplexity), true

	case "OrganizationRegionTable.is_default":
		if e.complexity.OrganizationRegionTable.IsDefault == nil {
			break
		}

		return e.complexity.OrganizationRegionTable.IsDefault(childComplexity), true

	case "OrganizationRegionTable.organizationId":
		if e.complexity.OrganizationRegionTable.OrganizationID == nil {
			break
		}

		return e.complexity.OrganizationRegionTable.OrganizationID(childComplexity), true

	case "OrganizationRegionTable.region_code":
		if e.complexity.OrganizationRegionTable.RegionCode == nil {
			break
		}

		return e.complexity.OrganizationRegionTable.RegionCode(childComplexity), true

	case "OrganizationRegistryType.id":
		if e.complexity.OrganizationRegistryType.ID == nil {
			break
		}

		return e.complexity.OrganizationRegistryType.ID(childComplexity), true

	case "OrganizationRegistryType.isActive":
		if e.complexity.OrganizationRegistryType.IsActive == nil {
			break
		}

		return e.complexity.OrganizationRegistryType.IsActive(childComplexity), true

	case "OrganizationRegistryType.name":
		if e.complexity.OrganizationRegistryType.Name == nil {
			break
		}

		return e.complexity.OrganizationRegistryType.Name(childComplexity), true

	case "OrganizationRegistryType.slug":
		if e.complexity.OrganizationRegistryType.Slug == nil {
			break
		}

		return e.complexity.OrganizationRegistryType.Slug(childComplexity), true

	case "Organizations.nodes":
		if e.complexity.Organizations.Nodes == nil {
			break
		}

		return e.complexity.Organizations.Nodes(childComplexity), true

	case "OrganizationsandBusinessUnit.businessUnit":
		if e.complexity.OrganizationsandBusinessUnit.BusinessUnit == nil {
			break
		}

		return e.complexity.OrganizationsandBusinessUnit.BusinessUnit(childComplexity), true

	case "OrganizationsandBusinessUnit.nodes":
		if e.complexity.OrganizationsandBusinessUnit.Nodes == nil {
			break
		}

		return e.complexity.OrganizationsandBusinessUnit.Nodes(childComplexity), true

	case "OutputMessage.message":
		if e.complexity.OutputMessage.Message == nil {
			break
		}

		return e.complexity.OutputMessage.Message(childComplexity), true

	case "Password.message":
		if e.complexity.Password.Message == nil {
			break
		}

		return e.complexity.Password.Message(childComplexity), true

	case "Password.updatedAt":
		if e.complexity.Password.UpdatedAt == nil {
			break
		}

		return e.complexity.Password.UpdatedAt(childComplexity), true

	case "Payment.amount":
		if e.complexity.Payment.Amount == nil {
			break
		}

		return e.complexity.Payment.Amount(childComplexity), true

	case "Payment.clientSecretId":
		if e.complexity.Payment.ClientSecretID == nil {
			break
		}

		return e.complexity.Payment.ClientSecretID(childComplexity), true

	case "Payment.currency":
		if e.complexity.Payment.Currency == nil {
			break
		}

		return e.complexity.Payment.Currency(childComplexity), true

	case "Payment.id":
		if e.complexity.Payment.ID == nil {
			break
		}

		return e.complexity.Payment.ID(childComplexity), true

	case "Permission.create":
		if e.complexity.Permission.Create == nil {
			break
		}

		return e.complexity.Permission.Create(childComplexity), true

	case "Permission.created_at":
		if e.complexity.Permission.CreatedAt == nil {
			break
		}

		return e.complexity.Permission.CreatedAt(childComplexity), true

	case "Permission.delete":
		if e.complexity.Permission.Delete == nil {
			break
		}

		return e.complexity.Permission.Delete(childComplexity), true

	case "Permission.id":
		if e.complexity.Permission.ID == nil {
			break
		}

		return e.complexity.Permission.ID(childComplexity), true

	case "Permission.is_active":
		if e.complexity.Permission.IsActive == nil {
			break
		}

		return e.complexity.Permission.IsActive(childComplexity), true

	case "Permission.module":
		if e.complexity.Permission.Module == nil {
			break
		}

		return e.complexity.Permission.Module(childComplexity), true

	case "Permission.title":
		if e.complexity.Permission.Title == nil {
			break
		}

		return e.complexity.Permission.Title(childComplexity), true

	case "Permission.update":
		if e.complexity.Permission.Update == nil {
			break
		}

		return e.complexity.Permission.Update(childComplexity), true

	case "Permission.view":
		if e.complexity.Permission.View == nil {
			break
		}

		return e.complexity.Permission.View(childComplexity), true

	case "PlatFormOutput.code":
		if e.complexity.PlatFormOutput.Code == nil {
			break
		}

		return e.complexity.PlatFormOutput.Code(childComplexity), true

	case "PlatFormOutput.latitude":
		if e.complexity.PlatFormOutput.Latitude == nil {
			break
		}

		return e.complexity.PlatFormOutput.Latitude(childComplexity), true

	case "PlatFormOutput.longitude":
		if e.complexity.PlatFormOutput.Longitude == nil {
			break
		}

		return e.complexity.PlatFormOutput.Longitude(childComplexity), true

	case "PlatFormOutput.name":
		if e.complexity.PlatFormOutput.Name == nil {
			break
		}

		return e.complexity.PlatFormOutput.Name(childComplexity), true

	case "PortHandler.handlers":
		if e.complexity.PortHandler.Handlers == nil {
			break
		}

		return e.complexity.PortHandler.Handlers(childComplexity), true

	case "PortHandler.port":
		if e.complexity.PortHandler.Port == nil {
			break
		}

		return e.complexity.PortHandler.Port(childComplexity), true

	case "PriceList.description":
		if e.complexity.PriceList.Description == nil {
			break
		}

		return e.complexity.PriceList.Description(childComplexity), true

	case "PriceList.nickname":
		if e.complexity.PriceList.Nickname == nil {
			break
		}

		return e.complexity.PriceList.Nickname(childComplexity), true

	case "PriceList.priceid":
		if e.complexity.PriceList.Priceid == nil {
			break
		}

		return e.complexity.PriceList.Priceid(childComplexity), true

	case "PriceList.productid":
		if e.complexity.PriceList.Productid == nil {
			break
		}

		return e.complexity.PriceList.Productid(childComplexity), true

	case "PriceList.unitamount":
		if e.complexity.PriceList.Unitamount == nil {
			break
		}

		return e.complexity.PriceList.Unitamount(childComplexity), true

	case "Query.app":
		if e.complexity.Query.App == nil {
			break
		}

		args, err := ec.field_Query_app_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.App(childComplexity, args["name"].(*string)), true

	case "Query.appQuotaExist":
		if e.complexity.Query.AppQuotaExist == nil {
			break
		}

		return e.complexity.Query.AppQuotaExist(childComplexity), true

	case "Query.appStatusList":
		if e.complexity.Query.AppStatusList == nil {
			break
		}

		args, err := ec.field_Query_appStatusList_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppStatusList(childComplexity, args["status"].(*string)), true

	case "Query.appcompact":
		if e.complexity.Query.Appcompact == nil {
			break
		}

		args, err := ec.field_Query_appcompact_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Appcompact(childComplexity, args["name"].(*string)), true

	case "Query.apps":
		if e.complexity.Query.Apps == nil {
			break
		}

		args, err := ec.field_Query_apps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Apps(childComplexity, args["type"].(*string), args["first"].(*int), args["region"].(*string), args["orgSlug"].(*string)), true

	case "Query.appsBusinessUnit":
		if e.complexity.Query.AppsBusinessUnit == nil {
			break
		}

		args, err := ec.field_Query_appsBusinessUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppsBusinessUnit(childComplexity, args["type"].(*string), args["first"].(*int), args["region"].(*string), args["businessUnit"].(*string)), true

	case "Query.AppsCount":
		if e.complexity.Query.AppsCount == nil {
			break
		}

		return e.complexity.Query.AppsCount(childComplexity), true

	case "Query.appsSubOrg":
		if e.complexity.Query.AppsSubOrg == nil {
			break
		}

		args, err := ec.field_Query_appsSubOrg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppsSubOrg(childComplexity, args["type"].(*string), args["first"].(*int), args["region"].(*string), args["subOrgSlug"].(*string)), true

	case "Query.appsWorkload":
		if e.complexity.Query.AppsWorkload == nil {
			break
		}

		args, err := ec.field_Query_appsWorkload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppsWorkload(childComplexity, args["name"].(*string), args["organiztionId"].(*string)), true

	case "Query.appsWorkloadIdOrUserRole":
		if e.complexity.Query.AppsWorkloadIDOrUserRole == nil {
			break
		}

		args, err := ec.field_Query_appsWorkloadIdOrUserRole_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.AppsWorkloadIDOrUserRole(childComplexity, args["workloadId"].(*string), args["userId"].(*string)), true

	case "Query.businessUnitList":
		if e.complexity.Query.BusinessUnitList == nil {
			break
		}

		return e.complexity.Query.BusinessUnitList(childComplexity), true

	case "Query.checkAppById":
		if e.complexity.Query.CheckAppByID == nil {
			break
		}

		args, err := ec.field_Query_checkAppById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.CheckAppByID(childComplexity, args["name"].(string)), true

	case "Query.currentUser":
		if e.complexity.Query.CurrentUser == nil {
			break
		}

		return e.complexity.Query.CurrentUser(childComplexity), true

	case "Query.getAllParentOrganizations":
		if e.complexity.Query.GetAllParentOrganizations == nil {
			break
		}

		return e.complexity.Query.GetAllParentOrganizations(childComplexity), true

	case "Query.getAllS3deployments":
		if e.complexity.Query.GetAllS3deployments == nil {
			break
		}

		return e.complexity.Query.GetAllS3deployments(childComplexity), true

	case "Query.GetAppByAppId":
		if e.complexity.Query.GetAppByAppID == nil {
			break
		}

		args, err := ec.field_Query_GetAppByAppId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAppByAppID(childComplexity, args["id"].(*string)), true

	case "Query.getAppByRegionCount":
		if e.complexity.Query.GetAppByRegionCount == nil {
			break
		}

		return e.complexity.Query.GetAppByRegionCount(childComplexity), true

	case "Query.getAppRegion":
		if e.complexity.Query.GetAppRegion == nil {
			break
		}

		args, err := ec.field_Query_getAppRegion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAppRegion(childComplexity, args["name"].(string), args["status"].(string)), true

	case "Query.GetAppTemplates":
		if e.complexity.Query.GetAppTemplates == nil {
			break
		}

		return e.complexity.Query.GetAppTemplates(childComplexity), true

	case "Query.GetAppsAndOrgsCountDetails":
		if e.complexity.Query.GetAppsAndOrgsCountDetails == nil {
			break
		}

		return e.complexity.Query.GetAppsAndOrgsCountDetails(childComplexity), true

	case "Query.GetAppsAndOrgsandSubOrgCountDetails":
		if e.complexity.Query.GetAppsAndOrgsandSubOrgCountDetails == nil {
			break
		}

		return e.complexity.Query.GetAppsAndOrgsandSubOrgCountDetails(childComplexity), true

	case "Query.getAvailabilityCluster":
		if e.complexity.Query.GetAvailabilityCluster == nil {
			break
		}

		args, err := ec.field_Query_getAvailabilityCluster_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailabilityCluster(childComplexity, args["isLatency"].(*string), args["first"].(*int)), true

	case "Query.GetAvailableBuiltIn":
		if e.complexity.Query.GetAvailableBuiltIn == nil {
			break
		}

		args, err := ec.field_Query_GetAvailableBuiltIn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetAvailableBuiltIn(childComplexity, args["first"].(*int)), true

	case "Query.getBusinessUnit":
		if e.complexity.Query.GetBusinessUnit == nil {
			break
		}

		args, err := ec.field_Query_getBusinessUnit_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessUnit(childComplexity, args["orgId"].(string), args["subOrgId"].(string)), true

	case "Query.getBusinessUnitById":
		if e.complexity.Query.GetBusinessUnitByID == nil {
			break
		}

		args, err := ec.field_Query_getBusinessUnitById_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessUnitByID(childComplexity, args["name"].(*string)), true

	case "Query.getBusinessUnitByOrgId":
		if e.complexity.Query.GetBusinessUnitByOrgID == nil {
			break
		}

		args, err := ec.field_Query_getBusinessUnitByOrgId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetBusinessUnitByOrgID(childComplexity, args["orgId"].(*string), args["subOrgId"].(*string)), true

	case "Query.getCloudRegions":
		if e.complexity.Query.GetCloudRegions == nil {
			break
		}

		args, err := ec.field_Query_getCloudRegions_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetCloudRegions(childComplexity, args["type"].(*string)), true

	case "Query.getClusterDetails":
		if e.complexity.Query.GetClusterDetails == nil {
			break
		}

		args, err := ec.field_Query_getClusterDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClusterDetails(childComplexity, args["regCode"].(*string)), true

	case "Query.getClusterDetailsByOrgId":
		if e.complexity.Query.GetClusterDetailsByOrgID == nil {
			break
		}

		args, err := ec.field_Query_getClusterDetailsByOrgId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClusterDetailsByOrgID(childComplexity, args["orgId"].(*string)), true

	case "Query.getClusterDetailsByOrgIdMultipleReg":
		if e.complexity.Query.GetClusterDetailsByOrgIDMultipleReg == nil {
			break
		}

		args, err := ec.field_Query_getClusterDetailsByOrgIdMultipleReg_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetClusterDetailsByOrgIDMultipleReg(childComplexity, args["orgId"].(*string)), true

	case "Query.getDataDogByUserId":
		if e.complexity.Query.GetDataDogByUserID == nil {
			break
		}

		return e.complexity.Query.GetDataDogByUserID(childComplexity), true

	case "Query.getDuploStatus":
		if e.complexity.Query.GetDuploStatus == nil {
			break
		}

		args, err := ec.field_Query_getDuploStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetDuploStatus(childComplexity, args["appName"].(*string)), true

	case "Query.getElbUrl":
		if e.complexity.Query.GetElbURL == nil {
			break
		}

		args, err := ec.field_Query_getElbUrl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetElbURL(childComplexity, args["input"].(*model.ElbURLInput)), true

	case "Query.getHost":
		if e.complexity.Query.GetHost == nil {
			break
		}

		args, err := ec.field_Query_getHost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHost(childComplexity, args["orgId"].(*string)), true

	case "Query.getHostByName":
		if e.complexity.Query.GetHostByName == nil {
			break
		}

		args, err := ec.field_Query_getHostByName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetHostByName(childComplexity, args["instanceName"].(*string)), true

	case "Query.GetInviteUserCountByAdminUser":
		if e.complexity.Query.GetInviteUserCountByAdminUser == nil {
			break
		}

		return e.complexity.Query.GetInviteUserCountByAdminUser(childComplexity), true

	case "Query.getOrganizationByOrgId":
		if e.complexity.Query.GetOrganizationByOrgID == nil {
			break
		}

		args, err := ec.field_Query_getOrganizationByOrgId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetOrganizationByOrgID(childComplexity, args["id"].(string)), true

	case "Query.getParentIdBySubOrganization":
		if e.complexity.Query.GetParentIDBySubOrganization == nil {
			break
		}

		args, err := ec.field_Query_getParentIdBySubOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetParentIDBySubOrganization(childComplexity, args["subOrgId"].(*string)), true

	case "Query.getQueryLog":
		if e.complexity.Query.GetQueryLog == nil {
			break
		}

		args, err := ec.field_Query_getQueryLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetQueryLog(childComplexity, args["input"].(model.GetQueryLog)), true

	case "Query.getRegionStatus":
		if e.complexity.Query.GetRegionStatus == nil {
			break
		}

		args, err := ec.field_Query_getRegionStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRegionStatus(childComplexity, args["appId"].(string)), true

	case "Query.getRegistryByUser":
		if e.complexity.Query.GetRegistryByUser == nil {
			break
		}

		args, err := ec.field_Query_getRegistryByUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetRegistryByUser(childComplexity, args["orgId"].(string), args["regType"].(string)), true

	case "Query.getRequestedRegions":
		if e.complexity.Query.GetRequestedRegions == nil {
			break
		}

		return e.complexity.Query.GetRequestedRegions(childComplexity), true

	case "Query.getS3deployments":
		if e.complexity.Query.GetS3deployments == nil {
			break
		}

		args, err := ec.field_Query_getS3deployments_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetS3deployments(childComplexity, args["s3AppName"].(*string)), true

	case "Query.getSecret":
		if e.complexity.Query.GetSecret == nil {
			break
		}

		args, err := ec.field_Query_getSecret_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSecret(childComplexity, args["name"].(*string)), true

	case "Query.getSecretByRegistryId":
		if e.complexity.Query.GetSecretByRegistryID == nil {
			break
		}

		args, err := ec.field_Query_getSecretByRegistryId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetSecretByRegistryID(childComplexity, args["secretId"].(*string)), true

	case "Query.getUserAddedRegions":
		if e.complexity.Query.GetUserAddedRegions == nil {
			break
		}

		return e.complexity.Query.GetUserAddedRegions(childComplexity), true

	case "Query.getUserByAdmin":
		if e.complexity.Query.GetUserByAdmin == nil {
			break
		}

		return e.complexity.Query.GetUserByAdmin(childComplexity), true

	case "Query.getUserByAdminAndOrganization":
		if e.complexity.Query.GetUserByAdminAndOrganization == nil {
			break
		}

		args, err := ec.field_Query_getUserByAdminAndOrganization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserByAdminAndOrganization(childComplexity, args["organizationId"].(*string)), true

	case "Query.getUserById":
		if e.complexity.Query.GetUserByID == nil {
			break
		}

		return e.complexity.Query.GetUserByID(childComplexity), true

	case "Query.getUserByOrganizationId":
		if e.complexity.Query.GetUserByOrganizationID == nil {
			break
		}

		args, err := ec.field_Query_getUserByOrganizationId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetUserByOrganizationID(childComplexity, args["organizationId"].(*string)), true

	case "Query.getUserPAT":
		if e.complexity.Query.GetUserPat == nil {
			break
		}

		return e.complexity.Query.GetUserPat(childComplexity), true

	case "Query.getUserPermissions":
		if e.complexity.Query.GetUserPermissions == nil {
			break
		}

		return e.complexity.Query.GetUserPermissions(childComplexity), true

	case "Query.getUserPermissionsByPlan":
		if e.complexity.Query.GetUserPermissionsByPlan == nil {
			break
		}

		return e.complexity.Query.GetUserPermissionsByPlan(childComplexity), true

	case "Query.getVolumeByAppId":
		if e.complexity.Query.GetVolumeByAppID == nil {
			break
		}

		args, err := ec.field_Query_getVolumeByAppId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetVolumeByAppID(childComplexity, args["appId"].(*string)), true

	case "Query.getVolumeType":
		if e.complexity.Query.GetVolumeType == nil {
			break
		}

		return e.complexity.Query.GetVolumeType(childComplexity), true

	case "Query.getWorkloadMangementByUser":
		if e.complexity.Query.GetWorkloadMangementByUser == nil {
			break
		}

		return e.complexity.Query.GetWorkloadMangementByUser(childComplexity), true

	case "Query.getWorkloadMangementByWlId":
		if e.complexity.Query.GetWorkloadMangementByWlID == nil {
			break
		}

		args, err := ec.field_Query_getWorkloadMangementByWlId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWorkloadMangementByWlID(childComplexity, args["workloadId"].(*string)), true

	case "Query.getWorkloadMangementByWlName":
		if e.complexity.Query.GetWorkloadMangementByWlName == nil {
			break
		}

		args, err := ec.field_Query_getWorkloadMangementByWlName_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWorkloadMangementByWlName(childComplexity, args["workloadName"].(*string)), true

	case "Query.getWorkloadMangementByorgnizationId":
		if e.complexity.Query.GetWorkloadMangementByorgnizationID == nil {
			break
		}

		args, err := ec.field_Query_getWorkloadMangementByorgnizationId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWorkloadMangementByorgnizationID(childComplexity, args["orgId"].(*string), args["subOrgId"].(*string), args["businessUnitId"].(*string)), true

	case "Query.getWorkloadRegion":
		if e.complexity.Query.GetWorkloadRegion == nil {
			break
		}

		args, err := ec.field_Query_getWorkloadRegion_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetWorkloadRegion(childComplexity, args["workloadId"].(string)), true

	case "Query.getclusterLog":
		if e.complexity.Query.GetclusterLog == nil {
			break
		}

		args, err := ec.field_Query_getclusterLog_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetclusterLog(childComplexity, args["appName"].(*string), args["region"].(*string)), true

	case "Query.getpricelist":
		if e.complexity.Query.Getpricelist == nil {
			break
		}

		return e.complexity.Query.Getpricelist(childComplexity), true

	case "Query.organization":
		if e.complexity.Query.Organization == nil {
			break
		}

		args, err := ec.field_Query_organization_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Organization(childComplexity, args["slug"].(string)), true

	case "Query.organizationRegistryType":
		if e.complexity.Query.OrganizationRegistryType == nil {
			break
		}

		return e.complexity.Query.OrganizationRegistryType(childComplexity), true

	case "Query.organizations":
		if e.complexity.Query.Organizations == nil {
			break
		}

		return e.complexity.Query.Organizations(childComplexity), true

	case "Query.organizationsandBusinessUnit":
		if e.complexity.Query.OrganizationsandBusinessUnit == nil {
			break
		}

		return e.complexity.Query.OrganizationsandBusinessUnit(childComplexity), true

	case "Query.platform":
		if e.complexity.Query.Platform == nil {
			break
		}

		return e.complexity.Query.Platform(childComplexity), true

	case "Query.subOrganizations":
		if e.complexity.Query.SubOrganizations == nil {
			break
		}

		return e.complexity.Query.SubOrganizations(childComplexity), true

	case "Query.subOrganizationsByParentId":
		if e.complexity.Query.SubOrganizationsByParentID == nil {
			break
		}

		args, err := ec.field_Query_subOrganizationsByParentId_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.SubOrganizationsByParentID(childComplexity, args["parentOrgId"].(*string)), true

	case "Query.userActivities":
		if e.complexity.Query.UserActivities == nil {
			break
		}

		args, err := ec.field_Query_userActivities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserActivities(childComplexity, args["first"].(*int)), true

	case "Query.userActivitiesByDate":
		if e.complexity.Query.UserActivitiesByDate == nil {
			break
		}

		args, err := ec.field_Query_userActivitiesByDate_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserActivitiesByDate(childComplexity, args["startDate"].(*string), args["endDate"].(*string)), true

	case "Query.userDeploymentCountDetails":
		if e.complexity.Query.UserDeploymentCountDetails == nil {
			break
		}

		args, err := ec.field_Query_userDeploymentCountDetails_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserDeploymentCountDetails(childComplexity, args["startDate"].(*string), args["endDate"].(*string)), true

	case "Query.userMetrics":
		if e.complexity.Query.UserMetrics == nil {
			break
		}

		args, err := ec.field_Query_userMetrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UserMetrics(childComplexity, args["appName"].(*string)), true

	case "QueryLogOutput.id":
		if e.complexity.QueryLogOutput.ID == nil {
			break
		}

		return e.complexity.QueryLogOutput.ID(childComplexity), true

	case "QueryLogOutput.lastSyncTime":
		if e.complexity.QueryLogOutput.LastSyncTime == nil {
			break
		}

		return e.complexity.QueryLogOutput.LastSyncTime(childComplexity), true

	case "QueryLogOutput.message":
		if e.complexity.QueryLogOutput.Message == nil {
			break
		}

		return e.complexity.QueryLogOutput.Message(childComplexity), true

	case "QueryLogOutput.queryName":
		if e.complexity.QueryLogOutput.QueryName == nil {
			break
		}

		return e.complexity.QueryLogOutput.QueryName(childComplexity), true

	case "QueryLogOutput.resolverIp":
		if e.complexity.QueryLogOutput.ResolverIP == nil {
			break
		}

		return e.complexity.QueryLogOutput.ResolverIP(childComplexity), true

	case "QueryLogOutput.responseCode":
		if e.complexity.QueryLogOutput.ResponseCode == nil {
			break
		}

		return e.complexity.QueryLogOutput.ResponseCode(childComplexity), true

	case "QueryLogOutput.timeStamp":
		if e.complexity.QueryLogOutput.TimeStamp == nil {
			break
		}

		return e.complexity.QueryLogOutput.TimeStamp(childComplexity), true

	case "QueryLogOutput.times":
		if e.complexity.QueryLogOutput.Times == nil {
			break
		}

		return e.complexity.QueryLogOutput.Times(childComplexity), true

	case "ReDeploymentCountByDate.date":
		if e.complexity.ReDeploymentCountByDate.Date == nil {
			break
		}

		return e.complexity.ReDeploymentCountByDate.Date(childComplexity), true

	case "ReDeploymentCountByDate.reDeployed":
		if e.complexity.ReDeploymentCountByDate.ReDeployed == nil {
			break
		}

		return e.complexity.ReDeploymentCountByDate.ReDeployed(childComplexity), true

	case "Region.code":
		if e.complexity.Region.Code == nil {
			break
		}

		return e.complexity.Region.Code(childComplexity), true

	case "Region.latitude":
		if e.complexity.Region.Latitude == nil {
			break
		}

		return e.complexity.Region.Latitude(childComplexity), true

	case "Region.longitude":
		if e.complexity.Region.Longitude == nil {
			break
		}

		return e.complexity.Region.Longitude(childComplexity), true

	case "Region.name":
		if e.complexity.Region.Name == nil {
			break
		}

		return e.complexity.Region.Name(childComplexity), true

	case "RegionDetails.clusterType":
		if e.complexity.RegionDetails.ClusterType == nil {
			break
		}

		return e.complexity.RegionDetails.ClusterType(childComplexity), true

	case "RegionDetails.isDefault":
		if e.complexity.RegionDetails.IsDefault == nil {
			break
		}

		return e.complexity.RegionDetails.IsDefault(childComplexity), true

	case "RegionDetails.regCode":
		if e.complexity.RegionDetails.RegCode == nil {
			break
		}

		return e.complexity.RegionDetails.RegCode(childComplexity), true

	case "RegionDetails.regionName":
		if e.complexity.RegionDetails.RegionName == nil {
			break
		}

		return e.complexity.RegionDetails.RegionName(childComplexity), true

	case "RegionStatus.appUrl":
		if e.complexity.RegionStatus.AppURL == nil {
			break
		}

		return e.complexity.RegionStatus.AppURL(childComplexity), true

	case "RegionStatus.deploymentId":
		if e.complexity.RegionStatus.DeploymentID == nil {
			break
		}

		return e.complexity.RegionStatus.DeploymentID(childComplexity), true

	case "RegionStatus.elbRecordId":
		if e.complexity.RegionStatus.ElbRecordID == nil {
			break
		}

		return e.complexity.RegionStatus.ElbRecordID(childComplexity), true

	case "RegionStatus.elbRecordName":
		if e.complexity.RegionStatus.ElbRecordName == nil {
			break
		}

		return e.complexity.RegionStatus.ElbRecordName(childComplexity), true

	case "RegionStatus.id":
		if e.complexity.RegionStatus.ID == nil {
			break
		}

		return e.complexity.RegionStatus.ID(childComplexity), true

	case "RegionStatus.port":
		if e.complexity.RegionStatus.Port == nil {
			break
		}

		return e.complexity.RegionStatus.Port(childComplexity), true

	case "RegionStatus.regionCode":
		if e.complexity.RegionStatus.RegionCode == nil {
			break
		}

		return e.complexity.RegionStatus.RegionCode(childComplexity), true

	case "RegionStatus.releaseId":
		if e.complexity.RegionStatus.ReleaseID == nil {
			break
		}

		return e.complexity.RegionStatus.ReleaseID(childComplexity), true

	case "RegionStatus.status":
		if e.complexity.RegionStatus.Status == nil {
			break
		}

		return e.complexity.RegionStatus.Status(childComplexity), true

	case "RegionStatusNodes.nodes":
		if e.complexity.RegionStatusNodes.Nodes == nil {
			break
		}

		return e.complexity.RegionStatusNodes.Nodes(childComplexity), true

	case "Regions.regions":
		if e.complexity.Regions.Regions == nil {
			break
		}

		return e.complexity.Regions.Regions(childComplexity), true

	case "Registry.email":
		if e.complexity.Registry.Email == nil {
			break
		}

		return e.complexity.Registry.Email(childComplexity), true

	case "Registry.isDefault":
		if e.complexity.Registry.IsDefault == nil {
			break
		}

		return e.complexity.Registry.IsDefault(childComplexity), true

	case "Registry.organization_id":
		if e.complexity.Registry.OrganizationID == nil {
			break
		}

		return e.complexity.Registry.OrganizationID(childComplexity), true

	case "Registry.password":
		if e.complexity.Registry.Password == nil {
			break
		}

		return e.complexity.Registry.Password(childComplexity), true

	case "Registry.repo_type":
		if e.complexity.Registry.RepoType == nil {
			break
		}

		return e.complexity.Registry.RepoType(childComplexity), true

	case "Registry.secret_name":
		if e.complexity.Registry.SecretName == nil {
			break
		}

		return e.complexity.Registry.SecretName(childComplexity), true

	case "Registry.server":
		if e.complexity.Registry.Server == nil {
			break
		}

		return e.complexity.Registry.Server(childComplexity), true

	case "Registry.username":
		if e.complexity.Registry.Username == nil {
			break
		}

		return e.complexity.Registry.Username(childComplexity), true

	case "Release.archiveUrl":
		if e.complexity.Release.ArchiveURL == nil {
			break
		}

		return e.complexity.Release.ArchiveURL(childComplexity), true

	case "Release.builderType":
		if e.complexity.Release.BuilderType == nil {
			break
		}

		return e.complexity.Release.BuilderType(childComplexity), true

	case "Release.createdAt":
		if e.complexity.Release.CreatedAt == nil {
			break
		}

		return e.complexity.Release.CreatedAt(childComplexity), true

	case "Release.deployment":
		if e.complexity.Release.Deployment == nil {
			break
		}

		return e.complexity.Release.Deployment(childComplexity), true

	case "Release.deploymentStrategy":
		if e.complexity.Release.DeploymentStrategy == nil {
			break
		}

		return e.complexity.Release.DeploymentStrategy(childComplexity), true

	case "Release.description":
		if e.complexity.Release.Description == nil {
			break
		}

		return e.complexity.Release.Description(childComplexity), true

	case "Release.id":
		if e.complexity.Release.ID == nil {
			break
		}

		return e.complexity.Release.ID(childComplexity), true

	case "Release.image":
		if e.complexity.Release.Image == nil {
			break
		}

		return e.complexity.Release.Image(childComplexity), true

	case "Release.inProgress":
		if e.complexity.Release.InProgress == nil {
			break
		}

		return e.complexity.Release.InProgress(childComplexity), true

	case "Release.port":
		if e.complexity.Release.Port == nil {
			break
		}

		return e.complexity.Release.Port(childComplexity), true

	case "Release.reason":
		if e.complexity.Release.Reason == nil {
			break
		}

		return e.complexity.Release.Reason(childComplexity), true

	case "Release.routingPolicy":
		if e.complexity.Release.RoutingPolicy == nil {
			break
		}

		return e.complexity.Release.RoutingPolicy(childComplexity), true

	case "Release.stable":
		if e.complexity.Release.Stable == nil {
			break
		}

		return e.complexity.Release.Stable(childComplexity), true

	case "Release.status":
		if e.complexity.Release.Status == nil {
			break
		}

		return e.complexity.Release.Status(childComplexity), true

	case "Release.user":
		if e.complexity.Release.User == nil {
			break
		}

		return e.complexity.Release.User(childComplexity), true

	case "Release.version":
		if e.complexity.Release.Version == nil {
			break
		}

		return e.complexity.Release.Version(childComplexity), true

	case "Releases.nodes":
		if e.complexity.Releases.Nodes == nil {
			break
		}

		return e.complexity.Releases.Nodes(childComplexity), true

	case "RequestedRegions.createdAt":
		if e.complexity.RequestedRegions.CreatedAt == nil {
			break
		}

		return e.complexity.RequestedRegions.CreatedAt(childComplexity), true

	case "RequestedRegions.createdBy":
		if e.complexity.RequestedRegions.CreatedBy == nil {
			break
		}

		return e.complexity.RequestedRegions.CreatedBy(childComplexity), true

	case "RequestedRegions.id":
		if e.complexity.RequestedRegions.ID == nil {
			break
		}

		return e.complexity.RequestedRegions.ID(childComplexity), true

	case "RequestedRegions.requestedRegion":
		if e.complexity.RequestedRegions.RequestedRegion == nil {
			break
		}

		return e.complexity.RequestedRegions.RequestedRegion(childComplexity), true

	case "RequestedRegions.status":
		if e.complexity.RequestedRegions.Status == nil {
			break
		}

		return e.complexity.RequestedRegions.Status(childComplexity), true

	case "RequestedRegions.userName":
		if e.complexity.RequestedRegions.UserName == nil {
			break
		}

		return e.complexity.RequestedRegions.UserName(childComplexity), true

	case "RequestedRegionsResponse.alreadyRequestedRegions":
		if e.complexity.RequestedRegionsResponse.AlreadyRequestedRegions == nil {
			break
		}

		return e.complexity.RequestedRegionsResponse.AlreadyRequestedRegions(childComplexity), true

	case "RequestedRegionsResponse.message":
		if e.complexity.RequestedRegionsResponse.Message == nil {
			break
		}

		return e.complexity.RequestedRegionsResponse.Message(childComplexity), true

	case "RequestedRegionsResponse.requestedRegions":
		if e.complexity.RequestedRegionsResponse.RequestedRegions == nil {
			break
		}

		return e.complexity.RequestedRegionsResponse.RequestedRegions(childComplexity), true

	case "Requirement.LimitRequirement":
		if e.complexity.Requirement.LimitRequirement == nil {
			break
		}

		return e.complexity.Requirement.LimitRequirement(childComplexity), true

	case "Requirement.requestRequirement":
		if e.complexity.Requirement.RequestRequirement == nil {
			break
		}

		return e.complexity.Requirement.RequestRequirement(childComplexity), true

	case "RequirementProperties.cpu":
		if e.complexity.RequirementProperties.CPU == nil {
			break
		}

		return e.complexity.RequirementProperties.CPU(childComplexity), true

	case "RequirementProperties.memory":
		if e.complexity.RequirementProperties.Memory == nil {
			break
		}

		return e.complexity.RequirementProperties.Memory(childComplexity), true

	case "Response.message":
		if e.complexity.Response.Message == nil {
			break
		}

		return e.complexity.Response.Message(childComplexity), true

	case "RestartApp.app":
		if e.complexity.RestartApp.App == nil {
			break
		}

		return e.complexity.RestartApp.App(childComplexity), true

	case "ResumeApp.app":
		if e.complexity.ResumeApp.App == nil {
			break
		}

		return e.complexity.ResumeApp.App(childComplexity), true

	case "S3BuildCommand.s3Cmd":
		if e.complexity.S3BuildCommand.S3Cmd == nil {
			break
		}

		return e.complexity.S3BuildCommand.S3Cmd(childComplexity), true

	case "S3Deployments.appUrl":
		if e.complexity.S3Deployments.AppURL == nil {
			break
		}

		return e.complexity.S3Deployments.AppURL(childComplexity), true

	case "S3Deployments.buildCommandsS3":
		if e.complexity.S3Deployments.BuildCommandsS3 == nil {
			break
		}

		return e.complexity.S3Deployments.BuildCommandsS3(childComplexity), true

	case "S3Deployments.buildTime":
		if e.complexity.S3Deployments.BuildTime == nil {
			break
		}

		return e.complexity.S3Deployments.BuildTime(childComplexity), true

	case "S3Deployments.createdAt":
		if e.complexity.S3Deployments.CreatedAt == nil {
			break
		}

		return e.complexity.S3Deployments.CreatedAt(childComplexity), true

	case "S3Deployments.createdBy":
		if e.complexity.S3Deployments.CreatedBy == nil {
			break
		}

		return e.complexity.S3Deployments.CreatedBy(childComplexity), true

	case "S3Deployments.deploymentTime":
		if e.complexity.S3Deployments.DeploymentTime == nil {
			break
		}

		return e.complexity.S3Deployments.DeploymentTime(childComplexity), true

	case "S3Deployments.envVariablesS3":
		if e.complexity.S3Deployments.EnvVariablesS3 == nil {
			break
		}

		return e.complexity.S3Deployments.EnvVariablesS3(childComplexity), true

	case "S3Deployments.id":
		if e.complexity.S3Deployments.ID == nil {
			break
		}

		return e.complexity.S3Deployments.ID(childComplexity), true

	case "S3Deployments.orgDetails":
		if e.complexity.S3Deployments.OrgDetails == nil {
			break
		}

		return e.complexity.S3Deployments.OrgDetails(childComplexity), true

	case "S3Deployments.organizationId":
		if e.complexity.S3Deployments.OrganizationID == nil {
			break
		}

		return e.complexity.S3Deployments.OrganizationID(childComplexity), true

	case "S3Deployments.s3AppName":
		if e.complexity.S3Deployments.S3AppName == nil {
			break
		}

		return e.complexity.S3Deployments.S3AppName(childComplexity), true

	case "S3Deployments.status":
		if e.complexity.S3Deployments.Status == nil {
			break
		}

		return e.complexity.S3Deployments.Status(childComplexity), true

	case "S3Deployments.userDetails":
		if e.complexity.S3Deployments.UserDetails == nil {
			break
		}

		return e.complexity.S3Deployments.UserDetails(childComplexity), true

	case "S3EnvVariable.name":
		if e.complexity.S3EnvVariable.Name == nil {
			break
		}

		return e.complexity.S3EnvVariable.Name(childComplexity), true

	case "S3EnvVariable.value":
		if e.complexity.S3EnvVariable.Value == nil {
			break
		}

		return e.complexity.S3EnvVariable.Value(childComplexity), true

	case "Secret.createdAt":
		if e.complexity.Secret.CreatedAt == nil {
			break
		}

		return e.complexity.Secret.CreatedAt(childComplexity), true

	case "Secret.digest":
		if e.complexity.Secret.Digest == nil {
			break
		}

		return e.complexity.Secret.Digest(childComplexity), true

	case "Secret.name":
		if e.complexity.Secret.Name == nil {
			break
		}

		return e.complexity.Secret.Name(childComplexity), true

	case "Service.checks":
		if e.complexity.Service.Checks == nil {
			break
		}

		return e.complexity.Service.Checks(childComplexity), true

	case "Service.description":
		if e.complexity.Service.Description == nil {
			break
		}

		return e.complexity.Service.Description(childComplexity), true

	case "Service.hardConcurrency":
		if e.complexity.Service.HardConcurrency == nil {
			break
		}

		return e.complexity.Service.HardConcurrency(childComplexity), true

	case "Service.internalPort":
		if e.complexity.Service.InternalPort == nil {
			break
		}

		return e.complexity.Service.InternalPort(childComplexity), true

	case "Service.ports":
		if e.complexity.Service.Ports == nil {
			break
		}

		return e.complexity.Service.Ports(childComplexity), true

	case "Service.protocol":
		if e.complexity.Service.Protocol == nil {
			break
		}

		return e.complexity.Service.Protocol(childComplexity), true

	case "Service.softConcurrency":
		if e.complexity.Service.SoftConcurrency == nil {
			break
		}

		return e.complexity.Service.SoftConcurrency(childComplexity), true

	case "StartBuild.build":
		if e.complexity.StartBuild.Build == nil {
			break
		}

		return e.complexity.StartBuild.Build(childComplexity), true

	case "StartBuild.buildLogs":
		if e.complexity.StartBuild.BuildLogs == nil {
			break
		}

		return e.complexity.StartBuild.BuildLogs(childComplexity), true

	case "StripeSubscription.accessToken":
		if e.complexity.StripeSubscription.AccessToken == nil {
			break
		}

		return e.complexity.StripeSubscription.AccessToken(childComplexity), true

	case "StripeSubscription.customerId":
		if e.complexity.StripeSubscription.CustomerID == nil {
			break
		}

		return e.complexity.StripeSubscription.CustomerID(childComplexity), true

	case "StripeSubscription.customerSubscriptionId":
		if e.complexity.StripeSubscription.CustomerSubscriptionID == nil {
			break
		}

		return e.complexity.StripeSubscription.CustomerSubscriptionID(childComplexity), true

	case "StripeSubscription.defaultPaymentMethodid":
		if e.complexity.StripeSubscription.DefaultPaymentMethodid == nil {
			break
		}

		return e.complexity.StripeSubscription.DefaultPaymentMethodid(childComplexity), true

	case "StripeSubscription.email":
		if e.complexity.StripeSubscription.Email == nil {
			break
		}

		return e.complexity.StripeSubscription.Email(childComplexity), true

	case "StripeSubscription.name":
		if e.complexity.StripeSubscription.Name == nil {
			break
		}

		return e.complexity.StripeSubscription.Name(childComplexity), true

	case "StripeSubscription.planId":
		if e.complexity.StripeSubscription.PlanID == nil {
			break
		}

		return e.complexity.StripeSubscription.PlanID(childComplexity), true

	case "StripeSubscription.price":
		if e.complexity.StripeSubscription.Price == nil {
			break
		}

		return e.complexity.StripeSubscription.Price(childComplexity), true

	case "StripeSubscription.priceId":
		if e.complexity.StripeSubscription.PriceID == nil {
			break
		}

		return e.complexity.StripeSubscription.PriceID(childComplexity), true

	case "StripeSubscription.status":
		if e.complexity.StripeSubscription.Status == nil {
			break
		}

		return e.complexity.StripeSubscription.Status(childComplexity), true

	case "StripeSubscription.userID":
		if e.complexity.StripeSubscription.UserID == nil {
			break
		}

		return e.complexity.StripeSubscription.UserID(childComplexity), true

	case "SubOrgCount.businessUnit":
		if e.complexity.SubOrgCount.BusinessUnit == nil {
			break
		}

		return e.complexity.SubOrgCount.BusinessUnit(childComplexity), true

	case "SubOrgCount.subOrganizationCount":
		if e.complexity.SubOrgCount.SubOrganizationCount == nil {
			break
		}

		return e.complexity.SubOrgCount.SubOrganizationCount(childComplexity), true

	case "SubOrganization.domains":
		if e.complexity.SubOrganization.Domains == nil {
			break
		}

		return e.complexity.SubOrganization.Domains(childComplexity), true

	case "SubOrganization.id":
		if e.complexity.SubOrganization.ID == nil {
			break
		}

		return e.complexity.SubOrganization.ID(childComplexity), true

	case "SubOrganization.isActive":
		if e.complexity.SubOrganization.IsActive == nil {
			break
		}

		return e.complexity.SubOrganization.IsActive(childComplexity), true

	case "SubOrganization.name":
		if e.complexity.SubOrganization.Name == nil {
			break
		}

		return e.complexity.SubOrganization.Name(childComplexity), true

	case "SubOrganization.region":
		if e.complexity.SubOrganization.Region == nil {
			break
		}

		return e.complexity.SubOrganization.Region(childComplexity), true

	case "SubOrganization.slug":
		if e.complexity.SubOrganization.Slug == nil {
			break
		}

		return e.complexity.SubOrganization.Slug(childComplexity), true

	case "SubOrganization.type":
		if e.complexity.SubOrganization.Type == nil {
			break
		}

		return e.complexity.SubOrganization.Type(childComplexity), true

	case "SuspendApp.app":
		if e.complexity.SuspendApp.App == nil {
			break
		}

		return e.complexity.SuspendApp.App(childComplexity), true

	case "TokenValidation.refreshToken":
		if e.complexity.TokenValidation.RefreshToken == nil {
			break
		}

		return e.complexity.TokenValidation.RefreshToken(childComplexity), true

	case "UpdateAppConfig.appId":
		if e.complexity.UpdateAppConfig.AppID == nil {
			break
		}

		return e.complexity.UpdateAppConfig.AppID(childComplexity), true

	case "UpdateAppConfig.appName":
		if e.complexity.UpdateAppConfig.AppName == nil {
			break
		}

		return e.complexity.UpdateAppConfig.AppName(childComplexity), true

	case "UpdateAppConfig.externalPort":
		if e.complexity.UpdateAppConfig.ExternalPort == nil {
			break
		}

		return e.complexity.UpdateAppConfig.ExternalPort(childComplexity), true

	case "UpdateAppConfig.image":
		if e.complexity.UpdateAppConfig.Image == nil {
			break
		}

		return e.complexity.UpdateAppConfig.Image(childComplexity), true

	case "UpdateAppConfig.internalPort":
		if e.complexity.UpdateAppConfig.InternalPort == nil {
			break
		}

		return e.complexity.UpdateAppConfig.InternalPort(childComplexity), true

	case "UpdateAppConfig.version":
		if e.complexity.UpdateAppConfig.Version == nil {
			break
		}

		return e.complexity.UpdateAppConfig.Version(childComplexity), true

	case "UpdateImageOutput.message":
		if e.complexity.UpdateImageOutput.Message == nil {
			break
		}

		return e.complexity.UpdateImageOutput.Message(childComplexity), true

	case "UpdateUser.companyName":
		if e.complexity.UpdateUser.CompanyName == nil {
			break
		}

		return e.complexity.UpdateUser.CompanyName(childComplexity), true

	case "UpdateUser.industry":
		if e.complexity.UpdateUser.Industry == nil {
			break
		}

		return e.complexity.UpdateUser.Industry(childComplexity), true

	case "UpdateUser.location":
		if e.complexity.UpdateUser.Location == nil {
			break
		}

		return e.complexity.UpdateUser.Location(childComplexity), true

	case "UpdateUser.phoneNumber":
		if e.complexity.UpdateUser.PhoneNumber == nil {
			break
		}

		return e.complexity.UpdateUser.PhoneNumber(childComplexity), true

	case "UpdateUser.updatedAt":
		if e.complexity.UpdateUser.UpdatedAt == nil {
			break
		}

		return e.complexity.UpdateUser.UpdatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "UserDeploymentDetailCount.companyName":
		if e.complexity.UserDeploymentDetailCount.CompanyName == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.CompanyName(childComplexity), true

	case "UserDeploymentDetailCount.deployData":
		if e.complexity.UserDeploymentDetailCount.DeployData == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.DeployData(childComplexity), true

	case "UserDeploymentDetailCount.email":
		if e.complexity.UserDeploymentDetailCount.Email == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.Email(childComplexity), true

	case "UserDeploymentDetailCount.reDeployData":
		if e.complexity.UserDeploymentDetailCount.ReDeployData == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.ReDeployData(childComplexity), true

	case "UserDeploymentDetailCount.roleId":
		if e.complexity.UserDeploymentDetailCount.RoleID == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.RoleID(childComplexity), true

	case "UserDeploymentDetailCount.totalDeployed":
		if e.complexity.UserDeploymentDetailCount.TotalDeployed == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.TotalDeployed(childComplexity), true

	case "UserDeploymentDetailCount.totalReDeployed":
		if e.complexity.UserDeploymentDetailCount.TotalReDeployed == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.TotalReDeployed(childComplexity), true

	case "UserDeploymentDetailCount.userName":
		if e.complexity.UserDeploymentDetailCount.UserName == nil {
			break
		}

		return e.complexity.UserDeploymentDetailCount.UserName(childComplexity), true

	case "VMSize.cPUCores":
		if e.complexity.VMSize.CPUCores == nil {
			break
		}

		return e.complexity.VMSize.CPUCores(childComplexity), true

	case "VMSize.memoryGb":
		if e.complexity.VMSize.MemoryGb == nil {
			break
		}

		return e.complexity.VMSize.MemoryGb(childComplexity), true

	case "VMSize.memoryMB":
		if e.complexity.VMSize.MemoryMb == nil {
			break
		}

		return e.complexity.VMSize.MemoryMb(childComplexity), true

	case "VMSize.name":
		if e.complexity.VMSize.Name == nil {
			break
		}

		return e.complexity.VMSize.Name(childComplexity), true

	case "VMSize.priceMonth":
		if e.complexity.VMSize.PriceMonth == nil {
			break
		}

		return e.complexity.VMSize.PriceMonth(childComplexity), true

	case "VMSize.priceSecond":
		if e.complexity.VMSize.PriceSecond == nil {
			break
		}

		return e.complexity.VMSize.PriceSecond(childComplexity), true

	case "VmInstanceMessage.id":
		if e.complexity.VMInstanceMessage.ID == nil {
			break
		}

		return e.complexity.VMInstanceMessage.ID(childComplexity), true

	case "VmInstanceMessage.message":
		if e.complexity.VMInstanceMessage.Message == nil {
			break
		}

		return e.complexity.VMInstanceMessage.Message(childComplexity), true

	case "Volume.app":
		if e.complexity.Volume.App == nil {
			break
		}

		return e.complexity.Volume.App(childComplexity), true

	case "Volume.createdAt":
		if e.complexity.Volume.CreatedAt == nil {
			break
		}

		return e.complexity.Volume.CreatedAt(childComplexity), true

	case "Volume.id":
		if e.complexity.Volume.ID == nil {
			break
		}

		return e.complexity.Volume.ID(childComplexity), true

	case "Volume.name":
		if e.complexity.Volume.Name == nil {
			break
		}

		return e.complexity.Volume.Name(childComplexity), true

	case "Volume.region":
		if e.complexity.Volume.Region == nil {
			break
		}

		return e.complexity.Volume.Region(childComplexity), true

	case "Volume.sizeGb":
		if e.complexity.Volume.SizeGb == nil {
			break
		}

		return e.complexity.Volume.SizeGb(childComplexity), true

	case "VolumeByApp.accessMode":
		if e.complexity.VolumeByApp.AccessMode == nil {
			break
		}

		return e.complexity.VolumeByApp.AccessMode(childComplexity), true

	case "VolumeByApp.appId":
		if e.complexity.VolumeByApp.AppID == nil {
			break
		}

		return e.complexity.VolumeByApp.AppID(childComplexity), true

	case "VolumeByApp.containerPath":
		if e.complexity.VolumeByApp.ContainerPath == nil {
			break
		}

		return e.complexity.VolumeByApp.ContainerPath(childComplexity), true

	case "VolumeByApp.hostPath":
		if e.complexity.VolumeByApp.HostPath == nil {
			break
		}

		return e.complexity.VolumeByApp.HostPath(childComplexity), true

	case "VolumeByApp.isHostVolume":
		if e.complexity.VolumeByApp.IsHostVolume == nil {
			break
		}

		return e.complexity.VolumeByApp.IsHostVolume(childComplexity), true

	case "VolumeByApp.isRead":
		if e.complexity.VolumeByApp.IsRead == nil {
			break
		}

		return e.complexity.VolumeByApp.IsRead(childComplexity), true

	case "VolumeByApp.name":
		if e.complexity.VolumeByApp.Name == nil {
			break
		}

		return e.complexity.VolumeByApp.Name(childComplexity), true

	case "VolumeByApp.path":
		if e.complexity.VolumeByApp.Path == nil {
			break
		}

		return e.complexity.VolumeByApp.Path(childComplexity), true

	case "VolumeByApp.size":
		if e.complexity.VolumeByApp.Size == nil {
			break
		}

		return e.complexity.VolumeByApp.Size(childComplexity), true

	case "VolumeByApp.volumeTypeId":
		if e.complexity.VolumeByApp.VolumeTypeID == nil {
			break
		}

		return e.complexity.VolumeByApp.VolumeTypeID(childComplexity), true

	case "VolumeType.description":
		if e.complexity.VolumeType.Description == nil {
			break
		}

		return e.complexity.VolumeType.Description(childComplexity), true

	case "VolumeType.id":
		if e.complexity.VolumeType.ID == nil {
			break
		}

		return e.complexity.VolumeType.ID(childComplexity), true

	case "VolumeType.isHostVolume":
		if e.complexity.VolumeType.IsHostVolume == nil {
			break
		}

		return e.complexity.VolumeType.IsHostVolume(childComplexity), true

	case "VolumeType.isRead":
		if e.complexity.VolumeType.IsRead == nil {
			break
		}

		return e.complexity.VolumeType.IsRead(childComplexity), true

	case "VolumeType.name":
		if e.complexity.VolumeType.Name == nil {
			break
		}

		return e.complexity.VolumeType.Name(childComplexity), true

	case "Volumes.nodes":
		if e.complexity.Volumes.Nodes == nil {
			break
		}

		return e.complexity.Volumes.Nodes(childComplexity), true

	case "WorkLoadRegions.addedWorkLoadRegions":
		if e.complexity.WorkLoadRegions.AddedWorkLoadRegions == nil {
			break
		}

		return e.complexity.WorkLoadRegions.AddedWorkLoadRegions(childComplexity), true

	case "WorkLoadRegions.environmentEndpoint":
		if e.complexity.WorkLoadRegions.EnvironmentEndpoint == nil {
			break
		}

		return e.complexity.WorkLoadRegions.EnvironmentEndpoint(childComplexity), true

	case "WorkLoadRegions.environmentName":
		if e.complexity.WorkLoadRegions.EnvironmentName == nil {
			break
		}

		return e.complexity.WorkLoadRegions.EnvironmentName(childComplexity), true

	case "WorkLoadRegions.id":
		if e.complexity.WorkLoadRegions.ID == nil {
			break
		}

		return e.complexity.WorkLoadRegions.ID(childComplexity), true

	case "WorkLoadRegions.organizationId":
		if e.complexity.WorkLoadRegions.OrganizationID == nil {
			break
		}

		return e.complexity.WorkLoadRegions.OrganizationID(childComplexity), true

	case "WorkloadManagementList.apps":
		if e.complexity.WorkloadManagementList.Apps == nil {
			break
		}

		return e.complexity.WorkloadManagementList.Apps(childComplexity), true

	case "WorkloadManagementList.businessUnitId":
		if e.complexity.WorkloadManagementList.BusinessUnitID == nil {
			break
		}

		return e.complexity.WorkloadManagementList.BusinessUnitID(childComplexity), true

	case "WorkloadManagementList.createdAt":
		if e.complexity.WorkloadManagementList.CreatedAt == nil {
			break
		}

		return e.complexity.WorkloadManagementList.CreatedAt(childComplexity), true

	case "WorkloadManagementList.environmentEndpoint":
		if e.complexity.WorkloadManagementList.EnvironmentEndpoint == nil {
			break
		}

		return e.complexity.WorkloadManagementList.EnvironmentEndpoint(childComplexity), true

	case "WorkloadManagementList.environmentName":
		if e.complexity.WorkloadManagementList.EnvironmentName == nil {
			break
		}

		return e.complexity.WorkloadManagementList.EnvironmentName(childComplexity), true

	case "WorkloadManagementList.id":
		if e.complexity.WorkloadManagementList.ID == nil {
			break
		}

		return e.complexity.WorkloadManagementList.ID(childComplexity), true

	case "WorkloadManagementList.organizationId":
		if e.complexity.WorkloadManagementList.OrganizationID == nil {
			break
		}

		return e.complexity.WorkloadManagementList.OrganizationID(childComplexity), true

	case "WorkloadManagementList.organizationName":
		if e.complexity.WorkloadManagementList.OrganizationName == nil {
			break
		}

		return e.complexity.WorkloadManagementList.OrganizationName(childComplexity), true

	case "WorkloadManagementList.subOrganizationId":
		if e.complexity.WorkloadManagementList.SubOrganizationID == nil {
			break
		}

		return e.complexity.WorkloadManagementList.SubOrganizationID(childComplexity), true

	case "WorkloadManagementList.userId":
		if e.complexity.WorkloadManagementList.UserID == nil {
			break
		}

		return e.complexity.WorkloadManagementList.UserID(childComplexity), true

	case "appCount.active":
		if e.complexity.AppCount.Active == nil {
			break
		}

		return e.complexity.AppCount.Active(childComplexity), true

	case "appCount.inActive":
		if e.complexity.AppCount.InActive == nil {
			break
		}

		return e.complexity.AppCount.InActive(childComplexity), true

	case "appCount.new":
		if e.complexity.AppCount.New == nil {
			break
		}

		return e.complexity.AppCount.New(childComplexity), true

	case "appCount.region":
		if e.complexity.AppCount.Region == nil {
			break
		}

		return e.complexity.AppCount.Region(childComplexity), true

	case "appCount.terminated":
		if e.complexity.AppCount.Terminated == nil {
			break
		}

		return e.complexity.AppCount.Terminated(childComplexity), true

	case "appCount.totalApps":
		if e.complexity.AppCount.TotalApps == nil {
			break
		}

		return e.complexity.AppCount.TotalApps(childComplexity), true

	case "appCountsDetails.activeApps":
		if e.complexity.AppCountsDetails.ActiveApps == nil {
			break
		}

		return e.complexity.AppCountsDetails.ActiveApps(childComplexity), true

	case "appCountsDetails.deletedApps":
		if e.complexity.AppCountsDetails.DeletedApps == nil {
			break
		}

		return e.complexity.AppCountsDetails.DeletedApps(childComplexity), true

	case "businessUnitListInSubOrg.businessUnitUnderSubOrg":
		if e.complexity.BusinessUnitListInSubOrg.BusinessUnitUnderSubOrg == nil {
			break
		}

		return e.complexity.BusinessUnitListInSubOrg.BusinessUnitUnderSubOrg(childComplexity), true

	case "businessUnitListInSubOrg.subOrgId":
		if e.complexity.BusinessUnitListInSubOrg.SubOrgID == nil {
			break
		}

		return e.complexity.BusinessUnitListInSubOrg.SubOrgID(childComplexity), true

	case "businessUnitListInSubOrg.subOrgName":
		if e.complexity.BusinessUnitListInSubOrg.SubOrgName == nil {
			break
		}

		return e.complexity.BusinessUnitListInSubOrg.SubOrgName(childComplexity), true

	case "getBusinessUnit.id":
		if e.complexity.GetBusinessUnit.ID == nil {
			break
		}

		return e.complexity.GetBusinessUnit.ID(childComplexity), true

	case "getBusinessUnit.isActive":
		if e.complexity.GetBusinessUnit.IsActive == nil {
			break
		}

		return e.complexity.GetBusinessUnit.IsActive(childComplexity), true

	case "getBusinessUnit.name":
		if e.complexity.GetBusinessUnit.Name == nil {
			break
		}

		return e.complexity.GetBusinessUnit.Name(childComplexity), true

	case "listBusinessUnit.id":
		if e.complexity.ListBusinessUnit.ID == nil {
			break
		}

		return e.complexity.ListBusinessUnit.ID(childComplexity), true

	case "listBusinessUnit.name":
		if e.complexity.ListBusinessUnit.Name == nil {
			break
		}

		return e.complexity.ListBusinessUnit.Name(childComplexity), true

	case "listBusinessUnit.orgId":
		if e.complexity.ListBusinessUnit.OrgID == nil {
			break
		}

		return e.complexity.ListBusinessUnit.OrgID(childComplexity), true

	case "listBusinessUnit.orgName":
		if e.complexity.ListBusinessUnit.OrgName == nil {
			break
		}

		return e.complexity.ListBusinessUnit.OrgName(childComplexity), true

	case "listBusinessUnit.subOrgId":
		if e.complexity.ListBusinessUnit.SubOrgID == nil {
			break
		}

		return e.complexity.ListBusinessUnit.SubOrgID(childComplexity), true

	case "listBusinessUnit.subOrgName":
		if e.complexity.ListBusinessUnit.SubOrgName == nil {
			break
		}

		return e.complexity.ListBusinessUnit.SubOrgName(childComplexity), true

	case "planAndPermission.alertsAdvisories":
		if e.complexity.PlanAndPermission.AlertsAdvisories == nil {
			break
		}

		return e.complexity.PlanAndPermission.AlertsAdvisories(childComplexity), true

	case "planAndPermission.appNotification":
		if e.complexity.PlanAndPermission.AppNotification == nil {
			break
		}

		return e.complexity.PlanAndPermission.AppNotification(childComplexity), true

	case "planAndPermission.applicationHealthDashboard":
		if e.complexity.PlanAndPermission.ApplicationHealthDashboard == nil {
			break
		}

		return e.complexity.PlanAndPermission.ApplicationHealthDashboard(childComplexity), true

	case "planAndPermission.apps":
		if e.complexity.PlanAndPermission.Apps == nil {
			break
		}

		return e.complexity.PlanAndPermission.Apps(childComplexity), true

	case "planAndPermission.auditLogs":
		if e.complexity.PlanAndPermission.AuditLogs == nil {
			break
		}

		return e.complexity.PlanAndPermission.AuditLogs(childComplexity), true

	case "planAndPermission.businessunitCount":
		if e.complexity.PlanAndPermission.BusinessunitCount == nil {
			break
		}

		return e.complexity.PlanAndPermission.BusinessunitCount(childComplexity), true

	case "planAndPermission.byoh":
		if e.complexity.PlanAndPermission.Byoh == nil {
			break
		}

		return e.complexity.PlanAndPermission.Byoh(childComplexity), true

	case "planAndPermission.customDomain":
		if e.complexity.PlanAndPermission.CustomDomain == nil {
			break
		}

		return e.complexity.PlanAndPermission.CustomDomain(childComplexity), true

	case "planAndPermission.id":
		if e.complexity.PlanAndPermission.ID == nil {
			break
		}

		return e.complexity.PlanAndPermission.ID(childComplexity), true

	case "planAndPermission.infrastructureConfiguration":
		if e.complexity.PlanAndPermission.InfrastructureConfiguration == nil {
			break
		}

		return e.complexity.PlanAndPermission.InfrastructureConfiguration(childComplexity), true

	case "planAndPermission.inviteUserLimit":
		if e.complexity.PlanAndPermission.InviteUserLimit == nil {
			break
		}

		return e.complexity.PlanAndPermission.InviteUserLimit(childComplexity), true

	case "planAndPermission.k8sRegions":
		if e.complexity.PlanAndPermission.K8sRegions == nil {
			break
		}

		return e.complexity.PlanAndPermission.K8sRegions(childComplexity), true

	case "planAndPermission.monitoringPlatform":
		if e.complexity.PlanAndPermission.MonitoringPlatform == nil {
			break
		}

		return e.complexity.PlanAndPermission.MonitoringPlatform(childComplexity), true

	case "planAndPermission.organizationCount":
		if e.complexity.PlanAndPermission.OrganizationCount == nil {
			break
		}

		return e.complexity.PlanAndPermission.OrganizationCount(childComplexity), true

	case "planAndPermission.organizationManagement":
		if e.complexity.PlanAndPermission.OrganizationManagement == nil {
			break
		}

		return e.complexity.PlanAndPermission.OrganizationManagement(childComplexity), true

	case "planAndPermission.planName":
		if e.complexity.PlanAndPermission.PlanName == nil {
			break
		}

		return e.complexity.PlanAndPermission.PlanName(childComplexity), true

	case "planAndPermission.replicas":
		if e.complexity.PlanAndPermission.Replicas == nil {
			break
		}

		return e.complexity.PlanAndPermission.Replicas(childComplexity), true

	case "planAndPermission.secret":
		if e.complexity.PlanAndPermission.Secret == nil {
			break
		}

		return e.complexity.PlanAndPermission.Secret(childComplexity), true

	case "planAndPermission.singleSignOn":
		if e.complexity.PlanAndPermission.SingleSignOn == nil {
			break
		}

		return e.complexity.PlanAndPermission.SingleSignOn(childComplexity), true

	case "planAndPermission.sslSecurity":
		if e.complexity.PlanAndPermission.SslSecurity == nil {
			break
		}

		return e.complexity.PlanAndPermission.SslSecurity(childComplexity), true

	case "planAndPermission.storage":
		if e.complexity.PlanAndPermission.Storage == nil {
			break
		}

		return e.complexity.PlanAndPermission.Storage(childComplexity), true

	case "planAndPermission.subOrganizationCount":
		if e.complexity.PlanAndPermission.SubOrganizationCount == nil {
			break
		}

		return e.complexity.PlanAndPermission.SubOrganizationCount(childComplexity), true

	case "planAndPermission.versionControlPanel":
		if e.complexity.PlanAndPermission.VersionControlPanel == nil {
			break
		}

		return e.complexity.PlanAndPermission.VersionControlPanel(childComplexity), true

	case "planAndPermission.workloadManagement":
		if e.complexity.PlanAndPermission.WorkloadManagement == nil {
			break
		}

		return e.complexity.PlanAndPermission.WorkloadManagement(childComplexity), true

	case "regionAppCount.apps":
		if e.complexity.RegionAppCount.Apps == nil {
			break
		}

		return e.complexity.RegionAppCount.Apps(childComplexity), true

	case "regionAppCount.Region":
		if e.complexity.RegionAppCount.Region == nil {
			break
		}

		return e.complexity.RegionAppCount.Region(childComplexity), true

	case "updateConfigApp.message":
		if e.complexity.UpdateConfigApp.Message == nil {
			break
		}

		return e.complexity.UpdateConfigApp.Message(childComplexity), true

	case "userActivities.activities":
		if e.complexity.UserActivities.Activities == nil {
			break
		}

		return e.complexity.UserActivities.Activities(childComplexity), true

	case "userActivities.appsCount":
		if e.complexity.UserActivities.AppsCount == nil {
			break
		}

		return e.complexity.UserActivities.AppsCount(childComplexity), true

	case "userActivities.createdAt":
		if e.complexity.UserActivities.CreatedAt == nil {
			break
		}

		return e.complexity.UserActivities.CreatedAt(childComplexity), true

	case "userActivities.id":
		if e.complexity.UserActivities.ID == nil {
			break
		}

		return e.complexity.UserActivities.ID(childComplexity), true

	case "userActivities.isRead":
		if e.complexity.UserActivities.IsRead == nil {
			break
		}

		return e.complexity.UserActivities.IsRead(childComplexity), true

	case "userActivities.message":
		if e.complexity.UserActivities.Message == nil {
			break
		}

		return e.complexity.UserActivities.Message(childComplexity), true

	case "userActivities.organizationName":
		if e.complexity.UserActivities.OrganizationName == nil {
			break
		}

		return e.complexity.UserActivities.OrganizationName(childComplexity), true

	case "userActivities.referenceId":
		if e.complexity.UserActivities.ReferenceID == nil {
			break
		}

		return e.complexity.UserActivities.ReferenceID(childComplexity), true

	case "userActivities.subOrganizationName":
		if e.complexity.UserActivities.SubOrganizationName == nil {
			break
		}

		return e.complexity.UserActivities.SubOrganizationName(childComplexity), true

	case "userActivities.type":
		if e.complexity.UserActivities.Type == nil {
			break
		}

		return e.complexity.UserActivities.Type(childComplexity), true

	case "userActivities.userId":
		if e.complexity.UserActivities.UserID == nil {
			break
		}

		return e.complexity.UserActivities.UserID(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "api/apps.graphqls", Input: `scalar Time
scalar Map

input CreateAppInput {
    name: String!
    runtime: String!
    organizationId: String!
    subOrganizationId: String!
    businessUnitId: String!
    workloadManagementId: String!
}

type Nodes {
    nodes: [App]
}

type ClusterNodes {
    nodes: [ClusterInfo]
}

type RegionStatusNodes {
    nodes: [RegionStatus]
}

type NewApp {
    app: App!
}

input ConfigureRegionsInput{
    appId: String!
    allowRegions: [String]
    denyRegions: [String]    
    backupRegions: [String]
}

type SuspendApp {
    app: App!
}

type ResumeApp {
    app: App!
}

type RestartApp {
    app: App!
}

type App {
    id: String!
    name: String!
    status: String!
    deployed: Boolean
    hostname: String!
    appUrl: String
    version: Int!
    release: Release
    organization: Organization
    secrets: [Secret]
    currentRelease: Release
    releases(first: Int): Releases
    ipAddresses: IPAddresses
    ipAddress: IPAddress
    builds: Builds
    changes: Changes
    certificates: Certificates
    certificate: AppCertificate
    services: [Service]
    config: AppConfig
    createdAt: Time
    parseConfig(definition: Map): AppConfig
    allocations(showCompleted: Boolean): [AllocationStatus]
    allocation: AllocationStatus
    deploymentStatus(id : ID): DeploymentStatus
    autoscaling: AutoscalingConfig
    vmSize: VMSize
    regions: [Region]
    backupRegions: [Region]
    volumes: Volumes
    imageName: String
    port: String
    secretRegistryId: String
    instanceId: String
    dockerId: String
    hostId: String
    tenantId: String
    envArgs: String
    deployType: Int
    containerId: String
    builtinType: String
    workloadManagementId: String
    WorkloadManagementName: String
    WorkloadManagementEndPoint: String
    organizationId: String
    organizationName: String
    subOrganizationId: String
    subOrganizationName: String
    businessUnitId: String
    businessUnitName: String
    clusterDetials: ClusterDetail
    replicas: Int
    userDetails: GetUserById
    deploymentTime: String
    buildTime: String
    buildLogsUrl: String
}

type ClusterDetail {
	region_code: String        
	regionName: String         
	isDefault: Int             
	cluster_config_path: String
	ebl_enabled: String        
	port: String               
	cloudType: String          
	clusterType: String        
	providerType: String       
	externalBaseAddress: String
	externalAgentPlatform: Int 
	externalLBType: String     
	externalCloudType: Int     
	interface: String          
	route53CountryCode: String 
	tenantId: String           
	allocationTag: String      
}


type Changes {
    nodes: [AppChange]
}

type Certificates {
    nodes: [AppCertificate]
}

type Volumes {
    nodes: [Volume]
}

type Volume {
    id: ID
    app: String
    name: String
    sizeGb: Int
    region: String
    createdAt: Time
}

type Region {
    code: String
    name: String
    latitude: Float
    longitude: Float
}

type VMSize {
    name: String
    cPUCores: Float
    memoryGb: Float
    memoryMB: Int
    priceMonth: Float
    priceSecond: Float
}

type AutoscalingConfig {
    balanceRegions: Boolean
    enabled: Boolean
    maxCount: Int
    minCount: Int
    regions: [AutoscalingRegionConfig]
}

type AutoscalingRegionConfig {
    code: String
    minCount: Int
    weight: Int
}

type AppConfig {
    definition: Map
    services: [Service]
    valid: Boolean
    build:Builder
    errors: [String]
  
}

type Builder {
    builder: String
    builtin: String
    image: String
}

# type Definition {
#     nodes: String
# }

type Service {
    description: String
    protocol: String
    internalPort: Int
    ports: [PortHandler]
    checks: [Check]
    softConcurrency: Int
    hardConcurrency: Int
}

type PortHandler {
    port: Int
    handlers: [String]
}

type Check {
    type: String
    interval: Int
    timeout: Int
    httpMethod: String
    httpPath: String
    httpProtocol: String
    httpSkipTLSVerify: Boolean
    httpHeaders: [HTTPHeader]
}

type HTTPHeader {
    name: String
    value: String
}

type AppCertificate {
    id: ID
    acmeDNSConfigured: Boolean
    acmeALPNConfigured: Boolean
    configured: Boolean
    certificateAuthority: String
    createdAt: Time
    DNSProvider: String
    dNSValidationInstructions: String
    dNSValidationHostname: String
    dNSValidationTarget: String
    hostname: String
    source: String
    clientStatus: String
    isApex: Boolean
    isWildcard: Boolean
    issued: Issued
}

type Issued {
    nodes: [Issue]
}

type Issue {
    expireAt: String
    type: String
}

type Chages {
    nodes: [AppChange]
}

type AppChange {
    id: ID
    createdAt: Time
    updatedAt: Time
    actor: Actor
    status: String
    description: String
    reason: String
    user: User
}

type Actor {
    type: String
}

type Organization {
    id: String
    parentId: String
    parentOrgName: String
    name: String
    slug: String
    type: String
    domains: Domains
    region: [RegionDetails]
    isActive: Boolean
    subOrg: [SubOrganization]
}

type RegionDetails {
    regCode: String
    isDefault: Boolean
    regionName: String
    clusterType: String
}


type IPAddress {
    id: ID
    address: String
    type: String
    createdAt: Time
}

type IPAddresses {
    nodes: [IPAddress]
}

type Build {
    id: ID
    inProgress: Boolean
    status: String
    user: User
    logs: String
    image: String
    createdAt: Time
    updatedAt: Time
}

type Builds {
    nodes: [Build]
}

type Domains {
    nodes: [Domain]
    edges: [Edges]
}

type Domain {
    id: ID
    name: String
    createdAt: Time
    organization: Organization
    autoRenew: Boolean
    delegatedNameservers: [String]
    zoneNameservers: [String]
    dnsStatus: String
    registrationStatus: String
    expireAt: String
    dnsRecords: DnsRecords
}

type DnsRecords {
    nodes: [DNSRecord]
}

type DNSRecord {
    id: String
    name: String
    FQDN: String
    isApex: Boolean
    isWildcard: Boolean
    isSystem: Boolean
    TTL: Int
    type: String
    rData: String
    createdAt: Time
    updatedAt: Time
}

type Edges {
    cursor: String
    node: Domain
}

type Releases {
    nodes: [Release]
}

type Release {
    id: ID
    version: Int
    stable: Boolean
    inProgress: Boolean
    reason: String
    description: String
    image: String
    status: String
    port: Int
    deploymentStrategy: String
    deployment: DeploymentStatus
    user: User
    createdAt: Time
    archiveUrl: String
    builderType: String
    routingPolicy: String
}

type DeploymentStatus {
    id: ID
    status: String
    description: String
    inProgress: Boolean
    successful: Boolean
    createdAt: Time
    allocations: [AllocationStatus]
    version: Int
    desiredCount: Int
    placedCount: Int
    healthyCount: Int
    unhealthyCount: Int
}

type AllocationStatus {
    id: ID
    idShort: String
    version: Int
    region: String
    status: String
    desiredStatus: String
    healthy: Boolean
    canary: Boolean
    failed: Boolean
    restarts: Int
    createdAt: Time
    updatedAt: Time
    checks: [CheckState]
    events: [AllocationEvent]
    latestVersion: Boolean
    passingCheckCount: Int
    warningCheckCount: Int
    criticalCheckCount: Int
    transitioning: Boolean
    recentLogs: [LogEntry]
}

type CheckState {
    name: String
    status: String
    output: String
    serviceName: String
}

type AllocationEvent {
    timestamp: String
    type: String
    message: String
}

type LogEntry {
    timestamp: String
    message: String
    level: String
    instance: String
    region: String
    meta: Meta
}

type Meta {
    instance: String
    region: String
}

type Secret {
    name: String
    digest: String
    createdAt: Time
}

type AppCompact {
    id: ID
    name: String
    status: String
    deployed: Boolean
    hostname: String
    appUrl: String
    version: Int
    release: Release
    organization: Organization
    ipAddresses: IPAddresses
    services: [Service]
}

type Config {
	registry: Registry
	domain_mapping: [DomainMapping]
}

type Registry {
	server: String
	username: String
	password: String
	email: String
	secret_name: String
	repo_type: String
	organization_id: String
	isDefault: Int
}

type DomainMapping {
	domain_name: String
	ip_address: String
	kube_config_path: String
	node_name: String
}

input MoveAppInput {
    appId: String!
    sourceRegCode: String!
    destRegCode: String!
}

input PauseAppInput {
    appId: String!
    regionCode: String!
}

input ResumeAppInput {
    appId: String!
    regionCode: String!
}

input RestartAppInput {
    appId: String!
}

input UpdateAppInput {
    appId: String!
    internalPort: String!
    externalPort: String!
    build: String!   
    routingPolicy: String!
    resource: String!
    replicas: Int!
}

type Requirement {
    requestRequirement:RequirementProperties
    LimitRequirement:RequirementProperties
}

type RequirementProperties {
    memory: String
    cpu: String
}

input EditAppByOrganization {
  organizationId: String
  appName: String
  subOrganizationId: String
  businessUnitId: String
  workloadManagementId: String
}


type AppDeploymentRegion {
    regions: [Region],
    availableRegions: [Region]
}

input UpdateConfig {
    appId: String
    appName: String
    internalPort: String
    externalPort: String
    image: String
    archiveUrl: String
    version: Int
    envMapArgs: [String]
}

type UpdateAppConfig {
    appId: String
    appName: String
    internalPort: String
    externalPort: String
    image: String
    version: Int
}


type ClusterInfo {
    id:String!
    name:String!
    regionCode:String!
    ipAddress:String!
    clusterConfigPath:String!
    clustertype:String!
    isLatency:Boolean
    latitude:Float
    longitude:Float
    loadBalancerURL:String!
}


type RegionStatus {
    id: String
    regionCode: String
    status: String
    deploymentId: String
    port: String
    appUrl: String
    releaseId: String
    elbRecordName: String
    elbRecordId: String
}

type PlatFormOutput {
    code:      String
    name:      String
    latitude:  Float
    longitude: Float
}


type UpdateImageOutput {
    message: String
}

type updateConfigApp {
    message: String
}

type Regions {
    regions: [PlatFormOutput]
}

type appCount {
    totalApps: Int
    new: Int
    active: Int
    inActive: Int
    terminated: Int
    region: [regionAppCount]
}

type regionAppCount {
  Region: String
  apps: Int

}

type ConfigAppTemplates{
   id: String
   name: String
   config: AppConfig
   envArgs: String
   routingPolicy: String
   volumeSize: Int
   isActive: Boolean
   createdBy: String
   createdAt: Time
   cpuLimit: String
  memoryLimit: String
  cpuRequests: String
  memoryRequests: String

}


input ConfigTemplate {
    id: String
  appName: String  
  name: String
  internalPort: String
  externalPort: String
  image: String
  routingPolicy: String
  volumeSize: Int
  isActive: Boolean
  envArgs: String
  cpuLimit: String
  memoryLimit: String
  cpuRequests: String
  memoryRequests: String
}

type AppsOrgsSubCount {
    organization: String
    appsCount: Int
    newApp: Int
    activeApp: Int
    inActiveApp: Int
    subOrganization: [SubOrgCount]
}

type SubOrgCount {
    subOrganizationCount: String
    businessUnit: [BusinessUnitCount]
}

type BusinessUnitCount {
    businessUnitCount: String
    appsCount: AppsCountbyBusinessUnit
}

type AppsCountbyBusinessUnit {
    appsCount: Int
    newApp: Int
    activeApp: Int
    inActiveApp: Int 
}


type AppsAndOrgsAndSubOrgCountDetails{
    totalOrgCount: Int
    totalSubOrgCount: Int
    totalBusinessUnitCount: Int
    totalAppCount: Int
    orgByAppCount: [AppsOrgsSubCount]
    region: [regionAppCount]
}
type AppsAndOrgsCountDetails{
    totalOrgCount: Int
    totalAppCount: Int
    orgByAppCount: [AppsOrgsCount]
    region: [regionAppCount]
}
type AppsOrgsCount {
    organization: String
    appsCount: Int
    newApp: Int
    activeApp: Int
    inActiveApp: Int
   
}

input CreateAppToml {
    appName: String
    image: String
    builtin: String
    organizationId: String
    internalPort: String
    externalPort: String
    build: String
    routingPolicy: String
    cpuLimit: String
    memoryLimit: String
    cpuRequests: String
    memoryRequests: String
}



type Query {
    app(name: String): App!
    apps(type: String, first: Int,region: String, orgSlug: String): Nodes
    appsSubOrg(type: String, first: Int,region: String, subOrgSlug: String): Nodes
    appsBusinessUnit(type: String, first: Int,region: String, businessUnit: String): Nodes
    appsWorkload(name: String, organiztionId: String): Nodes
    appsWorkloadIdOrUserRole(workloadId: String,userId: String):Nodes
    appcompact(name: String): AppCompact
    getAppRegion(name: String!, status:String!):AppDeploymentRegion    
    getAvailabilityCluster(isLatency: String, first: Int):ClusterNodes!
    getRegionStatus(appId:String!):RegionStatusNodes
    platform:Regions
    appStatusList(status: String):Nodes
    appQuotaExist:Boolean!
    checkAppById(name: String!):Boolean!
    GetAppByAppId(id: String):App!
    AppsCount: appCount
    GetAppTemplates: [ConfigAppTemplates]!
    GetAppsAndOrgsCountDetails: AppsAndOrgsCountDetails!
    GetAppsAndOrgsandSubOrgCountDetails: AppsAndOrgsAndSubOrgCountDetails!
}

type Mutation {
    createApp(input: CreateAppInput!): NewApp!
    deleteApp(appId: ID!, regionCode: String!): App!
    moveApp(input: MoveAppInput!): NewApp!
    pauseApp(input: PauseAppInput!): SuspendApp!
    resumeApp(input: ResumeAppInput!): ResumeApp!
    restartApp(input: RestartAppInput!): RestartApp!
    configureRegions(input: ConfigureRegionsInput):App!
    updateApp(input: UpdateAppInput!): App!
    #deleteDuploApp(appName: String): String
    #updateConfigApp(id: String, newAppName: String): updateConfigApp!
    # deployApp(input: DeployInput!): DeployOutput!
    updateImage(appName: String, imageName: String): UpdateImageOutput
    editApp(input: EditAppByOrganization): String
    updateConfigApps(input: UpdateConfig): UpdateAppConfig
    appTemplate(input: ConfigTemplate!): String!
    updateAppTemplate(input: ConfigTemplate!): String!
    deleteAppTemplate(id: String): String!
    checkGithubRepoPrivateOrPublic(githubUrl: String): Boolean
    createNifeTomlFile(input: CreateAppToml): String!
    
}`, BuiltIn: false},
	{Name: "api/auth.graphqls", Input: `type Link {
    id: ID!
    title: String!
    address: String!
    user: User!
}

type User {
    id: ID!
    name: String!
    email:String!
    firstName: String!
    lastName: String!
}

input NewLink {
    title: String!
    address: String!
}

input RefreshTokenInput{
    token: String!
}

input NewUser {
    email: String!
    password: String!
}

input Login {
    email: String!
    password: String!
}


extend type Mutation {
    createUser(input: NewUser!): String!
    login(input: Login!): String!
}`, BuiltIn: false},
	{Name: "api/businessunit.graphqls", Input: `input BusinessUnitInput {
    id: String
     orgId: String
     subOrg: String
     name: String
     createdAt: Time
     isActive: Boolean
}

type getBusinessUnit{
    id: String
    name: String
    isActive: Boolean

}

type listBusinessUnit{
    id: String
    orgId: String
    orgName: String
    subOrgId: String
    subOrgName: String
    name: String
}

extend type Query {
    businessUnitList:[listBusinessUnit!]
    getBusinessUnitById(name: String):listBusinessUnit
    getBusinessUnitByOrgId(orgId: String, subOrgId: String):[listBusinessUnit]
    getBusinessUnit(orgId: String!, subOrgId: String!): [getBusinessUnit!]
}

extend type Mutation {
    createBusinessUnit(input: BusinessUnitInput!): String!
    updateBusinessUnit(input: BusinessUnitInput!): String!
    deleteBusinessUnit(id: String!): String!
}`, BuiltIn: false},
	{Name: "api/cluster.graphqls", Input: `type ClusterDetails {
    id: String
    regionCode: String
    providerType: String
    clusterType: String
    regionName: String
    externalBaseAddress: String
    externalAgentPlatForm: Int
    externalLBType: String
    externalCloudType: Int
    interfaceType: String
    route53countryCode: String
    tenantId: String
    allocationTag: String
    loadBalancerURL: String
    isDefault: Int
    clusterConfigPath: String
    clusterConfigUrl: String
	eblEnabled: String
    port: String

}

input ClusterDetailsInput {
    regionCode: String
    providerType: String
    clusterType: String
    regionName: String
    interfaceType: String
    allocationTag: String
    loadBalancerURL: String
    isDefault: Int
    clusterConfigUrl: String
}

type CloudRegions{
    code: String
    name: String
    type: String
}

extend type Query {
    getClusterDetails(regCode:String): ClusterDetails
    getClusterDetailsByOrgId(orgId: String): ClusterDetails
    getClusterDetailsByOrgIdMultipleReg(orgId: String): [ClusterDetails]
    getUserAddedRegions:[ClusterDetails]
    getCloudRegions(type: String):[CloudRegions]!
}


extend type Mutation{
    addRegionUsingKubeConfig(input: ClusterDetailsInput):String!
    deleteKubeConfigRegion(id: String): String!
}`, BuiltIn: false},
	{Name: "api/deploy.graphqls", Input: `input DeployImageInput {
    appId: String!
    image: String!
    definition: Map
    strategy: String
    services:[Map]
    envArgs: String
    envMapArgs: [String]
    archiveUrl: String
  
   
}

input OptimizeImageInput {
    appId: String!
    image: String!
}

type OptimizeImage {
    status: String
}

type StartBuild {
    build: Build
    buildLogs: [String]
}

type DeployOutput {
    deploymentName: String!
    serviceName: String!
    hostName : String!
    url: String!
    Id: String!
    existDeployment: Boolean
    releaseId: String
    loadBalanceURL: String
    containerId: String
}

input DeployInput {
    imageName: String!
    appId:String
    appName: String
    serviceName: String
    nodeName: String
    port: String
}


input StartBuildInput {
    appId: String
    sourceUrl: String
    sourceType: String
    buildType: String
    imageTag: String
    buildArgs: Map
    fileExtension: String!
    dockerFile: String
    dockerFilePath: String
}

input ElbUrlInput{
    appName: String
}

type ElbUrl{
    elbUrl: String
}

type BuildArgsInput {
    name: String
    value: String
}

type DeployImage {
    release: Release
}

input S3DeployInput {
    s3AppName: String
    s3Url: String
    buildFileName: String
    buildCommandsS3: [S3BuildCommands]
    envVariablesS3: [S3EnvVariables]
    organizationId: String
    deployBuildFile: Boolean
}

input S3EnvVariables {
    name: String
    value: String
}

input S3BuildCommands {
    s3Cmd: String
}

type S3EnvVariable {
    name: String
    value: String
}

type S3BuildCommand {
    s3Cmd: String
}

type S3Deployments {
    id: String
    s3AppName: String
    status: String
    appUrl: String
    buildCommandsS3: [S3BuildCommand]
    envVariablesS3: [S3EnvVariable]
    organizationId: String
    orgDetails: Organization
    deploymentTime: String
    buildTime: String
    createdBy: String
    userDetails: GetUserById
    createdAt: Time
}


extend type Query {
    GetAvailableBuiltIn(first: Int): [String!]
    getElbUrl(input: ElbUrlInput): ElbUrl
    getAllS3deployments:[S3Deployments]
    getS3deployments(s3AppName: String):S3Deployments
 }

extend type Mutation {
    deployImage(input: DeployImageInput!): DeployImage!
    optimizeImage(input: OptimizeImageInput!): OptimizeImage!
    deployK8S(input: DeployInput!): DeployOutput!
    startBuild(input:StartBuildInput!): StartBuild!
    S3Deployment(input:S3DeployInput):String!
    removeFiles(s3AppName: String): String
    deleteS3Deployment(s3AppName: String): String
}`, BuiltIn: false},
	{Name: "api/domainLog.graphqls", Input: `
type QueryLogOutput {
id: String
message: String 
queryName: String 
resolverIp: String
timeStamp: String 
responseCode: String
lastSyncTime: String
times: Int
}

type GetClientSideLogs {
    id: String
    message: String
    level: String
    timeStamp: String
    userId: String
}

input GetQueryLog {
    startTime: String!
    endTime: String!
    hostName: String!
}

input ClientSideLogs {
    message: String!
    level: String!
}

 extend type Query {
         getQueryLog(input:GetQueryLog!): [QueryLogOutput!]
 }

 extend type Mutation {
        clientSideLog(input: ClientSideLogs!): String!
 }
`, BuiltIn: false},
	{Name: "api/duplo.graphqls", Input: `type DuploDeployOutput {
    id: String
    status: String
    UserId: String
    info: String
    progress: Int
    pollCount: String
    createdAt: Time    
    UpdatedAt: Time
}


type Duplolog {
    data: String
    dockerId: String
    hostName: String
    stdOut: Boolean
    stdErr: Boolean
    tail: Int
}


type OutputMessage {
    message: String
}


extend type Query {
    getDuploStatus(appName:String):[DuploDeployOutput]
    getclusterLog(appName: String, region: String):String   
}


extend type Mutation {
    deleteDuploApp(appName: String):OutputMessage
}


`, BuiltIn: false},
	{Name: "api/fileUpload.graphqls", Input: `scalar Upload

type File {
     link: String!
}

extend type Mutation {
     singleUpload(file: Upload!):File!
}`, BuiltIn: false},
	{Name: "api/metrics.graphqls", Input: `

type GetUserMetrics {
    resolverIp: String
    timeStamp: String
    queryType: String    
}

input DataDogInput{
    id: String
    apiKey: String
    appKey: String
    apiEndpoint: String
    clusterId: String
    userId: String
    isActive: Boolean
}

type AddedDataDog{
    id: String
    apiKey: String
    appKey: String
    apiEndpoint: String
    clusterId: String
    clusterDetails: ClusterDetails
}

extend type Query {
    userMetrics(appName:String):[GetUserMetrics]
    getDataDogByUserId:[AddedDataDog]
}

extend type Mutation {
    addDataDogBYOC(input: DataDogInput!): String!
    updateDataDogByoc(input: DataDogInput): String!
    deleteDataDogByoc(dataDogId: String!):String!
}`, BuiltIn: false},
	{Name: "api/monitoring.graphqls", Input: `type AppStatus {
    id: ID!
    name: String!
    deployed: Boolean
    status: String
    hostname: String
    version: Int
    appURL: String
    organization: Organization
    deploymentStatus: DeploymentStatus
    allocations: [AllocationStatus]
}

input GetAppStatusInput {
    appName: String!
    showCompleted: Boolean!
}
`, BuiltIn: false},
	{Name: "api/organizationMigrate.graphqls", Input: `input MigrateOrganizationInput {
    organizationIdFrom: String
    organizationIdTo: String    
}

type businessUnitListInSubOrg{
    subOrgId: String
    subOrgName: String
    businessUnitUnderSubOrg: [listBusinessUnit]
}

type AppInSubOrg{
    subOrgId: String
    subOrgName: String
    appsInSubOrgs: [App]
}

type AppInBusinessUnit{
    businessUnitId: String
    businessUnitName: String
    appsInBusinessUnit: [App]
}

extend type Mutation {
    migrateOrganization(input : MigrateOrganizationInput!): String!
}`, BuiltIn: false},
	{Name: "api/organizations.graphqls", Input: `type Organizations {
    nodes: [Organization]
}

type OrganizationsandBusinessUnit {
    nodes: [Organization]
    businessUnit: [listBusinessUnit]
}

type SubOrganization {
    id: String
    name: String
    slug: String
    type: String
    domains: Domains
    region: [RegionDetails]
    isActive: Boolean
}

type OrganizationDetails{
    id: String
    name: String
    slug: String
    type: String
    apps: Apps
    viewerRole : String
    members : Members
}

type Members {
    edges : [OrganizationMembershipEdge]
}



type OrganizationMembershipEdge {
     id: String
     role: String
     joinedAt : Time
     node : User
     cursor : String
     roleId: Int
}

type Apps {
    nodes: [App]
}


type CreateOrganization {
    organization : Organization
}

type DeleteOrganization {
    deletedOrganizationId : String
}

type DeleteSubOrganization {
    deletedSubOrganizationId : String
}



input CreateSecretInput{
    name: String!
    organizationId: String!
    registryType: String!
    registryInfo: Map
}

input UpdateSecretInput{     
    registryType: String!
    registryInfo: Map

}

input CreateOrganizationInput {
    name : String!
    type : String
}

input CreateSubOrganizationInput {
    name: String!
    parentOrgId: String!
}

input DeleteOrganizationInput {
    organizationId : String!
}

input DeleteSubOrganizationInput {
    subOrganizationId : String!
}

type OrganizationRegistryType {
    id: String
    name: String
    slug: String
    isActive: String
}


type Response {
    message: String!
}


type OrgCountDetails {
    totalOrgCount: Int
    orgByAppCount: [AppOrgCount]
}

type AppOrgCount {
    organization: String
    apps: Int
}



type GetUserSecret {
    id: String
    organizationId: String
    name: String
    registryType: String
    userName: String
    passWord: String
    Url: String
    keyFileContent: String
    registryName: String
    isActive: Boolean
    secretType: String

}


type GetSecRegistry {
    id: String
    name: String
}

input CreateNamespace{
    name: [String]!
}


type OrganizationRegionTable {
    id: String
    organizationId: String
    region_code: String
    is_default: Boolean
}



extend type Query {
    organizations: Organizations!
    getAllParentOrganizations: Organizations!
    organizationsandBusinessUnit: OrganizationsandBusinessUnit!
    subOrganizations: Organizations!
    subOrganizationsByParentId(parentOrgId: String): Organizations!
    getParentIdBySubOrganization(subOrgId: String): Organizations!
    organization(slug: String!): OrganizationDetails! 
    getOrganizationByOrgId(id: String!): Organization!
    organizationRegistryType: [OrganizationRegistryType!]  
    getSecret(name:String):[GetUserSecret!] 
    getRegistryByUser(orgId:String!, regType:String!):[GetSecRegistry!]
    getAppByRegionCount:OrgCountDetails
    getSecretByRegistryId(secretId:String): GetUserSecret
}



extend type Mutation {
    createOrganization(input : CreateOrganizationInput!): CreateOrganization!
    createSubOrganization(input : CreateSubOrganizationInput!): CreateOrganization!
    deleteOrganization(input : DeleteOrganizationInput!): DeleteOrganization!
    deleteSubOrganization(input: DeleteSubOrganizationInput!): DeleteSubOrganization!
    createOrganizationSecret(input: CreateSecretInput): Response!
    updateOrganizationSecret(name: String,input: UpdateSecretInput): Response!
    deleteOrganizationSecret(name: String, id: String): Response!   
    updateRegistryIdToApp(appName: String!,name: String):Response! 
    updateOrganization(org: String, defaulttype: Boolean): String!
    createNamespaceInCluster(input: CreateNamespace): String!
    addUserAddedregionsToOrganizatiom(organizationId:[String]): String!
}`, BuiltIn: false},
	{Name: "api/payment.graphqls", Input: `type Payment {
    id :String!
    amount :Int!
    currency :String!
    clientSecretId :String!
}

input CreatePaymentIntent {
    amount :Int!
    customerId :String!
    
}

type AttachPayment {
    id :String!
    customerId :String!
    paymentMethodId :String!
    email :String!
    name :String!
    city :String!
    country :String!
    state :String!
    type :String!
}


input CreateAttachPaymentMethod {
    customerId :String!
    paymentMethodId :String!
    
    
}

type StripeSubscription {
    customerId :String!
    priceId :String!
    defaultPaymentMethodid :String!
    planId :String!
    userID :Int!
    customerSubscriptionId :String!
    accessToken :String!
    email :String!
    price :String!
    status :String!
    name :String!

}

input CreateStripeSubscription {
    customerId :String!
    priceId :String!
    defaultPaymentMethodid :String!
    accessToken :String
    sessionId :String
    
        
}



type PriceList {
    productid :String!
    priceid :String!
    nickname :String!
    description :String!
    unitamount :Int!
}


extend type Query {
    getpricelist :[PriceList]
}

extend type Mutation {
CreatePaymentIntent(input:CreatePaymentIntent!): Payment!
CreateAttachPaymentMethod(input:CreateAttachPaymentMethod!): AttachPayment!
CreateStripeSubscription(input:CreateStripeSubscription!): StripeSubscription!
}`, BuiltIn: false},
	{Name: "api/region.graphqls", Input: `input DefaultRegionInput {
    region: String
    organizationId: String
}

input RegionRequest {
    region: [String]
    email: String
    firstName: String
    lastName: String
}

input MultipleRegionInput {
    region: [String]
    organizationId: String
    isDefault: Boolean
}

type MultipleRegionResponse {
    region: [String]
    isDefault: Boolean
}

type RequestedRegions{
    id: String
    userName: String
    status: String
    createdBy: String
    createdAt: String
    requestedRegion: String
}

type RequestedRegionsResponse{
    requestedRegions: [String]
    alreadyRequestedRegions: [String]
    message: String
}

extend type Query{
    getRequestedRegions:[RequestedRegions]
}

extend type Mutation {
    updateDefaultRegion(input: DefaultRegionInput): String!
    newRegionRequest(input: RegionRequest): String!
    newRegionsRequest(input: RegionRequest): RequestedRegionsResponse!
    mutipleRegion(input: MultipleRegionInput): MultipleRegionResponse
    deleteRequestedRegion(id: String): String!
}`, BuiltIn: false},
	{Name: "api/rolePermission.graphqls", Input: `type Permission{
   id: String
   module: String
   title: String
   create: Boolean
   view: Boolean
   delete: Boolean
   update: Boolean
   is_active: Boolean
   created_at: Time
}

type planAndPermission{
id: String
planName: String
apps: Int
workloadManagement: Boolean
organizationManagement: Boolean
inviteUserLimit: Int
applicationHealthDashboard: Boolean
byoh: Boolean
storage: Boolean
versionControlPanel: Boolean
singleSignOn: Boolean
organizationCount: Int
subOrganizationCount: Int
businessunitCount: Int
customDomain: Boolean
appNotification: Boolean
secret: Boolean
monitoringPlatform: Boolean
alertsAdvisories: Boolean
auditLogs: Int
sslSecurity: Boolean
infrastructureConfiguration: Int
replicas: Int
k8sRegions: Int
}


extend type Query {
  	getUserPermissions: [Permission]
   getUserPermissionsByPlan: planAndPermission
}

extend type Mutation {
     updateRole(userId:String, roleId:Int): String
}`, BuiltIn: false},
	{Name: "api/user.graphqls", Input: `type UpdateUser {
    companyName: String
	phoneNumber: String
	location: String
	industry: String
	updatedAt: Time
}

input UpdateUserInput {
	id: String
    companyName: String
	phoneNumber: String
	location: String
	industry: String
	FirstName: String
	LastName: String
	mode: Boolean 
}

type Password {
	message: String
	updatedAt: Time
}


input ChangePassword {
	id: String!
	oldpassword: String!
	newPassword: String!
}

type GetUserById {
	id: String
	email: String
	companyName: String!
	phoneNumber: String!
	location: String!
	industry: String!
	firstName: String
	lastName: String
	ssoType: String
	freePlan: Boolean
	profileImageUrl: String
	isActive: Boolean
	isDelete: Boolean
	companyId: String
	userProfileCreated: String
	roleId: Int!
	companylogo: String!
	mode: Boolean
	slackWebhookURL: String
	organization: [Organizations]

}

input UserById {
      userId: String!
}

type CurrentUserEmail{
	email: String!
	firstName: String!
	lastName: String!
}

type TokenValidation {
	refreshToken: String
}

input InviteUser {
	userEmail: String
	organization: [String]
}

input AddUser {
	 userId: Int
	 organizationId: [String]
}

input Image {
	logoUrl: String!
}

type appCountsDetails{
	activeApps: Int
	deletedApps: Int
}

type userActivities {
    id: String
    type: String
    userId: String
    activities: String
    message: String
    isRead: Boolean
	createdAt: Time
	organizationName: String
	subOrganizationName: String
	referenceId: String
	appsCount: appCountsDetails
}

input Notification {
	id: [String]
	isRead: Boolean
}

input ByohRequest {
	organizationId: String
	ipAddress: String
	userName: String
	password: String
	name: String
	region: String
	status: String
}

type UserDeploymentDetailCount{
	userName: String
	email: String
	companyName: String
	roleId: Int
	totalDeployed: Int
	totalReDeployed: Int
	deployData: [DeploymentCountByDate]
	reDeployData: [ReDeploymentCountByDate]
}

type DeploymentCountByDate{
	date: String
	deployed: Int
}
type ReDeploymentCountByDate{
	date: String
	reDeployed: Int
}
type InviteUserOutputMessage {
    message: String
	userId: Int
}

extend type Query {
  	getUserById: GetUserById!
	currentUser: CurrentUserEmail!
	getUserByAdmin: [GetUserById]
	getUserByAdminAndOrganization(organizationId: String): [GetUserById]
	userActivities(first: Int): [userActivities]
	userActivitiesByDate(startDate: String, endDate: String): [userActivities]
	GetInviteUserCountByAdminUser: Int
	userDeploymentCountDetails(startDate: String, endDate: String): [UserDeploymentDetailCount]
	getUserByOrganizationId(organizationId: String): [GetUserById]
}


extend type Mutation{
    updateUser(input: UpdateUserInput): UpdateUser
	changePassword(input: ChangePassword!): Password
	ActiveUser(IsActive: Boolean, IsDelete: Boolean): String!
	inviteUser(input: InviteUser): InviteUserOutputMessage
	addInviteUserRole(email: String!, roleId: Int!): String
    removeUserOrg(OrganizationId: String, UserId: String): String
    userProfileUpdated(userId: String, userProfileCreated: Boolean):String
	addUserToOrg(input: AddUser): String!
	uploadCompanyLogo(input: Image): String!
	removeInviteuser(userId: String): String!
	notificationInfo(input: Notification): String!
	userRequestingByoh(input: ByohRequest): String!
	requestingPicoNets(appName: String): String!
	setUserTokenExpireTime(ExpireTime: Int): String!
	updateUserwebhookURLSlack(webhookURL: String): String! 
}
`, BuiltIn: false},
	{Name: "api/userPAT.graphqls", Input: `input UserPAT{
	id: String
    type: String!
    patToken: String!
    userId: String
}

type GetUserPAT{
    id: String
    type: String
    patToken: String
    userId: String
    createdAt: Time
    updatedAt: Time
}

extend type Query {
    getUserPAT: [GetUserPAT]!
}


extend type Mutation{
    addPAT(input: UserPAT): String!
    updatePAT(input: UserPAT): String!
    deletePAT(id: String): String!
}
`, BuiltIn: false},
	{Name: "api/vmInstance.graphqls", Input: `input StartAndStopVM {  
  instanceName: String
  action: String
}

input Host {
 id: Int
 orgId: String
 type: String
 serviceAccountURL: String
 status: String
 zone: String
 instanceName: String
 instanceId: String
 accessKey: String
 secretKey: String
 subscriptionId: String
 resourceGroupName: String
 clientId: String
 clientSecret: String
 tenantId: String
 createdBy: String
 createdAt: Time
 isActive: Boolean
}

type HostDetails {
 id: Int
 orgId: String
 type: String
 serviceAccountURL: String
 status: String
 zone: String
 instanceName: String
 instanceId: String
 accessKey: String
 secretKey: String
 createdBy: String
 createdAt: Time
 isActive: Boolean
}



type Activity {
	Id: String!
	Type: String!
	Activities: String!
	Message: String!
  createdAt: Time
}

type HostPayload {
 id: Int
 orgId: String
 orgName: String
 type: String
 serviceAccountURL: String
 status: String
 zone: String
 instanceName: String
 instanceId: String
 accessKey: String
 secretKey: String
 subscriptionId: String
 resourceGroupName: String
 clientId: String
 clientSecret: String
 tenantId: String
 createdBy: String
 createdAt: Time
 InstanceActivity: [Activity]
}

type VmInstanceMessage {
    id: Int
    message: String
}


extend type Query {
  getHost(orgId: String): [HostPayload]
  getHostByName(instanceName: String): HostDetails
}

extend type Mutation{
  NodeAction(input: StartAndStopVM): VmInstanceMessage!
  createHost(input: Host): VmInstanceMessage!  
  deleteHost(id: Int): String!
  NodeActionAWS(input: StartAndStopVM): VmInstanceMessage!
  NodeActionAzure(input: StartAndStopVM): VmInstanceMessage!
}`, BuiltIn: false},
	{Name: "api/volumes.graphqls", Input: `input DuploVolumeInput {
  appId: String
	accessMode: String
    name: String  
    path: String
    containerPath: String
    hostPath: String
    size: String
    volumeTypeId: String
    isRead: Boolean
    isHostVolume: Boolean
}

type VolumeType {
  id: String
  name: String
  isRead: Boolean
  isHostVolume: Boolean
  description: String
}

type VolumeByApp {
    appId: String
	  accessMode: String
    name: String  
    path: String
    containerPath: String
    hostPath: String
    size: String
    volumeTypeId: String
    isRead: Boolean
    isHostVolume: Boolean

}

input UpdateVolumeInput{
  appName: String
  volumeSize: String
}

extend type Query {
  getVolumeType: [VolumeType]
  getVolumeByAppId(appId: String): [VolumeByApp]
}

extend type Mutation{
  createDuploVolume(input: [DuploVolumeInput]): OutputMessage
  updateVolume(input: UpdateVolumeInput): String
}
`, BuiltIn: false},
	{Name: "api/workLoadManagement.graphqls", Input: `input WorkloadManagement {
 id: String
 environmentName: String
 environmentEndpoint: String
 organizationId: String
}

type WorkloadManagementList {
 id: String
 environmentName: String
 environmentEndpoint: String
 organizationId: String
 organizationName: String
 subOrganizationId: String
 businessUnitId: String
 userId: String
 createdAt: Time
 apps: Nodes
}

type WorkLoadRegions{
 id: String
 environmentName: String
 environmentEndpoint: String
 organizationId: String
 addedWorkLoadRegions: [Region] 
}


extend type Query {
  getWorkloadMangementByUser:[WorkloadManagementList!]
  getWorkloadMangementByorgnizationId(orgId: String, subOrgId: String, businessUnitId: String):[WorkloadManagementList!]
  getWorkloadMangementByWlId(workloadId: String):WorkloadManagementList!
  getWorkloadMangementByWlName(workloadName: String):WorkloadManagementList!
  getWorkloadRegion(workloadId: String!):WorkLoadRegions
}

extend type Mutation{
  createWorkloadManagement(input: WorkloadManagement): String!
  deleteWorkloadManagement(id: String): String!
  addWorkloadRegions(workLoadId: String!, regionCode: [String]!):String!
  removeWorkloadRegions(wlid:String, wlRegion: String):String!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_App_allocations_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["showCompleted"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showCompleted"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["showCompleted"] = arg0
	return args, nil
}

func (ec *executionContext) field_App_deploymentStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_App_parseConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 map[string]interface{}
	if tmp, ok := rawArgs["definition"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("definition"))
		arg0, err = ec.unmarshalOMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["definition"] = arg0
	return args, nil
}

func (ec *executionContext) field_App_releases_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_ActiveUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *bool
	if tmp, ok := rawArgs["IsActive"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsActive"))
		arg0, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsActive"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["IsDelete"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("IsDelete"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["IsDelete"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateAttachPaymentMethod_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAttachPaymentMethod
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateAttachPaymentMethod2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateAttachPaymentMethod(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CreatePaymentIntent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreatePaymentIntent
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePaymentIntent2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreatePaymentIntent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_CreateStripeSubscription_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateStripeSubscription
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateStripeSubscription2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateStripeSubscription(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_NodeActionAWS_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StartAndStopVM
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOStartAndStopVM2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartAndStopVM(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_NodeActionAzure_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StartAndStopVM
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOStartAndStopVM2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartAndStopVM(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_NodeAction_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.StartAndStopVM
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOStartAndStopVM2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartAndStopVM(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_S3Deployment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.S3DeployInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOS3DeployInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3DeployInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addDataDogBYOC_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DataDogInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDataDogInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDataDogInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addInviteUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_addPAT_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserPat
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUserPAT2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserPat(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addRegionUsingKubeConfig_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ClusterDetailsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOClusterDetailsInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetailsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserAddedregionsToOrganizatiom_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalOString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addUserToOrg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.AddUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOAddUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAddUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_addWorkloadRegions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["workLoadId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workLoadId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workLoadId"] = arg0
	var arg1 []*string
	if tmp, ok := rawArgs["regionCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionCode"))
		arg1, err = ec.unmarshalNString2ᚕᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regionCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_appTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConfigTemplate
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigTemplate2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_changePassword_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ChangePassword
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNChangePassword2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐChangePassword(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_checkGithubRepoPrivateOrPublic_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["githubUrl"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("githubUrl"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["githubUrl"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_clientSideLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ClientSideLogs
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNClientSideLogs2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClientSideLogs(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_configureRegions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ConfigureRegionsInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOConfigureRegionsInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigureRegionsInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateAppInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateAppInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createBusinessUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BusinessUnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBusinessUnitInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createDuploVolume_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.DuploVolumeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalODuploVolumeInput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploVolumeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Host
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOHost2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHost(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNamespaceInCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateNamespace
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateNamespace2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateNamespace(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createNifeTomlFile_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateAppToml
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateAppToml2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateAppToml(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganizationSecret_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.CreateSecretInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOCreateSecretInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateSecretInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createSubOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateSubOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateSubOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateSubOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.NewUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNewUser2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNewUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createWorkloadManagement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.WorkloadManagement
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOWorkloadManagement2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagement(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteAppTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["appId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["regionCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionCode"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regionCode"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteBusinessUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDataDogByoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["dataDogId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dataDogId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dataDogId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteDuploApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteKubeConfigRegion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrganizationSecret_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deletePAT_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteRequestedRegion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteS3Deployment_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["s3AppName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3AppName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["s3AppName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteSubOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeleteSubOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeleteSubOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteSubOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteWorkloadManagement_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deployImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeployImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeployImageInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deployK8S_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeployInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNDeployInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.EditAppByOrganization
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOEditAppByOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐEditAppByOrganization(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_inviteUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.InviteUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOInviteUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐInviteUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_login_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.Login
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNLogin2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐLogin(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_migrateOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MigrateOrganizationInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMigrateOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMigrateOrganizationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_moveApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.MoveAppInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNMoveAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMoveAppInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_mutipleRegion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.MultipleRegionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOMultipleRegionInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMultipleRegionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_newRegionRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalORegionRequest2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_newRegionsRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.RegionRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalORegionRequest2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_notificationInfo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Notification
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalONotification2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNotification(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_optimizeImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.OptimizeImageInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNOptimizeImageInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOptimizeImageInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_pauseApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.PauseAppInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNPauseAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPauseAppInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeFiles_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["s3AppName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3AppName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["s3AppName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeInviteuser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeUserOrg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["OrganizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("OrganizationId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["OrganizationId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["UserId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("UserId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["UserId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_removeWorkloadRegions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["wlid"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wlid"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["wlid"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["wlRegion"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wlRegion"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["wlRegion"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_requestingPicoNets_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_restartApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.RestartAppInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNRestartAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRestartAppInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resumeApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ResumeAppInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNResumeAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResumeAppInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setUserTokenExpireTime_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["ExpireTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ExpireTime"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ExpireTime"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_singleUpload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 graphql.Upload
	if tmp, ok := rawArgs["file"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("file"))
		arg0, err = ec.unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["file"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_startBuild_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.StartBuildInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNStartBuildInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartBuildInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateAppTemplate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ConfigTemplate
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNConfigTemplate2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigTemplate(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.UpdateAppInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateAppInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateBusinessUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.BusinessUnitInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNBusinessUnitInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateConfigApps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateConfig
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdateConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateConfig(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDataDogByoc_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DataDogInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalODataDogInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDataDogInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateDefaultRegion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.DefaultRegionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalODefaultRegionInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDefaultRegionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateImage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["imageName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageName"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["imageName"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganizationSecret_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *model.UpdateSecretInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalOUpdateSecretInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateSecretInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["org"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["defaulttype"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaulttype"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["defaulttype"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePAT_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UserPat
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUserPAT2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserPat(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRegistryIdToApp_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["roleId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("roleId"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["roleId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateUserInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdateUserInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUserwebhookURLSlack_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["webhookURL"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("webhookURL"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["webhookURL"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateVolume_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.UpdateVolumeInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOUpdateVolumeInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateVolumeInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_uploadCompanyLogo_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.Image
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOImage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐImage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_userProfileUpdated_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg0
	var arg1 *bool
	if tmp, ok := rawArgs["userProfileCreated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userProfileCreated"))
		arg1, err = ec.unmarshalOBoolean2ᚖbool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userProfileCreated"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_userRequestingByoh_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ByohRequest
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOByohRequest2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐByohRequest(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAppByAppId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_GetAvailableBuiltIn_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_appStatusList_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_app_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_appcompact_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_appsBusinessUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["businessUnit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessUnit"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["businessUnit"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_appsSubOrg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["subOrgSlug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrgSlug"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subOrgSlug"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_appsWorkloadIdOrUserRole_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["workloadId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workloadId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workloadId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["userId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["userId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_appsWorkload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["organiztionId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organiztionId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organiztionId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_apps_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orgSlug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgSlug"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgSlug"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_checkAppById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getAppRegion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getAvailabilityCluster_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["isLatency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isLatency"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isLatency"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessUnitById_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessUnitByOrgId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["subOrgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrgId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subOrgId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getBusinessUnit_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["subOrgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrgId"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subOrgId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getCloudRegions_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["type"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["type"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getClusterDetailsByOrgIdMultipleReg_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getClusterDetailsByOrgId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getClusterDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["regCode"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regCode"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regCode"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getDuploStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getElbUrl_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *model.ElbURLInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalOElbUrlInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐElbURLInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHostByName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["instanceName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["instanceName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getHost_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getOrganizationByOrgId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getParentIdBySubOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["subOrgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subOrgId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getQueryLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.GetQueryLog
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNGetQueryLog2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetQueryLog(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRegionStatus_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["appId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getRegistryByUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["regType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regType"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["regType"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_getS3deployments_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["s3AppName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3AppName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["s3AppName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSecretByRegistryId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["secretId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["secretId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getSecret_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserByAdminAndOrganization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getUserByOrganizationId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["organizationId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["organizationId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getVolumeByAppId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getWorkloadMangementByWlId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["workloadId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workloadId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workloadId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getWorkloadMangementByWlName_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["workloadName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workloadName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workloadName"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getWorkloadMangementByorgnizationId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["orgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orgId"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["subOrgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrgId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subOrgId"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["businessUnitId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessUnitId"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["businessUnitId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getWorkloadRegion_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["workloadId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workloadId"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["workloadId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getclusterLog_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["region"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["region"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_organization_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["slug"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("slug"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["slug"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_subOrganizationsByParentId_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["parentOrgId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrgId"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parentOrgId"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userActivitiesByDate_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startDate"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endDate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_userActivities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["first"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("first"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["first"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_userDeploymentCountDetails_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["startDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startDate"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startDate"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["endDate"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endDate"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["endDate"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_userMetrics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["appName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appName"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Activity_Id(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_Type(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_Activities(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_Message(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Activity_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Activity) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Activity",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Actor_type(ctx context.Context, field graphql.CollectedField, obj *model.Actor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Actor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AddedDataDog_id(ctx context.Context, field graphql.CollectedField, obj *model.AddedDataDog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddedDataDog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AddedDataDog_apiKey(ctx context.Context, field graphql.CollectedField, obj *model.AddedDataDog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddedDataDog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AddedDataDog_appKey(ctx context.Context, field graphql.CollectedField, obj *model.AddedDataDog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddedDataDog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AddedDataDog_apiEndpoint(ctx context.Context, field graphql.CollectedField, obj *model.AddedDataDog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddedDataDog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APIEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AddedDataDog_clusterId(ctx context.Context, field graphql.CollectedField, obj *model.AddedDataDog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddedDataDog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AddedDataDog_clusterDetails(ctx context.Context, field graphql.CollectedField, obj *model.AddedDataDog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AddedDataDog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ClusterDetails)
	fc.Result = res
	return ec.marshalOClusterDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationEvent_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.AllocationEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationEvent_type(ctx context.Context, field graphql.CollectedField, obj *model.AllocationEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationEvent_message(ctx context.Context, field graphql.CollectedField, obj *model.AllocationEvent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_id(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_idShort(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IDShort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_version(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_region(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_desiredStatus(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_healthy(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Healthy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_canary(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Canary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_failed(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Failed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_restarts(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Restarts, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_checks(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.CheckState)
	fc.Result = res
	return ec.marshalOCheckState2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheckState(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_events(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Events, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AllocationEvent)
	fc.Result = res
	return ec.marshalOAllocationEvent2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationEvent(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_latestVersion(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LatestVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_passingCheckCount(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassingCheckCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_warningCheckCount(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WarningCheckCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_criticalCheckCount(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CriticalCheckCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_transitioning(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transitioning, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AllocationStatus_recentLogs(ctx context.Context, field graphql.CollectedField, obj *model.AllocationStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AllocationStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecentLogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.LogEntry)
	fc.Result = res
	return ec.marshalOLogEntry2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐLogEntry(ctx, field.Selections, res)
}

func (ec *executionContext) _App_id(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _App_name(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _App_status(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _App_deployed(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _App_hostname(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _App_appUrl(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_version(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _App_release(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _App_organization(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _App_secrets(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secrets, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Secret)
	fc.Result = res
	return ec.marshalOSecret2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSecret(ctx, field.Selections, res)
}

func (ec *executionContext) _App_currentRelease(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CurrentRelease, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _App_releases(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_App_releases_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Releases, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Releases)
	fc.Result = res
	return ec.marshalOReleases2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐReleases(ctx, field.Selections, res)
}

func (ec *executionContext) _App_ipAddresses(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IPAddresses)
	fc.Result = res
	return ec.marshalOIPAddresses2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddresses(ctx, field.Selections, res)
}

func (ec *executionContext) _App_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IPAddress)
	fc.Result = res
	return ec.marshalOIPAddress2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _App_builds(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Builds, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Builds)
	fc.Result = res
	return ec.marshalOBuilds2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuilds(ctx, field.Selections, res)
}

func (ec *executionContext) _App_changes(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Changes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Changes)
	fc.Result = res
	return ec.marshalOChanges2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐChanges(ctx, field.Selections, res)
}

func (ec *executionContext) _App_certificates(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certificates, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Certificates)
	fc.Result = res
	return ec.marshalOCertificates2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCertificates(ctx, field.Selections, res)
}

func (ec *executionContext) _App_certificate(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Certificate, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppCertificate)
	fc.Result = res
	return ec.marshalOAppCertificate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCertificate(ctx, field.Selections, res)
}

func (ec *executionContext) _App_services(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Service)
	fc.Result = res
	return ec.marshalOService2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _App_config(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppConfig)
	fc.Result = res
	return ec.marshalOAppConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _App_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _App_parseConfig(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_App_parseConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParseConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppConfig)
	fc.Result = res
	return ec.marshalOAppConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _App_allocations(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_App_allocations_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AllocationStatus)
	fc.Result = res
	return ec.marshalOAllocationStatus2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _App_allocation(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allocation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AllocationStatus)
	fc.Result = res
	return ec.marshalOAllocationStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _App_deploymentStatus(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_App_deploymentStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeploymentStatus)
	fc.Result = res
	return ec.marshalODeploymentStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _App_autoscaling(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Autoscaling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AutoscalingConfig)
	fc.Result = res
	return ec.marshalOAutoscalingConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAutoscalingConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _App_vmSize(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VMSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.VMSize)
	fc.Result = res
	return ec.marshalOVMSize2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMSize(ctx, field.Selections, res)
}

func (ec *executionContext) _App_regions(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Region)
	fc.Result = res
	return ec.marshalORegion2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _App_backupRegions(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BackupRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Region)
	fc.Result = res
	return ec.marshalORegion2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _App_volumes(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Volumes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Volumes)
	fc.Result = res
	return ec.marshalOVolumes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumes(ctx, field.Selections, res)
}

func (ec *executionContext) _App_imageName(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_port(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_secretRegistryId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretRegistryID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_instanceId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_dockerId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_hostId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_tenantId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_envArgs(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvArgs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_deployType(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeployType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _App_containerId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_builtinType(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuiltinType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_workloadManagementId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkloadManagementID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_WorkloadManagementName(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkloadManagementName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_WorkloadManagementEndPoint(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkloadManagementEndPoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_organizationName(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_subOrganizationId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_subOrganizationName(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganizationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_businessUnitId(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_businessUnitName(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_clusterDetials(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterDetials, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ClusterDetail)
	fc.Result = res
	return ec.marshalOClusterDetail2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetail(ctx, field.Selections, res)
}

func (ec *executionContext) _App_replicas(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _App_userDetails(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetUserByID)
	fc.Result = res
	return ec.marshalOGetUserById2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, field.Selections, res)
}

func (ec *executionContext) _App_deploymentTime(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_buildTime(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _App_buildLogsUrl(ctx context.Context, field graphql.CollectedField, obj *model.App) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "App",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildLogsURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_id(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_acmeDNSConfigured(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcmeDNSConfigured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_acmeALPNConfigured(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AcmeALPNConfigured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_configured(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Configured, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_certificateAuthority(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CertificateAuthority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_DNSProvider(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DNSProvider, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_dNSValidationInstructions(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DNSValidationInstructions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_dNSValidationHostname(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DNSValidationHostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_dNSValidationTarget(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DNSValidationTarget, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_hostname(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_source(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_clientStatus(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_isApex(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_isWildcard(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsWildcard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCertificate_issued(ctx context.Context, field graphql.CollectedField, obj *model.AppCertificate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCertificate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Issued, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Issued)
	fc.Result = res
	return ec.marshalOIssued2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIssued(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_id(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_actor(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Actor)
	fc.Result = res
	return ec.marshalOActor2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐActor(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_status(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_description(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_reason(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppChange_user(ctx context.Context, field graphql.CollectedField, obj *model.AppChange) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppChange",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_id(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_name(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_status(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_deployed(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_hostname(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_appUrl(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_version(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_release(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_organization(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_ipAddresses(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddresses, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.IPAddresses)
	fc.Result = res
	return ec.marshalOIPAddresses2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddresses(ctx, field.Selections, res)
}

func (ec *executionContext) _AppCompact_services(ctx context.Context, field graphql.CollectedField, obj *model.AppCompact) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppCompact",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Service)
	fc.Result = res
	return ec.marshalOService2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _AppConfig_definition(ctx context.Context, field graphql.CollectedField, obj *model.AppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Definition, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _AppConfig_services(ctx context.Context, field graphql.CollectedField, obj *model.AppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Service)
	fc.Result = res
	return ec.marshalOService2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _AppConfig_valid(ctx context.Context, field graphql.CollectedField, obj *model.AppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Valid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppConfig_build(ctx context.Context, field graphql.CollectedField, obj *model.AppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Build, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Builder)
	fc.Result = res
	return ec.marshalOBuilder2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuilder(ctx, field.Selections, res)
}

func (ec *executionContext) _AppConfig_errors(ctx context.Context, field graphql.CollectedField, obj *model.AppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Errors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppDeploymentRegion_regions(ctx context.Context, field graphql.CollectedField, obj *model.AppDeploymentRegion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppDeploymentRegion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Region)
	fc.Result = res
	return ec.marshalORegion2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _AppDeploymentRegion_availableRegions(ctx context.Context, field graphql.CollectedField, obj *model.AppDeploymentRegion) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppDeploymentRegion",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Region)
	fc.Result = res
	return ec.marshalORegion2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInBusinessUnit_businessUnitId(ctx context.Context, field graphql.CollectedField, obj *model.AppInBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppInBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInBusinessUnit_businessUnitName(ctx context.Context, field graphql.CollectedField, obj *model.AppInBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppInBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInBusinessUnit_appsInBusinessUnit(ctx context.Context, field graphql.CollectedField, obj *model.AppInBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppInBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsInBusinessUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.App)
	fc.Result = res
	return ec.marshalOApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInSubOrg_subOrgId(ctx context.Context, field graphql.CollectedField, obj *model.AppInSubOrg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppInSubOrg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInSubOrg_subOrgName(ctx context.Context, field graphql.CollectedField, obj *model.AppInSubOrg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppInSubOrg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppInSubOrg_appsInSubOrgs(ctx context.Context, field graphql.CollectedField, obj *model.AppInSubOrg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppInSubOrg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsInSubOrgs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.App)
	fc.Result = res
	return ec.marshalOApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _AppOrgCount_organization(ctx context.Context, field graphql.CollectedField, obj *model.AppOrgCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppOrgCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppOrgCount_apps(ctx context.Context, field graphql.CollectedField, obj *model.AppOrgCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppOrgCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_id(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_name(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_deployed(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_hostname(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hostname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_version(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_appURL(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_organization(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_deploymentStatus(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeploymentStatus)
	fc.Result = res
	return ec.marshalODeploymentStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _AppStatus_allocations(ctx context.Context, field graphql.CollectedField, obj *model.AppStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AllocationStatus)
	fc.Result = res
	return ec.marshalOAllocationStatus2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Apps_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Apps) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Apps",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.App)
	fc.Result = res
	return ec.marshalOApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails_totalOrgCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsAndSubOrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsAndSubOrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOrgCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails_totalSubOrgCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsAndSubOrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsAndSubOrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalSubOrgCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails_totalBusinessUnitCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsAndSubOrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsAndSubOrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalBusinessUnitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails_totalAppCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsAndSubOrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsAndSubOrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAppCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails_orgByAppCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsAndSubOrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsAndSubOrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgByAppCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AppsOrgsSubCount)
	fc.Result = res
	return ec.marshalOAppsOrgsSubCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsSubCount(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails_region(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsAndSubOrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsAndSubOrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegionAppCount)
	fc.Result = res
	return ec.marshalOregionAppCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionAppCount(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsCountDetails_totalOrgCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOrgCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsCountDetails_totalAppCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalAppCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsCountDetails_orgByAppCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgByAppCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AppsOrgsCount)
	fc.Result = res
	return ec.marshalOAppsOrgsCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsCount(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsAndOrgsCountDetails_region(ctx context.Context, field graphql.CollectedField, obj *model.AppsAndOrgsCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsAndOrgsCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegionAppCount)
	fc.Result = res
	return ec.marshalOregionAppCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionAppCount(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsCountbyBusinessUnit_appsCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsCountbyBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsCountbyBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsCountbyBusinessUnit_newApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsCountbyBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsCountbyBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsCountbyBusinessUnit_activeApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsCountbyBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsCountbyBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsCountbyBusinessUnit_inActiveApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsCountbyBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsCountbyBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InActiveApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsCount_organization(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsCount_appsCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsCount_newApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsCount_activeApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsCount_inActiveApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InActiveApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsSubCount_organization(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsSubCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsSubCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsSubCount_appsCount(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsSubCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsSubCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsSubCount_newApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsSubCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsSubCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NewApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsSubCount_activeApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsSubCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsSubCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsSubCount_inActiveApp(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsSubCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsSubCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InActiveApp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AppsOrgsSubCount_subOrganization(ctx context.Context, field graphql.CollectedField, obj *model.AppsOrgsSubCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AppsOrgsSubCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubOrgCount)
	fc.Result = res
	return ec.marshalOSubOrgCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrgCount(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_id(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_customerId(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_paymentMethodId(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PaymentMethodID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_email(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_name(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_city(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.City, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_country(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Country, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_state(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.State, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AttachPayment_type(ctx context.Context, field graphql.CollectedField, obj *model.AttachPayment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AttachPayment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingConfig_balanceRegions(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BalanceRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingConfig_enabled(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Enabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingConfig_maxCount(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingConfig_minCount(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingConfig_regions(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AutoscalingRegionConfig)
	fc.Result = res
	return ec.marshalOAutoscalingRegionConfig2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAutoscalingRegionConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingRegionConfig_code(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingRegionConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingRegionConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingRegionConfig_minCount(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingRegionConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingRegionConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MinCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _AutoscalingRegionConfig_weight(ctx context.Context, field graphql.CollectedField, obj *model.AutoscalingRegionConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AutoscalingRegionConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Weight, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_id(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_inProgress(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_status(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_user(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_logs(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Logs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_image(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Build_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Build) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Build",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildArgsInput_name(ctx context.Context, field graphql.CollectedField, obj *model.BuildArgsInput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BuildArgsInput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BuildArgsInput_value(ctx context.Context, field graphql.CollectedField, obj *model.BuildArgsInput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BuildArgsInput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Builder_builder(ctx context.Context, field graphql.CollectedField, obj *model.Builder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Builder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Builder, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Builder_builtin(ctx context.Context, field graphql.CollectedField, obj *model.Builder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Builder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Builtin, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Builder_image(ctx context.Context, field graphql.CollectedField, obj *model.Builder) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Builder",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Builds_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Builds) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Builds",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessUnitCount_businessUnitCount(ctx context.Context, field graphql.CollectedField, obj *model.BusinessUnitCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessUnitCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _BusinessUnitCount_appsCount(ctx context.Context, field graphql.CollectedField, obj *model.BusinessUnitCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "BusinessUnitCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppsCountbyBusinessUnit)
	fc.Result = res
	return ec.marshalOAppsCountbyBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsCountbyBusinessUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Certificates_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Certificates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Certificates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AppCertificate)
	fc.Result = res
	return ec.marshalOAppCertificate2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCertificate(ctx, field.Selections, res)
}

func (ec *executionContext) _Chages_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Chages) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Chages",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AppChange)
	fc.Result = res
	return ec.marshalOAppChange2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppChange(ctx, field.Selections, res)
}

func (ec *executionContext) _Changes_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Changes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Changes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AppChange)
	fc.Result = res
	return ec.marshalOAppChange2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppChange(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_type(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_interval(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interval, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_timeout(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timeout, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_httpMethod(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPMethod, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_httpPath(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_httpProtocol(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPProtocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_httpSkipTLSVerify(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPSkipTLSVerify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Check_httpHeaders(ctx context.Context, field graphql.CollectedField, obj *model.Check) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Check",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTTPHeaders, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HTTPHeader)
	fc.Result = res
	return ec.marshalOHTTPHeader2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHTTPHeader(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckState_name(ctx context.Context, field graphql.CollectedField, obj *model.CheckState) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckState",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckState_status(ctx context.Context, field graphql.CollectedField, obj *model.CheckState) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckState",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckState_output(ctx context.Context, field graphql.CollectedField, obj *model.CheckState) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckState",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Output, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CheckState_serviceName(ctx context.Context, field graphql.CollectedField, obj *model.CheckState) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CheckState",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CloudRegions_code(ctx context.Context, field graphql.CollectedField, obj *model.CloudRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CloudRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CloudRegions_name(ctx context.Context, field graphql.CollectedField, obj *model.CloudRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CloudRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CloudRegions_type(ctx context.Context, field graphql.CollectedField, obj *model.CloudRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CloudRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_region_code(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_regionName(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_cluster_config_path(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterConfigPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_ebl_enabled(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EblEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_port(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_cloudType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CloudType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_clusterType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_providerType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_externalBaseAddress(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalBaseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_externalAgentPlatform(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalAgentPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_externalLBType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalLBType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_externalCloudType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalCloudType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_interface(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interface, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_route53CountryCode(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route53CountryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_tenantId(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetail_allocationTag(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_id(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_regionCode(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_providerType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProviderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_clusterType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_regionName(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_externalBaseAddress(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalBaseAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_externalAgentPlatForm(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalAgentPlatForm, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_externalLBType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalLBType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_externalCloudType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalCloudType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_interfaceType(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InterfaceType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_route53countryCode(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Route53countryCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_tenantId(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_allocationTag(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllocationTag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_loadBalancerURL(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadBalancerURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_clusterConfigPath(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterConfigPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_clusterConfigUrl(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterConfigURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_eblEnabled(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EblEnabled, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterDetails_port(ctx context.Context, field graphql.CollectedField, obj *model.ClusterDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_id(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_name(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_regionCode(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_ipAddress(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_clusterConfigPath(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterConfigPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_clustertype(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Clustertype, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_isLatency(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsLatency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_latitude(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_longitude(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterInfo_loadBalancerURL(ctx context.Context, field graphql.CollectedField, obj *model.ClusterInfo) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterInfo",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadBalancerURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _ClusterNodes_nodes(ctx context.Context, field graphql.CollectedField, obj *model.ClusterNodes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ClusterNodes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ClusterInfo)
	fc.Result = res
	return ec.marshalOClusterInfo2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterInfo(ctx, field.Selections, res)
}

func (ec *executionContext) _Config_registry(ctx context.Context, field graphql.CollectedField, obj *model.Config) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Config",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Registry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Registry)
	fc.Result = res
	return ec.marshalORegistry2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegistry(ctx, field.Selections, res)
}

func (ec *executionContext) _Config_domain_mapping(ctx context.Context, field graphql.CollectedField, obj *model.Config) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Config",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DomainMapping, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DomainMapping)
	fc.Result = res
	return ec.marshalODomainMapping2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomainMapping(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_id(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_name(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_config(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Config, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppConfig)
	fc.Result = res
	return ec.marshalOAppConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_envArgs(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvArgs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_routingPolicy(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutingPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_volumeSize(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VolumeSize, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_isActive(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_cpuLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPULimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_memoryLimit(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_cpuRequests(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPURequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ConfigAppTemplates_memoryRequests(ctx context.Context, field graphql.CollectedField, obj *model.ConfigAppTemplates) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ConfigAppTemplates",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryRequests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _CreateOrganization_organization(ctx context.Context, field graphql.CollectedField, obj *model.CreateOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CreateOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrentUserEmail_email(ctx context.Context, field graphql.CollectedField, obj *model.CurrentUserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrentUserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrentUserEmail_firstName(ctx context.Context, field graphql.CollectedField, obj *model.CurrentUserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrentUserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CurrentUserEmail_lastName(ctx context.Context, field graphql.CollectedField, obj *model.CurrentUserEmail) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CurrentUserEmail",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_id(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_name(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_FQDN(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fqdn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_isApex(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsApex, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_isWildcard(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsWildcard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_isSystem(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsSystem, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_TTL(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TTL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_type(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_rData(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DNSRecord_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecord) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DNSRecord",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteOrganization_deletedOrganizationId(ctx context.Context, field graphql.CollectedField, obj *model.DeleteOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeleteOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeleteSubOrganization_deletedSubOrganizationId(ctx context.Context, field graphql.CollectedField, obj *model.DeleteSubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeleteSubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedSubOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployImage_release(ctx context.Context, field graphql.CollectedField, obj *model.DeployImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Release, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Release)
	fc.Result = res
	return ec.marshalORelease2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_deploymentName(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_serviceName(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_hostName(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_url(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_Id(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_existDeployment(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExistDeployment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_releaseId(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_loadBalanceURL(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LoadBalanceURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeployOutput_containerId(ctx context.Context, field graphql.CollectedField, obj *model.DeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentCountByDate_date(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentCountByDate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentCountByDate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentCountByDate_deployed(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentCountByDate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentCountByDate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_id(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_description(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_inProgress(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_successful(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Successful, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_allocations(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Allocations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AllocationStatus)
	fc.Result = res
	return ec.marshalOAllocationStatus2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_version(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_desiredCount(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DesiredCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_placedCount(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlacedCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_healthyCount(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HealthyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DeploymentStatus_unhealthyCount(ctx context.Context, field graphql.CollectedField, obj *model.DeploymentStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DeploymentStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnhealthyCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DnsRecords_nodes(ctx context.Context, field graphql.CollectedField, obj *model.DNSRecords) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DnsRecords",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DNSRecord)
	fc.Result = res
	return ec.marshalODNSRecord2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDNSRecord(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_id(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_name(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_organization(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_autoRenew(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AutoRenew, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_delegatedNameservers(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DelegatedNameservers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_zoneNameservers(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ZoneNameservers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_dnsStatus(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DNSStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_registrationStatus(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_expireAt(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpireAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domain_dnsRecords(ctx context.Context, field graphql.CollectedField, obj *model.Domain) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domain",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DNSRecords, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DNSRecords)
	fc.Result = res
	return ec.marshalODnsRecords2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDNSRecords(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainMapping_domain_name(ctx context.Context, field graphql.CollectedField, obj *model.DomainMapping) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainMapping",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DomainName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainMapping_ip_address(ctx context.Context, field graphql.CollectedField, obj *model.DomainMapping) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainMapping",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IPAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainMapping_kube_config_path(ctx context.Context, field graphql.CollectedField, obj *model.DomainMapping) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainMapping",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KubeConfigPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DomainMapping_node_name(ctx context.Context, field graphql.CollectedField, obj *model.DomainMapping) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DomainMapping",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NodeName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Domains_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Domains) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domains",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Domain)
	fc.Result = res
	return ec.marshalODomain2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomain(ctx, field.Selections, res)
}

func (ec *executionContext) _Domains_edges(ctx context.Context, field graphql.CollectedField, obj *model.Domains) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Domains",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Edges)
	fc.Result = res
	return ec.marshalOEdges2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐEdges(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_id(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_status(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_UserId(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_info(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Info, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_progress(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_pollCount(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PollCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _DuploDeployOutput_UpdatedAt(ctx context.Context, field graphql.CollectedField, obj *model.DuploDeployOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "DuploDeployOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Duplolog_data(ctx context.Context, field graphql.CollectedField, obj *model.Duplolog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Duplolog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Duplolog_dockerId(ctx context.Context, field graphql.CollectedField, obj *model.Duplolog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Duplolog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DockerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Duplolog_hostName(ctx context.Context, field graphql.CollectedField, obj *model.Duplolog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Duplolog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Duplolog_stdOut(ctx context.Context, field graphql.CollectedField, obj *model.Duplolog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Duplolog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdOut, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Duplolog_stdErr(ctx context.Context, field graphql.CollectedField, obj *model.Duplolog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Duplolog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StdErr, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Duplolog_tail(ctx context.Context, field graphql.CollectedField, obj *model.Duplolog) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Duplolog",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Edges_cursor(ctx context.Context, field graphql.CollectedField, obj *model.Edges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Edges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Edges_node(ctx context.Context, field graphql.CollectedField, obj *model.Edges) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Edges",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Domain)
	fc.Result = res
	return ec.marshalODomain2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomain(ctx, field.Selections, res)
}

func (ec *executionContext) _ElbUrl_elbUrl(ctx context.Context, field graphql.CollectedField, obj *model.ElbURL) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ElbUrl",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElbURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _File_link(ctx context.Context, field graphql.CollectedField, obj *model.File) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "File",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Link, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetClientSideLogs_id(ctx context.Context, field graphql.CollectedField, obj *model.GetClientSideLogs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetClientSideLogs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetClientSideLogs_message(ctx context.Context, field graphql.CollectedField, obj *model.GetClientSideLogs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetClientSideLogs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetClientSideLogs_level(ctx context.Context, field graphql.CollectedField, obj *model.GetClientSideLogs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetClientSideLogs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetClientSideLogs_timeStamp(ctx context.Context, field graphql.CollectedField, obj *model.GetClientSideLogs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetClientSideLogs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetClientSideLogs_userId(ctx context.Context, field graphql.CollectedField, obj *model.GetClientSideLogs) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetClientSideLogs",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSecRegistry_id(ctx context.Context, field graphql.CollectedField, obj *model.GetSecRegistry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSecRegistry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetSecRegistry_name(ctx context.Context, field graphql.CollectedField, obj *model.GetSecRegistry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetSecRegistry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_id(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_email(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_companyName(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_location(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_industry(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_firstName(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_lastName(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_ssoType(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SsoType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_freePlan(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FreePlan, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_profileImageUrl(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_isActive(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_isDelete(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDelete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_companyId(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_userProfileCreated(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserProfileCreated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_roleId(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_companylogo(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Companylogo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_mode(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_slackWebhookURL(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SlackWebhookURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserById_organization(ctx context.Context, field graphql.CollectedField, obj *model.GetUserByID) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserById",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organization, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Organizations)
	fc.Result = res
	return ec.marshalOOrganizations2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserMetrics_resolverIp(ctx context.Context, field graphql.CollectedField, obj *model.GetUserMetrics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserMetrics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolverIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserMetrics_timeStamp(ctx context.Context, field graphql.CollectedField, obj *model.GetUserMetrics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserMetrics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserMetrics_queryType(ctx context.Context, field graphql.CollectedField, obj *model.GetUserMetrics) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserMetrics",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserPAT_id(ctx context.Context, field graphql.CollectedField, obj *model.GetUserPat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserPAT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserPAT_type(ctx context.Context, field graphql.CollectedField, obj *model.GetUserPat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserPAT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserPAT_patToken(ctx context.Context, field graphql.CollectedField, obj *model.GetUserPat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserPAT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PatToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserPAT_userId(ctx context.Context, field graphql.CollectedField, obj *model.GetUserPat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserPAT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserPAT_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.GetUserPat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserPAT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserPAT_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.GetUserPat) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserPAT",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_id(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_name(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_registryType(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistryType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_userName(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_passWord(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PassWord, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_Url(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_keyFileContent(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.KeyFileContent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_registryName(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_isActive(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _GetUserSecret_secretType(ctx context.Context, field graphql.CollectedField, obj *model.GetUserSecret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GetUserSecret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HTTPHeader_name(ctx context.Context, field graphql.CollectedField, obj *model.HTTPHeader) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HTTPHeader",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HTTPHeader_value(ctx context.Context, field graphql.CollectedField, obj *model.HTTPHeader) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HTTPHeader",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_id(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_orgId(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_type(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_serviceAccountURL(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceAccountURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_status(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_zone(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_instanceName(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_instanceId(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_accessKey(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_secretKey(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _HostDetails_isActive(ctx context.Context, field graphql.CollectedField, obj *model.HostDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_id(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_orgId(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_orgName(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_type(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_serviceAccountURL(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ServiceAccountURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_status(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_zone(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_instanceName(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_instanceId(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_accessKey(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_secretKey(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_subscriptionId(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_resourceGroupName(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResourceGroupName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_clientId(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_clientSecret(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_tenantId(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TenantID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _HostPayload_InstanceActivity(ctx context.Context, field graphql.CollectedField, obj *model.HostPayload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "HostPayload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InstanceActivity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Activity)
	fc.Result = res
	return ec.marshalOActivity2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐActivity(ctx, field.Selections, res)
}

func (ec *executionContext) _IPAddress_id(ctx context.Context, field graphql.CollectedField, obj *model.IPAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IPAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IPAddress_address(ctx context.Context, field graphql.CollectedField, obj *model.IPAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IPAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IPAddress_type(ctx context.Context, field graphql.CollectedField, obj *model.IPAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IPAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _IPAddress_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.IPAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IPAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _IPAddresses_nodes(ctx context.Context, field graphql.CollectedField, obj *model.IPAddresses) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "IPAddresses",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.IPAddress)
	fc.Result = res
	return ec.marshalOIPAddress2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserOutputMessage_message(ctx context.Context, field graphql.CollectedField, obj *model.InviteUserOutputMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InviteUserOutputMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _InviteUserOutputMessage_userId(ctx context.Context, field graphql.CollectedField, obj *model.InviteUserOutputMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "InviteUserOutputMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_expireAt(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExpireAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issue_type(ctx context.Context, field graphql.CollectedField, obj *model.Issue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Issued_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Issued) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Issued",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Issue)
	fc.Result = res
	return ec.marshalOIssue2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIssue(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_id(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_title(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_address(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Address, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_user(ctx context.Context, field graphql.CollectedField, obj *model.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalNUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_message(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_level(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Level, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_instance(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_region(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _LogEntry_meta(ctx context.Context, field graphql.CollectedField, obj *model.LogEntry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "LogEntry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Meta, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Meta)
	fc.Result = res
	return ec.marshalOMeta2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMeta(ctx, field.Selections, res)
}

func (ec *executionContext) _Members_edges(ctx context.Context, field graphql.CollectedField, obj *model.Members) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Members",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationMembershipEdge)
	fc.Result = res
	return ec.marshalOOrganizationMembershipEdge2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationMembershipEdge(ctx, field.Selections, res)
}

func (ec *executionContext) _Meta_instance(ctx context.Context, field graphql.CollectedField, obj *model.Meta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Instance, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Meta_region(ctx context.Context, field graphql.CollectedField, obj *model.Meta) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Meta",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MultipleRegionResponse_region(ctx context.Context, field graphql.CollectedField, obj *model.MultipleRegionResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MultipleRegionResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _MultipleRegionResponse_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.MultipleRegionResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "MultipleRegionResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateApp(rctx, args["input"].(model.CreateAppInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NewApp)
	fc.Result = res
	return ec.marshalNNewApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNewApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteApp(rctx, args["appId"].(string), args["regionCode"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_moveApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_moveApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MoveApp(rctx, args["input"].(model.MoveAppInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.NewApp)
	fc.Result = res
	return ec.marshalNNewApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNewApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_pauseApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_pauseApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PauseApp(rctx, args["input"].(model.PauseAppInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.SuspendApp)
	fc.Result = res
	return ec.marshalNSuspendApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSuspendApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resumeApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resumeApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResumeApp(rctx, args["input"].(model.ResumeAppInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ResumeApp)
	fc.Result = res
	return ec.marshalNResumeApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResumeApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_restartApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_restartApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RestartApp(rctx, args["input"].(model.RestartAppInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RestartApp)
	fc.Result = res
	return ec.marshalNRestartApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRestartApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_configureRegions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_configureRegions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ConfigureRegions(rctx, args["input"].(*model.ConfigureRegionsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateApp(rctx, args["input"].(model.UpdateAppInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateImage(rctx, args["appName"].(*string), args["imageName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateImageOutput)
	fc.Result = res
	return ec.marshalOUpdateImageOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateImageOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_editApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_editApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditApp(rctx, args["input"].(*model.EditAppByOrganization))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateConfigApps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateConfigApps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateConfigApps(rctx, args["input"].(*model.UpdateConfig))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateAppConfig)
	fc.Result = res
	return ec.marshalOUpdateAppConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateAppConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_appTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_appTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AppTemplate(rctx, args["input"].(model.ConfigTemplate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateAppTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateAppTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateAppTemplate(rctx, args["input"].(model.ConfigTemplate))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteAppTemplate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteAppTemplate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteAppTemplate(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_checkGithubRepoPrivateOrPublic(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_checkGithubRepoPrivateOrPublic_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CheckGithubRepoPrivateOrPublic(rctx, args["githubUrl"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createNifeTomlFile(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createNifeTomlFile_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNifeTomlFile(rctx, args["input"].(*model.CreateAppToml))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(model.NewUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_login(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_login_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Login(rctx, args["input"].(model.Login))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createBusinessUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createBusinessUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateBusinessUnit(rctx, args["input"].(model.BusinessUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateBusinessUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateBusinessUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateBusinessUnit(rctx, args["input"].(model.BusinessUnitInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteBusinessUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteBusinessUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteBusinessUnit(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addRegionUsingKubeConfig(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addRegionUsingKubeConfig_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddRegionUsingKubeConfig(rctx, args["input"].(*model.ClusterDetailsInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteKubeConfigRegion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteKubeConfigRegion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteKubeConfigRegion(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deployImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deployImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeployImage(rctx, args["input"].(model.DeployImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeployImage)
	fc.Result = res
	return ec.marshalNDeployImage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_optimizeImage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_optimizeImage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().OptimizeImage(rctx, args["input"].(model.OptimizeImageInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OptimizeImage)
	fc.Result = res
	return ec.marshalNOptimizeImage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOptimizeImage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deployK8S(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deployK8S_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeployK8s(rctx, args["input"].(model.DeployInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeployOutput)
	fc.Result = res
	return ec.marshalNDeployOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_startBuild(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_startBuild_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().StartBuild(rctx, args["input"].(model.StartBuildInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StartBuild)
	fc.Result = res
	return ec.marshalNStartBuild2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartBuild(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_S3Deployment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_S3Deployment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().S3Deployment(rctx, args["input"].(*model.S3DeployInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeFiles(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeFiles_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveFiles(rctx, args["s3AppName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteS3Deployment(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteS3Deployment_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteS3Deployment(rctx, args["s3AppName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_clientSideLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_clientSideLog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClientSideLog(rctx, args["input"].(model.ClientSideLogs))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDuploApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDuploApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDuploApp(rctx, args["appName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OutputMessage)
	fc.Result = res
	return ec.marshalOOutputMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOutputMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_singleUpload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_singleUpload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SingleUpload(rctx, args["file"].(graphql.Upload))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.File)
	fc.Result = res
	return ec.marshalNFile2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐFile(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addDataDogBYOC(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addDataDogBYOC_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddDataDogByoc(rctx, args["input"].(model.DataDogInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDataDogByoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDataDogByoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDataDogByoc(rctx, args["input"].(*model.DataDogInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteDataDogByoc(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteDataDogByoc_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteDataDogByoc(rctx, args["dataDogId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_migrateOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_migrateOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MigrateOrganization(rctx, args["input"].(model.MigrateOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrganization(rctx, args["input"].(model.CreateOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateOrganization)
	fc.Result = res
	return ec.marshalNCreateOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createSubOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createSubOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSubOrganization(rctx, args["input"].(model.CreateSubOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CreateOrganization)
	fc.Result = res
	return ec.marshalNCreateOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrganization(rctx, args["input"].(model.DeleteOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteOrganization)
	fc.Result = res
	return ec.marshalNDeleteOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteSubOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteSubOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteSubOrganization(rctx, args["input"].(model.DeleteSubOrganizationInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.DeleteSubOrganization)
	fc.Result = res
	return ec.marshalNDeleteSubOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteSubOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createOrganizationSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createOrganizationSecret_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateOrganizationSecret(rctx, args["input"].(*model.CreateSecretInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganizationSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganizationSecret_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganizationSecret(rctx, args["name"].(*string), args["input"].(*model.UpdateSecretInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteOrganizationSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteOrganizationSecret_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteOrganizationSecret(rctx, args["name"].(*string), args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRegistryIdToApp(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRegistryIdToApp_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRegistryIDToApp(rctx, args["appName"].(string), args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Response)
	fc.Result = res
	return ec.marshalNResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateOrganization(rctx, args["org"].(*string), args["defaulttype"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createNamespaceInCluster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createNamespaceInCluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateNamespaceInCluster(rctx, args["input"].(*model.CreateNamespace))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addUserAddedregionsToOrganizatiom(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addUserAddedregionsToOrganizatiom_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserAddedregionsToOrganizatiom(rctx, args["organizationId"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CreatePaymentIntent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CreatePaymentIntent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePaymentIntent(rctx, args["input"].(model.CreatePaymentIntent))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Payment)
	fc.Result = res
	return ec.marshalNPayment2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CreateAttachPaymentMethod(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CreateAttachPaymentMethod_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateAttachPaymentMethod(rctx, args["input"].(model.CreateAttachPaymentMethod))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AttachPayment)
	fc.Result = res
	return ec.marshalNAttachPayment2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAttachPayment(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_CreateStripeSubscription(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_CreateStripeSubscription_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateStripeSubscription(rctx, args["input"].(model.CreateStripeSubscription))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.StripeSubscription)
	fc.Result = res
	return ec.marshalNStripeSubscription2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStripeSubscription(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateDefaultRegion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateDefaultRegion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateDefaultRegion(rctx, args["input"].(*model.DefaultRegionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_newRegionRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_newRegionRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewRegionRequest(rctx, args["input"].(*model.RegionRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_newRegionsRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_newRegionsRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NewRegionsRequest(rctx, args["input"].(*model.RegionRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.RequestedRegionsResponse)
	fc.Result = res
	return ec.marshalNRequestedRegionsResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegionsResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_mutipleRegion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_mutipleRegion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().MutipleRegion(rctx, args["input"].(*model.MultipleRegionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MultipleRegionResponse)
	fc.Result = res
	return ec.marshalOMultipleRegionResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMultipleRegionResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteRequestedRegion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteRequestedRegion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteRequestedRegion(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateRole(rctx, args["userId"].(*string), args["roleId"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["input"].(*model.UpdateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.UpdateUser)
	fc.Result = res
	return ec.marshalOUpdateUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_changePassword(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_changePassword_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ChangePassword(rctx, args["input"].(model.ChangePassword))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Password)
	fc.Result = res
	return ec.marshalOPassword2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPassword(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_ActiveUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_ActiveUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ActiveUser(rctx, args["IsActive"].(*bool), args["IsDelete"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_inviteUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_inviteUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().InviteUser(rctx, args["input"].(*model.InviteUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.InviteUserOutputMessage)
	fc.Result = res
	return ec.marshalOInviteUserOutputMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐInviteUserOutputMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addInviteUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addInviteUserRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddInviteUserRole(rctx, args["email"].(string), args["roleId"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeUserOrg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeUserOrg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveUserOrg(rctx, args["OrganizationId"].(*string), args["UserId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userProfileUpdated(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userProfileUpdated_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserProfileUpdated(rctx, args["userId"].(*string), args["userProfileCreated"].(*bool))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addUserToOrg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addUserToOrg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddUserToOrg(rctx, args["input"].(*model.AddUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_uploadCompanyLogo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_uploadCompanyLogo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UploadCompanyLogo(rctx, args["input"].(*model.Image))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeInviteuser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeInviteuser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveInviteuser(rctx, args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_notificationInfo(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_notificationInfo_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NotificationInfo(rctx, args["input"].(*model.Notification))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_userRequestingByoh(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_userRequestingByoh_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UserRequestingByoh(rctx, args["input"].(*model.ByohRequest))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_requestingPicoNets(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_requestingPicoNets_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RequestingPicoNets(rctx, args["appName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_setUserTokenExpireTime(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_setUserTokenExpireTime_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetUserTokenExpireTime(rctx, args["ExpireTime"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUserwebhookURLSlack(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUserwebhookURLSlack_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUserwebhookURLSlack(rctx, args["webhookURL"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addPAT(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addPAT_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddPat(rctx, args["input"].(*model.UserPat))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePAT(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePAT_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePat(rctx, args["input"].(*model.UserPat))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deletePAT(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deletePAT_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeletePat(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NodeAction(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NodeAction_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NodeAction(rctx, args["input"].(*model.StartAndStopVM))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VMInstanceMessage)
	fc.Result = res
	return ec.marshalNVmInstanceMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMInstanceMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateHost(rctx, args["input"].(*model.Host))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VMInstanceMessage)
	fc.Result = res
	return ec.marshalNVmInstanceMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMInstanceMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteHost(rctx, args["id"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NodeActionAWS(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NodeActionAWS_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NodeActionAws(rctx, args["input"].(*model.StartAndStopVM))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VMInstanceMessage)
	fc.Result = res
	return ec.marshalNVmInstanceMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMInstanceMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_NodeActionAzure(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_NodeActionAzure_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().NodeActionAzure(rctx, args["input"].(*model.StartAndStopVM))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.VMInstanceMessage)
	fc.Result = res
	return ec.marshalNVmInstanceMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMInstanceMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createDuploVolume(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createDuploVolume_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateDuploVolume(rctx, args["input"].([]*model.DuploVolumeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OutputMessage)
	fc.Result = res
	return ec.marshalOOutputMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOutputMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateVolume(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateVolume_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateVolume(rctx, args["input"].(*model.UpdateVolumeInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createWorkloadManagement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createWorkloadManagement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateWorkloadManagement(rctx, args["input"].(*model.WorkloadManagement))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteWorkloadManagement(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteWorkloadManagement_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteWorkloadManagement(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_addWorkloadRegions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_addWorkloadRegions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().AddWorkloadRegions(rctx, args["workLoadId"].(string), args["regionCode"].([]*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_removeWorkloadRegions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_removeWorkloadRegions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveWorkloadRegions(rctx, args["wlid"].(*string), args["wlRegion"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NewApp_app(ctx context.Context, field graphql.CollectedField, obj *model.NewApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NewApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Nodes_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Nodes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nodes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.App)
	fc.Result = res
	return ec.marshalOApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _OptimizeImage_status(ctx context.Context, field graphql.CollectedField, obj *model.OptimizeImage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OptimizeImage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgCountDetails_totalOrgCount(ctx context.Context, field graphql.CollectedField, obj *model.OrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalOrgCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OrgCountDetails_orgByAppCount(ctx context.Context, field graphql.CollectedField, obj *model.OrgCountDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrgCountDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgByAppCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AppOrgCount)
	fc.Result = res
	return ec.marshalOAppOrgCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppOrgCount(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_id(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_parentId(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_parentOrgName(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentOrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_name(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_slug(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_type(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_domains(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domains, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Domains)
	fc.Result = res
	return ec.marshalODomains2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomains(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_region(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegionDetails)
	fc.Result = res
	return ec.marshalORegionDetails2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_isActive(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Organization_subOrg(ctx context.Context, field graphql.CollectedField, obj *model.Organization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.SubOrganization)
	fc.Result = res
	return ec.marshalOSubOrganization2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_name(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_slug(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_type(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_apps(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Apps)
	fc.Result = res
	return ec.marshalOApps2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApps(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_viewerRole(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ViewerRole, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationDetails_members(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Members, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Members)
	fc.Result = res
	return ec.marshalOMembers2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMembers(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationMembershipEdge_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationMembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationMembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationMembershipEdge_role(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationMembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationMembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationMembershipEdge_joinedAt(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationMembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationMembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JoinedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationMembershipEdge_node(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationMembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationMembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationMembershipEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationMembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationMembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationMembershipEdge_roleId(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationMembershipEdge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationMembershipEdge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegionTable_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegionTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegionTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegionTable_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegionTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegionTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegionTable_region_code(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegionTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegionTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegionTable_is_default(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegionTable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegionTable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegistryType_id(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegistryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegistryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegistryType_name(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegistryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegistryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegistryType_slug(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegistryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegistryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationRegistryType_isActive(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationRegistryType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationRegistryType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Organizations_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Organizations) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Organizations",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationsandBusinessUnit_nodes(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationsandBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationsandBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _OrganizationsandBusinessUnit_businessUnit(ctx context.Context, field graphql.CollectedField, obj *model.OrganizationsandBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OrganizationsandBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListBusinessUnit)
	fc.Result = res
	return ec.marshalOlistBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _OutputMessage_message(ctx context.Context, field graphql.CollectedField, obj *model.OutputMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "OutputMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Password_message(ctx context.Context, field graphql.CollectedField, obj *model.Password) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Password",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Password_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.Password) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Password",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_id(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_amount(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Amount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_currency(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Currency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Payment_clientSecretId(ctx context.Context, field graphql.CollectedField, obj *model.Payment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClientSecretID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_id(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_module(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Module, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_title(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_create(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Create, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_view(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.View, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_delete(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Delete, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_update(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Update, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_is_active(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Permission_created_at(ctx context.Context, field graphql.CollectedField, obj *model.Permission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Permission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PlatFormOutput_code(ctx context.Context, field graphql.CollectedField, obj *model.PlatFormOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlatFormOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PlatFormOutput_name(ctx context.Context, field graphql.CollectedField, obj *model.PlatFormOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlatFormOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PlatFormOutput_latitude(ctx context.Context, field graphql.CollectedField, obj *model.PlatFormOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlatFormOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PlatFormOutput_longitude(ctx context.Context, field graphql.CollectedField, obj *model.PlatFormOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PlatFormOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _PortHandler_port(ctx context.Context, field graphql.CollectedField, obj *model.PortHandler) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PortHandler",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _PortHandler_handlers(ctx context.Context, field graphql.CollectedField, obj *model.PortHandler) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PortHandler",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handlers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceList_productid(ctx context.Context, field graphql.CollectedField, obj *model.PriceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Productid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceList_priceid(ctx context.Context, field graphql.CollectedField, obj *model.PriceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priceid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceList_nickname(ctx context.Context, field graphql.CollectedField, obj *model.PriceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nickname, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceList_description(ctx context.Context, field graphql.CollectedField, obj *model.PriceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PriceList_unitamount(ctx context.Context, field graphql.CollectedField, obj *model.PriceList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PriceList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Unitamount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_app(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_app_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().App(rctx, args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_apps(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_apps_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Apps(rctx, args["type"].(*string), args["first"].(*int), args["region"].(*string), args["orgSlug"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appsSubOrg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appsSubOrg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppsSubOrg(rctx, args["type"].(*string), args["first"].(*int), args["region"].(*string), args["subOrgSlug"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appsBusinessUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appsBusinessUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppsBusinessUnit(rctx, args["type"].(*string), args["first"].(*int), args["region"].(*string), args["businessUnit"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appsWorkload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appsWorkload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppsWorkload(rctx, args["name"].(*string), args["organiztionId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appsWorkloadIdOrUserRole(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appsWorkloadIdOrUserRole_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppsWorkloadIDOrUserRole(rctx, args["workloadId"].(*string), args["userId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appcompact(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appcompact_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Appcompact(rctx, args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppCompact)
	fc.Result = res
	return ec.marshalOAppCompact2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCompact(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAppRegion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAppRegion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppRegion(rctx, args["name"].(string), args["status"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppDeploymentRegion)
	fc.Result = res
	return ec.marshalOAppDeploymentRegion2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppDeploymentRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAvailabilityCluster(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getAvailabilityCluster_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailabilityCluster(rctx, args["isLatency"].(*string), args["first"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.ClusterNodes)
	fc.Result = res
	return ec.marshalNClusterNodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRegionStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRegionStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRegionStatus(rctx, args["appId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RegionStatusNodes)
	fc.Result = res
	return ec.marshalORegionStatusNodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionStatusNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_platform(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Platform(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Regions)
	fc.Result = res
	return ec.marshalORegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegions(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appStatusList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_appStatusList_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppStatusList(rctx, args["status"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_appQuotaExist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppQuotaExist(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_checkAppById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_checkAppById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CheckAppByID(rctx, args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAppByAppId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetAppByAppId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppByAppID(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_AppsCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().AppsCount(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppCount)
	fc.Result = res
	return ec.marshalOappCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCount(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAppTemplates(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppTemplates(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.ConfigAppTemplates)
	fc.Result = res
	return ec.marshalNConfigAppTemplates2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigAppTemplates(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAppsAndOrgsCountDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppsAndOrgsCountDetails(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AppsAndOrgsCountDetails)
	fc.Result = res
	return ec.marshalNAppsAndOrgsCountDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsAndOrgsCountDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAppsAndOrgsandSubOrgCountDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppsAndOrgsandSubOrgCountDetails(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.AppsAndOrgsAndSubOrgCountDetails)
	fc.Result = res
	return ec.marshalNAppsAndOrgsAndSubOrgCountDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsAndOrgsAndSubOrgCountDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_businessUnitList(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BusinessUnitList(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListBusinessUnit)
	fc.Result = res
	return ec.marshalOlistBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessUnitById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessUnitById_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessUnitByID(rctx, args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ListBusinessUnit)
	fc.Result = res
	return ec.marshalOlistBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessUnitByOrgId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessUnitByOrgId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessUnitByOrgID(rctx, args["orgId"].(*string), args["subOrgId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListBusinessUnit)
	fc.Result = res
	return ec.marshalOlistBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getBusinessUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getBusinessUnit_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetBusinessUnit(rctx, args["orgId"].(string), args["subOrgId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetBusinessUnit)
	fc.Result = res
	return ec.marshalOgetBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetBusinessUnitᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getClusterDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getClusterDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClusterDetails(rctx, args["regCode"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ClusterDetails)
	fc.Result = res
	return ec.marshalOClusterDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getClusterDetailsByOrgId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getClusterDetailsByOrgId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClusterDetailsByOrgID(rctx, args["orgId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ClusterDetails)
	fc.Result = res
	return ec.marshalOClusterDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getClusterDetailsByOrgIdMultipleReg(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getClusterDetailsByOrgIdMultipleReg_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetClusterDetailsByOrgIDMultipleReg(rctx, args["orgId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ClusterDetails)
	fc.Result = res
	return ec.marshalOClusterDetails2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserAddedRegions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserAddedRegions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ClusterDetails)
	fc.Result = res
	return ec.marshalOClusterDetails2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getCloudRegions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getCloudRegions_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetCloudRegions(rctx, args["type"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.CloudRegions)
	fc.Result = res
	return ec.marshalNCloudRegions2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCloudRegions(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetAvailableBuiltIn(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_GetAvailableBuiltIn_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAvailableBuiltIn(rctx, args["first"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getElbUrl(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getElbUrl_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetElbURL(rctx, args["input"].(*model.ElbURLInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ElbURL)
	fc.Result = res
	return ec.marshalOElbUrl2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐElbURL(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllS3deployments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllS3deployments(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.S3Deployments)
	fc.Result = res
	return ec.marshalOS3Deployments2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3Deployments(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getS3deployments(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getS3deployments_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetS3deployments(rctx, args["s3AppName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.S3Deployments)
	fc.Result = res
	return ec.marshalOS3Deployments2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3Deployments(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getQueryLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getQueryLog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetQueryLog(rctx, args["input"].(model.GetQueryLog))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.QueryLogOutput)
	fc.Result = res
	return ec.marshalOQueryLogOutput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐQueryLogOutputᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDuploStatus(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getDuploStatus_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDuploStatus(rctx, args["appName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DuploDeployOutput)
	fc.Result = res
	return ec.marshalODuploDeployOutput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploDeployOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getclusterLog(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getclusterLog_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetclusterLog(rctx, args["appName"].(*string), args["region"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userMetrics(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userMetrics_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserMetrics(rctx, args["appName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetUserMetrics)
	fc.Result = res
	return ec.marshalOGetUserMetrics2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserMetrics(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getDataDogByUserId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetDataDogByUserID(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.AddedDataDog)
	fc.Result = res
	return ec.marshalOAddedDataDog2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAddedDataDog(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organizations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organizations)
	fc.Result = res
	return ec.marshalNOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAllParentOrganizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAllParentOrganizations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organizations)
	fc.Result = res
	return ec.marshalNOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationsandBusinessUnit(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationsandBusinessUnit(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationsandBusinessUnit)
	fc.Result = res
	return ec.marshalNOrganizationsandBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationsandBusinessUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_subOrganizations(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubOrganizations(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organizations)
	fc.Result = res
	return ec.marshalNOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_subOrganizationsByParentId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_subOrganizationsByParentId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().SubOrganizationsByParentID(rctx, args["parentOrgId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organizations)
	fc.Result = res
	return ec.marshalNOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getParentIdBySubOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getParentIdBySubOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetParentIDBySubOrganization(rctx, args["subOrgId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organizations)
	fc.Result = res
	return ec.marshalNOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_organization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Organization(rctx, args["slug"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.OrganizationDetails)
	fc.Result = res
	return ec.marshalNOrganizationDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getOrganizationByOrgId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getOrganizationByOrgId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetOrganizationByOrgID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalNOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_organizationRegistryType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OrganizationRegistryType(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OrganizationRegistryType)
	fc.Result = res
	return ec.marshalOOrganizationRegistryType2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationRegistryTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSecret(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSecret_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSecret(rctx, args["name"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetUserSecret)
	fc.Result = res
	return ec.marshalOGetUserSecret2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserSecretᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRegistryByUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getRegistryByUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRegistryByUser(rctx, args["orgId"].(string), args["regType"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetSecRegistry)
	fc.Result = res
	return ec.marshalOGetSecRegistry2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetSecRegistryᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getAppByRegionCount(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetAppByRegionCount(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OrgCountDetails)
	fc.Result = res
	return ec.marshalOOrgCountDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrgCountDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getSecretByRegistryId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getSecretByRegistryId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetSecretByRegistryID(rctx, args["secretId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetUserSecret)
	fc.Result = res
	return ec.marshalOGetUserSecret2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserSecret(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getpricelist(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Getpricelist(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PriceList)
	fc.Result = res
	return ec.marshalOPriceList2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPriceList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getRequestedRegions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetRequestedRegions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RequestedRegions)
	fc.Result = res
	return ec.marshalORequestedRegions2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegions(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserPermissions(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserPermissions(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Permission)
	fc.Result = res
	return ec.marshalOPermission2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserPermissionsByPlan(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserPermissionsByPlan(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.PlanAndPermission)
	fc.Result = res
	return ec.marshalOplanAndPermission2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPlanAndPermission(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserById(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserByID(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.GetUserByID)
	fc.Result = res
	return ec.marshalNGetUserById2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_currentUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().CurrentUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.CurrentUserEmail)
	fc.Result = res
	return ec.marshalNCurrentUserEmail2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCurrentUserEmail(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserByAdmin(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserByAdmin(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetUserByID)
	fc.Result = res
	return ec.marshalOGetUserById2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserByAdminAndOrganization(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserByAdminAndOrganization_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserByAdminAndOrganization(rctx, args["organizationId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetUserByID)
	fc.Result = res
	return ec.marshalOGetUserById2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userActivities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userActivities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserActivities(rctx, args["first"].(*int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserActivities)
	fc.Result = res
	return ec.marshalOuserActivities2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserActivities(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userActivitiesByDate(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userActivitiesByDate_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserActivitiesByDate(rctx, args["startDate"].(*string), args["endDate"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserActivities)
	fc.Result = res
	return ec.marshalOuserActivities2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserActivities(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_GetInviteUserCountByAdminUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetInviteUserCountByAdminUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_userDeploymentCountDetails(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_userDeploymentCountDetails_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UserDeploymentCountDetails(rctx, args["startDate"].(*string), args["endDate"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.UserDeploymentDetailCount)
	fc.Result = res
	return ec.marshalOUserDeploymentDetailCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserDeploymentDetailCount(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserByOrganizationId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getUserByOrganizationId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserByOrganizationID(rctx, args["organizationId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.GetUserByID)
	fc.Result = res
	return ec.marshalOGetUserById2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getUserPAT(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetUserPat(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*model.GetUserPat)
	fc.Result = res
	return ec.marshalNGetUserPAT2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserPat(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getHost(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getHost_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHost(rctx, args["orgId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.HostPayload)
	fc.Result = res
	return ec.marshalOHostPayload2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHostPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getHostByName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getHostByName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetHostByName(rctx, args["instanceName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.HostDetails)
	fc.Result = res
	return ec.marshalOHostDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHostDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVolumeType(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVolumeType(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VolumeType)
	fc.Result = res
	return ec.marshalOVolumeType2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getVolumeByAppId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getVolumeByAppId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetVolumeByAppID(rctx, args["appId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.VolumeByApp)
	fc.Result = res
	return ec.marshalOVolumeByApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeByApp(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getWorkloadMangementByUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkloadMangementByUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.WorkloadManagementList)
	fc.Result = res
	return ec.marshalOWorkloadManagementList2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getWorkloadMangementByorgnizationId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getWorkloadMangementByorgnizationId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkloadMangementByorgnizationID(rctx, args["orgId"].(*string), args["subOrgId"].(*string), args["businessUnitId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.WorkloadManagementList)
	fc.Result = res
	return ec.marshalOWorkloadManagementList2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementListᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getWorkloadMangementByWlId(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getWorkloadMangementByWlId_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkloadMangementByWlID(rctx, args["workloadId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.WorkloadManagementList)
	fc.Result = res
	return ec.marshalNWorkloadManagementList2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getWorkloadMangementByWlName(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getWorkloadMangementByWlName_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkloadMangementByWlName(rctx, args["workloadName"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.WorkloadManagementList)
	fc.Result = res
	return ec.marshalNWorkloadManagementList2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementList(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getWorkloadRegion(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getWorkloadRegion_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetWorkloadRegion(rctx, args["workloadId"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.WorkLoadRegions)
	fc.Result = res
	return ec.marshalOWorkLoadRegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkLoadRegions(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_id(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_message(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_queryName(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_resolverIp(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolverIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_timeStamp(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeStamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_responseCode(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_lastSyncTime(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastSyncTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _QueryLogOutput_times(ctx context.Context, field graphql.CollectedField, obj *model.QueryLogOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "QueryLogOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Times, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _ReDeploymentCountByDate_date(ctx context.Context, field graphql.CollectedField, obj *model.ReDeploymentCountByDate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReDeploymentCountByDate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _ReDeploymentCountByDate_reDeployed(ctx context.Context, field graphql.CollectedField, obj *model.ReDeploymentCountByDate) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ReDeploymentCountByDate",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReDeployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_code(ctx context.Context, field graphql.CollectedField, obj *model.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Code, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_name(ctx context.Context, field graphql.CollectedField, obj *model.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_latitude(ctx context.Context, field graphql.CollectedField, obj *model.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Latitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _Region_longitude(ctx context.Context, field graphql.CollectedField, obj *model.Region) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Region",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Longitude, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionDetails_regCode(ctx context.Context, field graphql.CollectedField, obj *model.RegionDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionDetails_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.RegionDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionDetails_regionName(ctx context.Context, field graphql.CollectedField, obj *model.RegionDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionDetails_clusterType(ctx context.Context, field graphql.CollectedField, obj *model.RegionDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ClusterType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_id(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_regionCode(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegionCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_status(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_deploymentId(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_port(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_appUrl(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_releaseId(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReleaseID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_elbRecordName(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElbRecordName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatus_elbRecordId(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatus) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatus",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ElbRecordID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RegionStatusNodes_nodes(ctx context.Context, field graphql.CollectedField, obj *model.RegionStatusNodes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RegionStatusNodes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegionStatus)
	fc.Result = res
	return ec.marshalORegionStatus2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Regions_regions(ctx context.Context, field graphql.CollectedField, obj *model.Regions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Regions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Regions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PlatFormOutput)
	fc.Result = res
	return ec.marshalOPlatFormOutput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPlatFormOutput(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_server(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Server, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_username(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Username, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_password(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Password, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_email(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_secret_name(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SecretName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_repo_type(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RepoType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_organization_id(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Registry_isDefault(ctx context.Context, field graphql.CollectedField, obj *model.Registry) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Registry",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDefault, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_id(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_version(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_stable(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Stable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_inProgress(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InProgress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_reason(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Reason, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_description(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_image(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_status(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_port(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Port, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_deploymentStrategy(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentStrategy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_deployment(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Deployment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeploymentStatus)
	fc.Result = res
	return ec.marshalODeploymentStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_user(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.User, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_archiveUrl(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ArchiveURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_builderType(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuilderType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Release_routingPolicy(ctx context.Context, field graphql.CollectedField, obj *model.Release) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Release",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoutingPolicy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Releases_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Releases) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Releases",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Release)
	fc.Result = res
	return ec.marshalORelease2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegions_id(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegions_userName(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegions_status(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegions_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegions_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegions_requestedRegion(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestedRegion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegionsResponse_requestedRegions(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegionsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegionsResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestedRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegionsResponse_alreadyRequestedRegions(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegionsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegionsResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlreadyRequestedRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequestedRegionsResponse_message(ctx context.Context, field graphql.CollectedField, obj *model.RequestedRegionsResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequestedRegionsResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Requirement_requestRequirement(ctx context.Context, field graphql.CollectedField, obj *model.Requirement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Requirement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RequestRequirement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RequirementProperties)
	fc.Result = res
	return ec.marshalORequirementProperties2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequirementProperties(ctx, field.Selections, res)
}

func (ec *executionContext) _Requirement_LimitRequirement(ctx context.Context, field graphql.CollectedField, obj *model.Requirement) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Requirement",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LimitRequirement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.RequirementProperties)
	fc.Result = res
	return ec.marshalORequirementProperties2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequirementProperties(ctx, field.Selections, res)
}

func (ec *executionContext) _RequirementProperties_memory(ctx context.Context, field graphql.CollectedField, obj *model.RequirementProperties) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequirementProperties",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Memory, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _RequirementProperties_cpu(ctx context.Context, field graphql.CollectedField, obj *model.RequirementProperties) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RequirementProperties",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPU, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Response_message(ctx context.Context, field graphql.CollectedField, obj *model.Response) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Response",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _RestartApp_app(ctx context.Context, field graphql.CollectedField, obj *model.RestartApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RestartApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _ResumeApp_app(ctx context.Context, field graphql.CollectedField, obj *model.ResumeApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "ResumeApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _S3BuildCommand_s3Cmd(ctx context.Context, field graphql.CollectedField, obj *model.S3BuildCommand) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3BuildCommand",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.S3Cmd, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_id(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_s3AppName(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.S3AppName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_status(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_appUrl(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_buildCommandsS3(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildCommandsS3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.S3BuildCommand)
	fc.Result = res
	return ec.marshalOS3BuildCommand2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommand(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_envVariablesS3(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvVariablesS3, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.S3EnvVariable)
	fc.Result = res
	return ec.marshalOS3EnvVariable2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariable(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_orgDetails(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Organization)
	fc.Result = res
	return ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_deploymentTime(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeploymentTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_buildTime(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_createdBy(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedBy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_userDetails(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserDetails, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.GetUserByID)
	fc.Result = res
	return ec.marshalOGetUserById2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, field.Selections, res)
}

func (ec *executionContext) _S3Deployments_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.S3Deployments) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3Deployments",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _S3EnvVariable_name(ctx context.Context, field graphql.CollectedField, obj *model.S3EnvVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3EnvVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _S3EnvVariable_value(ctx context.Context, field graphql.CollectedField, obj *model.S3EnvVariable) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "S3EnvVariable",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_name(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_digest(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Digest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Secret_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Secret) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Secret",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_description(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_protocol(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Protocol, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_internalPort(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_ports(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ports, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.PortHandler)
	fc.Result = res
	return ec.marshalOPortHandler2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPortHandler(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_checks(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Checks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Check)
	fc.Result = res
	return ec.marshalOCheck2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheck(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_softConcurrency(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftConcurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Service_hardConcurrency(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HardConcurrency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _StartBuild_build(ctx context.Context, field graphql.CollectedField, obj *model.StartBuild) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StartBuild",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Build, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Build)
	fc.Result = res
	return ec.marshalOBuild2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuild(ctx, field.Selections, res)
}

func (ec *executionContext) _StartBuild_buildLogs(ctx context.Context, field graphql.CollectedField, obj *model.StartBuild) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StartBuild",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BuildLogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*string)
	fc.Result = res
	return ec.marshalOString2ᚕᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_customerId(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_priceId(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_defaultPaymentMethodid(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultPaymentMethodid, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_planId(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_userID(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_customerSubscriptionId(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomerSubscriptionID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_accessToken(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_email(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_price(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Price, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_status(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _StripeSubscription_name(ctx context.Context, field graphql.CollectedField, obj *model.StripeSubscription) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "StripeSubscription",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrgCount_subOrganizationCount(ctx context.Context, field graphql.CollectedField, obj *model.SubOrgCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrgCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganizationCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrgCount_businessUnit(ctx context.Context, field graphql.CollectedField, obj *model.SubOrgCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrgCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BusinessUnitCount)
	fc.Result = res
	return ec.marshalOBusinessUnitCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitCount(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_id(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_name(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_slug(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_type(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_domains(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Domains, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Domains)
	fc.Result = res
	return ec.marshalODomains2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomains(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_region(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegionDetails)
	fc.Result = res
	return ec.marshalORegionDetails2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionDetails(ctx, field.Selections, res)
}

func (ec *executionContext) _SubOrganization_isActive(ctx context.Context, field graphql.CollectedField, obj *model.SubOrganization) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SubOrganization",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _SuspendApp_app(ctx context.Context, field graphql.CollectedField, obj *model.SuspendApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SuspendApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*model.App)
	fc.Result = res
	return ec.marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, field.Selections, res)
}

func (ec *executionContext) _TokenValidation_refreshToken(ctx context.Context, field graphql.CollectedField, obj *model.TokenValidation) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "TokenValidation",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RefreshToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppConfig_appId(ctx context.Context, field graphql.CollectedField, obj *model.UpdateAppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateAppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppConfig_appName(ctx context.Context, field graphql.CollectedField, obj *model.UpdateAppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateAppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppConfig_internalPort(ctx context.Context, field graphql.CollectedField, obj *model.UpdateAppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateAppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InternalPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppConfig_externalPort(ctx context.Context, field graphql.CollectedField, obj *model.UpdateAppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateAppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ExternalPort, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppConfig_image(ctx context.Context, field graphql.CollectedField, obj *model.UpdateAppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateAppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Image, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateAppConfig_version(ctx context.Context, field graphql.CollectedField, obj *model.UpdateAppConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateAppConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateImageOutput_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateImageOutput) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateImageOutput",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUser_companyName(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUser_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PhoneNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUser_location(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUser_industry(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Industry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UpdateUser_updatedAt(ctx context.Context, field graphql.CollectedField, obj *model.UpdateUser) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UpdateUser",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_firstName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FirstName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_lastName(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LastName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_userName(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_email(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_companyName(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CompanyName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_roleId(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RoleID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_totalDeployed(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalDeployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_totalReDeployed(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalReDeployed, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_deployData(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeployData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeploymentCountByDate)
	fc.Result = res
	return ec.marshalODeploymentCountByDate2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentCountByDate(ctx, field.Selections, res)
}

func (ec *executionContext) _UserDeploymentDetailCount_reDeployData(ctx context.Context, field graphql.CollectedField, obj *model.UserDeploymentDetailCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "UserDeploymentDetailCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReDeployData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ReDeploymentCountByDate)
	fc.Result = res
	return ec.marshalOReDeploymentCountByDate2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐReDeploymentCountByDate(ctx, field.Selections, res)
}

func (ec *executionContext) _VMSize_name(ctx context.Context, field graphql.CollectedField, obj *model.VMSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VMSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VMSize_cPUCores(ctx context.Context, field graphql.CollectedField, obj *model.VMSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VMSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CPUCores, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VMSize_memoryGb(ctx context.Context, field graphql.CollectedField, obj *model.VMSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VMSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryGb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VMSize_memoryMB(ctx context.Context, field graphql.CollectedField, obj *model.VMSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VMSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MemoryMb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VMSize_priceMonth(ctx context.Context, field graphql.CollectedField, obj *model.VMSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VMSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceMonth, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VMSize_priceSecond(ctx context.Context, field graphql.CollectedField, obj *model.VMSize) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VMSize",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PriceSecond, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) _VmInstanceMessage_id(ctx context.Context, field graphql.CollectedField, obj *model.VMInstanceMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VmInstanceMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _VmInstanceMessage_message(ctx context.Context, field graphql.CollectedField, obj *model.VMInstanceMessage) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VmInstanceMessage",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Volume_id(ctx context.Context, field graphql.CollectedField, obj *model.Volume) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volume",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Volume_app(ctx context.Context, field graphql.CollectedField, obj *model.Volume) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volume",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.App, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Volume_name(ctx context.Context, field graphql.CollectedField, obj *model.Volume) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volume",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Volume_sizeGb(ctx context.Context, field graphql.CollectedField, obj *model.Volume) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volume",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SizeGb, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Volume_region(ctx context.Context, field graphql.CollectedField, obj *model.Volume) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volume",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Volume_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Volume) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volume",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_appId(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_accessMode(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AccessMode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_name(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_path(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Path, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_containerPath(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContainerPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_hostPath(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostPath, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_size(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_volumeTypeId(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VolumeTypeID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_isRead(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeByApp_isHostVolume(ctx context.Context, field graphql.CollectedField, obj *model.VolumeByApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeByApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHostVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeType_id(ctx context.Context, field graphql.CollectedField, obj *model.VolumeType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeType_name(ctx context.Context, field graphql.CollectedField, obj *model.VolumeType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeType_isRead(ctx context.Context, field graphql.CollectedField, obj *model.VolumeType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeType_isHostVolume(ctx context.Context, field graphql.CollectedField, obj *model.VolumeType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsHostVolume, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _VolumeType_description(ctx context.Context, field graphql.CollectedField, obj *model.VolumeType) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "VolumeType",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Volumes_nodes(ctx context.Context, field graphql.CollectedField, obj *model.Volumes) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Volumes",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nodes, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Volume)
	fc.Result = res
	return ec.marshalOVolume2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolume(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkLoadRegions_id(ctx context.Context, field graphql.CollectedField, obj *model.WorkLoadRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkLoadRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkLoadRegions_environmentName(ctx context.Context, field graphql.CollectedField, obj *model.WorkLoadRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkLoadRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvironmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkLoadRegions_environmentEndpoint(ctx context.Context, field graphql.CollectedField, obj *model.WorkLoadRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkLoadRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvironmentEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkLoadRegions_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.WorkLoadRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkLoadRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkLoadRegions_addedWorkLoadRegions(ctx context.Context, field graphql.CollectedField, obj *model.WorkLoadRegions) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkLoadRegions",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AddedWorkLoadRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Region)
	fc.Result = res
	return ec.marshalORegion2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_id(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_environmentName(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvironmentName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_environmentEndpoint(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnvironmentEndpoint, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_organizationId(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_organizationName(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_subOrganizationId(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_businessUnitId(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_userId(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _WorkloadManagementList_apps(ctx context.Context, field graphql.CollectedField, obj *model.WorkloadManagementList) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "WorkloadManagementList",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Nodes)
	fc.Result = res
	return ec.marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _appCount_totalApps(ctx context.Context, field graphql.CollectedField, obj *model.AppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalApps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _appCount_new(ctx context.Context, field graphql.CollectedField, obj *model.AppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.New, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _appCount_active(ctx context.Context, field graphql.CollectedField, obj *model.AppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Active, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _appCount_inActive(ctx context.Context, field graphql.CollectedField, obj *model.AppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _appCount_terminated(ctx context.Context, field graphql.CollectedField, obj *model.AppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Terminated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _appCount_region(ctx context.Context, field graphql.CollectedField, obj *model.AppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.RegionAppCount)
	fc.Result = res
	return ec.marshalOregionAppCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionAppCount(ctx, field.Selections, res)
}

func (ec *executionContext) _appCountsDetails_activeApps(ctx context.Context, field graphql.CollectedField, obj *model.AppCountsDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCountsDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActiveApps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _appCountsDetails_deletedApps(ctx context.Context, field graphql.CollectedField, obj *model.AppCountsDetails) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "appCountsDetails",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeletedApps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _businessUnitListInSubOrg_subOrgId(ctx context.Context, field graphql.CollectedField, obj *model.BusinessUnitListInSubOrg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessUnitListInSubOrg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _businessUnitListInSubOrg_subOrgName(ctx context.Context, field graphql.CollectedField, obj *model.BusinessUnitListInSubOrg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessUnitListInSubOrg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _businessUnitListInSubOrg_businessUnitUnderSubOrg(ctx context.Context, field graphql.CollectedField, obj *model.BusinessUnitListInSubOrg) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "businessUnitListInSubOrg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessUnitUnderSubOrg, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ListBusinessUnit)
	fc.Result = res
	return ec.marshalOlistBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessUnit_id(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessUnit_name(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _getBusinessUnit_isActive(ctx context.Context, field graphql.CollectedField, obj *model.GetBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "getBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsActive, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _listBusinessUnit_id(ctx context.Context, field graphql.CollectedField, obj *model.ListBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "listBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _listBusinessUnit_orgId(ctx context.Context, field graphql.CollectedField, obj *model.ListBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "listBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _listBusinessUnit_orgName(ctx context.Context, field graphql.CollectedField, obj *model.ListBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "listBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _listBusinessUnit_subOrgId(ctx context.Context, field graphql.CollectedField, obj *model.ListBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "listBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrgID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _listBusinessUnit_subOrgName(ctx context.Context, field graphql.CollectedField, obj *model.ListBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "listBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrgName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _listBusinessUnit_name(ctx context.Context, field graphql.CollectedField, obj *model.ListBusinessUnit) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "listBusinessUnit",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_id(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_planName(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlanName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_apps(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_workloadManagement(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WorkloadManagement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_organizationManagement(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationManagement, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_inviteUserLimit(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InviteUserLimit, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_applicationHealthDashboard(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ApplicationHealthDashboard, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_byoh(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Byoh, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_storage(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Storage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_versionControlPanel(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.VersionControlPanel, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_singleSignOn(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SingleSignOn, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_organizationCount(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_subOrganizationCount(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganizationCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_businessunitCount(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BusinessunitCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_customDomain(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CustomDomain, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_appNotification(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppNotification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_secret(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Secret, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_monitoringPlatform(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MonitoringPlatform, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_alertsAdvisories(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AlertsAdvisories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_auditLogs(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AuditLogs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_sslSecurity(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SslSecurity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_infrastructureConfiguration(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InfrastructureConfiguration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_replicas(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Replicas, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _planAndPermission_k8sRegions(ctx context.Context, field graphql.CollectedField, obj *model.PlanAndPermission) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "planAndPermission",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.K8sRegions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _regionAppCount_Region(ctx context.Context, field graphql.CollectedField, obj *model.RegionAppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regionAppCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Region, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _regionAppCount_apps(ctx context.Context, field graphql.CollectedField, obj *model.RegionAppCount) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "regionAppCount",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Apps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _updateConfigApp_message(ctx context.Context, field graphql.CollectedField, obj *model.UpdateConfigApp) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "updateConfigApp",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_id(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_type(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_userId(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_activities(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Activities, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_message(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Message, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_isRead(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRead, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_organizationName(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_subOrganizationName(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubOrganizationName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_referenceId(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReferenceID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _userActivities_appsCount(ctx context.Context, field graphql.CollectedField, obj *model.UserActivities) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "userActivities",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AppsCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.AppCountsDetails)
	fc.Result = res
	return ec.marshalOappCountsDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCountsDetails(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputAddUser(ctx context.Context, obj interface{}) (model.AddUser, error) {
	var it model.AddUser
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBusinessUnitInput(ctx context.Context, obj interface{}) (model.BusinessUnitInput, error) {
	var it model.BusinessUnitInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
			it.OrgID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subOrg":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrg"))
			it.SubOrg, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputByohRequest(ctx context.Context, obj interface{}) (model.ByohRequest, error) {
	var it model.ByohRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipAddress"))
			it.IPAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userName"))
			it.UserName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputChangePassword(ctx context.Context, obj interface{}) (model.ChangePassword, error) {
	var it model.ChangePassword
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "oldpassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("oldpassword"))
			it.Oldpassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "newPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newPassword"))
			it.NewPassword, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientSideLogs(ctx context.Context, obj interface{}) (model.ClientSideLogs, error) {
	var it model.ClientSideLogs
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "message":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
			it.Message, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "level":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("level"))
			it.Level, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClusterDetailsInput(ctx context.Context, obj interface{}) (model.ClusterDetailsInput, error) {
	var it model.ClusterDetailsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "regionCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionCode"))
			it.RegionCode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "providerType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("providerType"))
			it.ProviderType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "clusterType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clusterType"))
			it.ClusterType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "regionName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionName"))
			it.RegionName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "interfaceType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("interfaceType"))
			it.InterfaceType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "allocationTag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allocationTag"))
			it.AllocationTag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "loadBalancerURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("loadBalancerURL"))
			it.LoadBalancerURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "clusterConfigUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clusterConfigUrl"))
			it.ClusterConfigURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigTemplate(ctx context.Context, obj interface{}) (model.ConfigTemplate, error) {
	var it model.ConfigTemplate
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "internalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalPort"))
			it.InternalPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalPort"))
			it.ExternalPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "routingPolicy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routingPolicy"))
			it.RoutingPolicy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "volumeSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("volumeSize"))
			it.VolumeSize, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "envArgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("envArgs"))
			it.EnvArgs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpuLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuLimit"))
			it.CPULimit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "memoryLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memoryLimit"))
			it.MemoryLimit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpuRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuRequests"))
			it.CPURequests, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "memoryRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memoryRequests"))
			it.MemoryRequests, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConfigureRegionsInput(ctx context.Context, obj interface{}) (model.ConfigureRegionsInput, error) {
	var it model.ConfigureRegionsInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "allowRegions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("allowRegions"))
			it.AllowRegions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "denyRegions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("denyRegions"))
			it.DenyRegions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "backupRegions":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("backupRegions"))
			it.BackupRegions, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAppInput(ctx context.Context, obj interface{}) (model.CreateAppInput, error) {
	var it model.CreateAppInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "runtime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("runtime"))
			it.Runtime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "subOrganizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrganizationId"))
			it.SubOrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessUnitId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessUnitId"))
			it.BusinessUnitID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "workloadManagementId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workloadManagementId"))
			it.WorkloadManagementID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAppToml(ctx context.Context, obj interface{}) (model.CreateAppToml, error) {
	var it model.CreateAppToml
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "builtin":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("builtin"))
			it.Builtin, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "internalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalPort"))
			it.InternalPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalPort"))
			it.ExternalPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "build":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build"))
			it.Build, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "routingPolicy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routingPolicy"))
			it.RoutingPolicy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpuLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuLimit"))
			it.CPULimit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "memoryLimit":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memoryLimit"))
			it.MemoryLimit, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "cpuRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cpuRequests"))
			it.CPURequests, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "memoryRequests":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memoryRequests"))
			it.MemoryRequests, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateAttachPaymentMethod(ctx context.Context, obj interface{}) (model.CreateAttachPaymentMethod, error) {
	var it model.CreateAttachPaymentMethod
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "customerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerId"))
			it.CustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "paymentMethodId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentMethodId"))
			it.PaymentMethodID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateNamespace(ctx context.Context, obj interface{}) (model.CreateNamespace, error) {
	var it model.CreateNamespace
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateOrganizationInput(ctx context.Context, obj interface{}) (model.CreateOrganizationInput, error) {
	var it model.CreateOrganizationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePaymentIntent(ctx context.Context, obj interface{}) (model.CreatePaymentIntent, error) {
	var it model.CreatePaymentIntent
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "amount":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
			it.Amount, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "customerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerId"))
			it.CustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSecretInput(ctx context.Context, obj interface{}) (model.CreateSecretInput, error) {
	var it model.CreateSecretInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registryType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registryType"))
			it.RegistryType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registryInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registryInfo"))
			it.RegistryInfo, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateStripeSubscription(ctx context.Context, obj interface{}) (model.CreateStripeSubscription, error) {
	var it model.CreateStripeSubscription
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "customerId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("customerId"))
			it.CustomerID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "priceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priceId"))
			it.PriceID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "defaultPaymentMethodid":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("defaultPaymentMethodid"))
			it.DefaultPaymentMethodid, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessToken"))
			it.AccessToken, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sessionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sessionId"))
			it.SessionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateSubOrganizationInput(ctx context.Context, obj interface{}) (model.CreateSubOrganizationInput, error) {
	var it model.CreateSubOrganizationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentOrgId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentOrgId"))
			it.ParentOrgID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDataDogInput(ctx context.Context, obj interface{}) (model.DataDogInput, error) {
	var it model.DataDogInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "apiKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiKey"))
			it.APIKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "appKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appKey"))
			it.AppKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "apiEndpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("apiEndpoint"))
			it.APIEndpoint, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "clusterId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clusterId"))
			it.ClusterID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDefaultRegionInput(ctx context.Context, obj interface{}) (model.DefaultRegionInput, error) {
	var it model.DefaultRegionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteOrganizationInput(ctx context.Context, obj interface{}) (model.DeleteOrganizationInput, error) {
	var it model.DeleteOrganizationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeleteSubOrganizationInput(ctx context.Context, obj interface{}) (model.DeleteSubOrganizationInput, error) {
	var it model.DeleteSubOrganizationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "subOrganizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrganizationId"))
			it.SubOrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeployImageInput(ctx context.Context, obj interface{}) (model.DeployImageInput, error) {
	var it model.DeployImageInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "definition":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("definition"))
			it.Definition, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		case "strategy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("strategy"))
			it.Strategy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "services":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("services"))
			it.Services, err = ec.unmarshalOMap2ᚕmap(ctx, v)
			if err != nil {
				return it, err
			}
		case "envArgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("envArgs"))
			it.EnvArgs, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "envMapArgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("envMapArgs"))
			it.EnvMapArgs, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "archiveUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveUrl"))
			it.ArchiveURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeployInput(ctx context.Context, obj interface{}) (model.DeployInput, error) {
	var it model.DeployInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "imageName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageName"))
			it.ImageName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "serviceName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceName"))
			it.ServiceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nodeName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nodeName"))
			it.NodeName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "port":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("port"))
			it.Port, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDuploVolumeInput(ctx context.Context, obj interface{}) (model.DuploVolumeInput, error) {
	var it model.DuploVolumeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessMode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessMode"))
			it.AccessMode, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "path":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("path"))
			it.Path, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "containerPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("containerPath"))
			it.ContainerPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostPath"))
			it.HostPath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "size":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("size"))
			it.Size, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "volumeTypeId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("volumeTypeId"))
			it.VolumeTypeID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			it.IsRead, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isHostVolume":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isHostVolume"))
			it.IsHostVolume, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditAppByOrganization(ctx context.Context, obj interface{}) (model.EditAppByOrganization, error) {
	var it model.EditAppByOrganization
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subOrganizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subOrganizationId"))
			it.SubOrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "businessUnitId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("businessUnitId"))
			it.BusinessUnitID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "workloadManagementId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("workloadManagementId"))
			it.WorkloadManagementID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputElbUrlInput(ctx context.Context, obj interface{}) (model.ElbURLInput, error) {
	var it model.ElbURLInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetAppStatusInput(ctx context.Context, obj interface{}) (model.GetAppStatusInput, error) {
	var it model.GetAppStatusInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "showCompleted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("showCompleted"))
			it.ShowCompleted, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputGetQueryLog(ctx context.Context, obj interface{}) (model.GetQueryLog, error) {
	var it model.GetQueryLog
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "startTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
			it.StartTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "endTime":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endTime"))
			it.EndTime, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "hostName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hostName"))
			it.HostName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputHost(ctx context.Context, obj interface{}) (model.Host, error) {
	var it model.Host
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "orgId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orgId"))
			it.OrgID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "serviceAccountURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("serviceAccountURL"))
			it.ServiceAccountURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "zone":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zone"))
			it.Zone, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instanceName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceName"))
			it.InstanceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "instanceId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceId"))
			it.InstanceID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessKey"))
			it.AccessKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "secretKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("secretKey"))
			it.SecretKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "subscriptionId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subscriptionId"))
			it.SubscriptionID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "resourceGroupName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resourceGroupName"))
			it.ResourceGroupName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			it.ClientID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientSecret":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientSecret"))
			it.ClientSecret, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tenantId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tenantId"))
			it.TenantID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdBy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdBy"))
			it.CreatedBy, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isActive":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isActive"))
			it.IsActive, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputImage(ctx context.Context, obj interface{}) (model.Image, error) {
	var it model.Image
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "logoUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logoUrl"))
			it.LogoURL, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputInviteUser(ctx context.Context, obj interface{}) (model.InviteUser, error) {
	var it model.InviteUser
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userEmail":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userEmail"))
			it.UserEmail, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organization":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organization"))
			it.Organization, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLogin(ctx context.Context, obj interface{}) (model.Login, error) {
	var it model.Login
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMigrateOrganizationInput(ctx context.Context, obj interface{}) (model.MigrateOrganizationInput, error) {
	var it model.MigrateOrganizationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "organizationIdFrom":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationIdFrom"))
			it.OrganizationIDFrom, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationIdTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationIdTo"))
			it.OrganizationIDTo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMoveAppInput(ctx context.Context, obj interface{}) (model.MoveAppInput, error) {
	var it model.MoveAppInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceRegCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceRegCode"))
			it.SourceRegCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "destRegCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("destRegCode"))
			it.DestRegCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMultipleRegionInput(ctx context.Context, obj interface{}) (model.MultipleRegionInput, error) {
	var it model.MultipleRegionInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isDefault":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isDefault"))
			it.IsDefault, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewLink(ctx context.Context, obj interface{}) (model.NewLink, error) {
	var it model.NewLink
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "address":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("address"))
			it.Address, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNewUser(ctx context.Context, obj interface{}) (model.NewUser, error) {
	var it model.NewUser
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNotification(ctx context.Context, obj interface{}) (model.Notification, error) {
	var it model.Notification
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isRead":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isRead"))
			it.IsRead, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputOptimizeImageInput(ctx context.Context, obj interface{}) (model.OptimizeImageInput, error) {
	var it model.OptimizeImageInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPauseAppInput(ctx context.Context, obj interface{}) (model.PauseAppInput, error) {
	var it model.PauseAppInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "regionCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionCode"))
			it.RegionCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRefreshTokenInput(ctx context.Context, obj interface{}) (model.RefreshTokenInput, error) {
	var it model.RefreshTokenInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRegionRequest(ctx context.Context, obj interface{}) (model.RegionRequest, error) {
	var it model.RegionRequest
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "region":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("region"))
			it.Region, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "firstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("firstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputRestartAppInput(ctx context.Context, obj interface{}) (model.RestartAppInput, error) {
	var it model.RestartAppInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputResumeAppInput(ctx context.Context, obj interface{}) (model.ResumeAppInput, error) {
	var it model.ResumeAppInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "regionCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("regionCode"))
			it.RegionCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3BuildCommands(ctx context.Context, obj interface{}) (model.S3BuildCommands, error) {
	var it model.S3BuildCommands
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "s3Cmd":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3Cmd"))
			it.S3Cmd, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3DeployInput(ctx context.Context, obj interface{}) (model.S3DeployInput, error) {
	var it model.S3DeployInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "s3AppName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3AppName"))
			it.S3AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "s3Url":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("s3Url"))
			it.S3Url, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buildFileName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildFileName"))
			it.BuildFileName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buildCommandsS3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildCommandsS3"))
			it.BuildCommandsS3, err = ec.unmarshalOS3BuildCommands2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommands(ctx, v)
			if err != nil {
				return it, err
			}
		case "envVariablesS3":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("envVariablesS3"))
			it.EnvVariablesS3, err = ec.unmarshalOS3EnvVariables2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariables(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "deployBuildFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deployBuildFile"))
			it.DeployBuildFile, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputS3EnvVariables(ctx context.Context, obj interface{}) (model.S3EnvVariables, error) {
	var it model.S3EnvVariables
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "value":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("value"))
			it.Value, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStartAndStopVM(ctx context.Context, obj interface{}) (model.StartAndStopVM, error) {
	var it model.StartAndStopVM
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "instanceName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("instanceName"))
			it.InstanceName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "action":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("action"))
			it.Action, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStartBuildInput(ctx context.Context, obj interface{}) (model.StartBuildInput, error) {
	var it model.StartBuildInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceUrl"))
			it.SourceURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "sourceType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sourceType"))
			it.SourceType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buildType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildType"))
			it.BuildType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageTag":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageTag"))
			it.ImageTag, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "buildArgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("buildArgs"))
			it.BuildArgs, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		case "fileExtension":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("fileExtension"))
			it.FileExtension, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "dockerFile":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dockerFile"))
			it.DockerFile, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "dockerFilePath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dockerFilePath"))
			it.DockerFilePath, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateAppInput(ctx context.Context, obj interface{}) (model.UpdateAppInput, error) {
	var it model.UpdateAppInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "internalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalPort"))
			it.InternalPort, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalPort"))
			it.ExternalPort, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "build":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("build"))
			it.Build, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "routingPolicy":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("routingPolicy"))
			it.RoutingPolicy, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "resource":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("resource"))
			it.Resource, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "replicas":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replicas"))
			it.Replicas, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateConfig(ctx context.Context, obj interface{}) (model.UpdateConfig, error) {
	var it model.UpdateConfig
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
			it.AppID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "internalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("internalPort"))
			it.InternalPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "externalPort":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("externalPort"))
			it.ExternalPort, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "image":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("image"))
			it.Image, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "archiveUrl":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("archiveUrl"))
			it.ArchiveURL, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "version":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
			it.Version, err = ec.unmarshalOInt2ᚖint(ctx, v)
			if err != nil {
				return it, err
			}
		case "envMapArgs":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("envMapArgs"))
			it.EnvMapArgs, err = ec.unmarshalOString2ᚕᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateSecretInput(ctx context.Context, obj interface{}) (model.UpdateSecretInput, error) {
	var it model.UpdateSecretInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "registryType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registryType"))
			it.RegistryType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "registryInfo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registryInfo"))
			it.RegistryInfo, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUserInput(ctx context.Context, obj interface{}) (model.UpdateUserInput, error) {
	var it model.UpdateUserInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "companyName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("companyName"))
			it.CompanyName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "location":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("location"))
			it.Location, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "industry":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("industry"))
			it.Industry, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "FirstName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("FirstName"))
			it.FirstName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "LastName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("LastName"))
			it.LastName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "mode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mode"))
			it.Mode, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateVolumeInput(ctx context.Context, obj interface{}) (model.UpdateVolumeInput, error) {
	var it model.UpdateVolumeInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "appName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appName"))
			it.AppName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "volumeSize":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("volumeSize"))
			it.VolumeSize, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserById(ctx context.Context, obj interface{}) (model.UserByID, error) {
	var it model.UserByID
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserPAT(ctx context.Context, obj interface{}) (model.UserPat, error) {
	var it model.UserPat
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "type":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("type"))
			it.Type, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "patToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("patToken"))
			it.PatToken, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputWorkloadManagement(ctx context.Context, obj interface{}) (model.WorkloadManagement, error) {
	var it model.WorkloadManagement
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "environmentName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environmentName"))
			it.EnvironmentName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "environmentEndpoint":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("environmentEndpoint"))
			it.EnvironmentEndpoint, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationId"))
			it.OrganizationID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var activityImplementors = []string{"Activity"}

func (ec *executionContext) _Activity(ctx context.Context, sel ast.SelectionSet, obj *model.Activity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, activityImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Activity")
		case "Id":
			out.Values[i] = ec._Activity_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Type":
			out.Values[i] = ec._Activity_Type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Activities":
			out.Values[i] = ec._Activity_Activities(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Message":
			out.Values[i] = ec._Activity_Message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._Activity_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var actorImplementors = []string{"Actor"}

func (ec *executionContext) _Actor(ctx context.Context, sel ast.SelectionSet, obj *model.Actor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Actor")
		case "type":
			out.Values[i] = ec._Actor_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var addedDataDogImplementors = []string{"AddedDataDog"}

func (ec *executionContext) _AddedDataDog(ctx context.Context, sel ast.SelectionSet, obj *model.AddedDataDog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, addedDataDogImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AddedDataDog")
		case "id":
			out.Values[i] = ec._AddedDataDog_id(ctx, field, obj)
		case "apiKey":
			out.Values[i] = ec._AddedDataDog_apiKey(ctx, field, obj)
		case "appKey":
			out.Values[i] = ec._AddedDataDog_appKey(ctx, field, obj)
		case "apiEndpoint":
			out.Values[i] = ec._AddedDataDog_apiEndpoint(ctx, field, obj)
		case "clusterId":
			out.Values[i] = ec._AddedDataDog_clusterId(ctx, field, obj)
		case "clusterDetails":
			out.Values[i] = ec._AddedDataDog_clusterDetails(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var allocationEventImplementors = []string{"AllocationEvent"}

func (ec *executionContext) _AllocationEvent(ctx context.Context, sel ast.SelectionSet, obj *model.AllocationEvent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allocationEventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllocationEvent")
		case "timestamp":
			out.Values[i] = ec._AllocationEvent_timestamp(ctx, field, obj)
		case "type":
			out.Values[i] = ec._AllocationEvent_type(ctx, field, obj)
		case "message":
			out.Values[i] = ec._AllocationEvent_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var allocationStatusImplementors = []string{"AllocationStatus"}

func (ec *executionContext) _AllocationStatus(ctx context.Context, sel ast.SelectionSet, obj *model.AllocationStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, allocationStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AllocationStatus")
		case "id":
			out.Values[i] = ec._AllocationStatus_id(ctx, field, obj)
		case "idShort":
			out.Values[i] = ec._AllocationStatus_idShort(ctx, field, obj)
		case "version":
			out.Values[i] = ec._AllocationStatus_version(ctx, field, obj)
		case "region":
			out.Values[i] = ec._AllocationStatus_region(ctx, field, obj)
		case "status":
			out.Values[i] = ec._AllocationStatus_status(ctx, field, obj)
		case "desiredStatus":
			out.Values[i] = ec._AllocationStatus_desiredStatus(ctx, field, obj)
		case "healthy":
			out.Values[i] = ec._AllocationStatus_healthy(ctx, field, obj)
		case "canary":
			out.Values[i] = ec._AllocationStatus_canary(ctx, field, obj)
		case "failed":
			out.Values[i] = ec._AllocationStatus_failed(ctx, field, obj)
		case "restarts":
			out.Values[i] = ec._AllocationStatus_restarts(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AllocationStatus_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AllocationStatus_updatedAt(ctx, field, obj)
		case "checks":
			out.Values[i] = ec._AllocationStatus_checks(ctx, field, obj)
		case "events":
			out.Values[i] = ec._AllocationStatus_events(ctx, field, obj)
		case "latestVersion":
			out.Values[i] = ec._AllocationStatus_latestVersion(ctx, field, obj)
		case "passingCheckCount":
			out.Values[i] = ec._AllocationStatus_passingCheckCount(ctx, field, obj)
		case "warningCheckCount":
			out.Values[i] = ec._AllocationStatus_warningCheckCount(ctx, field, obj)
		case "criticalCheckCount":
			out.Values[i] = ec._AllocationStatus_criticalCheckCount(ctx, field, obj)
		case "transitioning":
			out.Values[i] = ec._AllocationStatus_transitioning(ctx, field, obj)
		case "recentLogs":
			out.Values[i] = ec._AllocationStatus_recentLogs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appImplementors = []string{"App"}

func (ec *executionContext) _App(ctx context.Context, sel ast.SelectionSet, obj *model.App) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("App")
		case "id":
			out.Values[i] = ec._App_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._App_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._App_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deployed":
			out.Values[i] = ec._App_deployed(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._App_hostname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "appUrl":
			out.Values[i] = ec._App_appUrl(ctx, field, obj)
		case "version":
			out.Values[i] = ec._App_version(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "release":
			out.Values[i] = ec._App_release(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._App_organization(ctx, field, obj)
		case "secrets":
			out.Values[i] = ec._App_secrets(ctx, field, obj)
		case "currentRelease":
			out.Values[i] = ec._App_currentRelease(ctx, field, obj)
		case "releases":
			out.Values[i] = ec._App_releases(ctx, field, obj)
		case "ipAddresses":
			out.Values[i] = ec._App_ipAddresses(ctx, field, obj)
		case "ipAddress":
			out.Values[i] = ec._App_ipAddress(ctx, field, obj)
		case "builds":
			out.Values[i] = ec._App_builds(ctx, field, obj)
		case "changes":
			out.Values[i] = ec._App_changes(ctx, field, obj)
		case "certificates":
			out.Values[i] = ec._App_certificates(ctx, field, obj)
		case "certificate":
			out.Values[i] = ec._App_certificate(ctx, field, obj)
		case "services":
			out.Values[i] = ec._App_services(ctx, field, obj)
		case "config":
			out.Values[i] = ec._App_config(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._App_createdAt(ctx, field, obj)
		case "parseConfig":
			out.Values[i] = ec._App_parseConfig(ctx, field, obj)
		case "allocations":
			out.Values[i] = ec._App_allocations(ctx, field, obj)
		case "allocation":
			out.Values[i] = ec._App_allocation(ctx, field, obj)
		case "deploymentStatus":
			out.Values[i] = ec._App_deploymentStatus(ctx, field, obj)
		case "autoscaling":
			out.Values[i] = ec._App_autoscaling(ctx, field, obj)
		case "vmSize":
			out.Values[i] = ec._App_vmSize(ctx, field, obj)
		case "regions":
			out.Values[i] = ec._App_regions(ctx, field, obj)
		case "backupRegions":
			out.Values[i] = ec._App_backupRegions(ctx, field, obj)
		case "volumes":
			out.Values[i] = ec._App_volumes(ctx, field, obj)
		case "imageName":
			out.Values[i] = ec._App_imageName(ctx, field, obj)
		case "port":
			out.Values[i] = ec._App_port(ctx, field, obj)
		case "secretRegistryId":
			out.Values[i] = ec._App_secretRegistryId(ctx, field, obj)
		case "instanceId":
			out.Values[i] = ec._App_instanceId(ctx, field, obj)
		case "dockerId":
			out.Values[i] = ec._App_dockerId(ctx, field, obj)
		case "hostId":
			out.Values[i] = ec._App_hostId(ctx, field, obj)
		case "tenantId":
			out.Values[i] = ec._App_tenantId(ctx, field, obj)
		case "envArgs":
			out.Values[i] = ec._App_envArgs(ctx, field, obj)
		case "deployType":
			out.Values[i] = ec._App_deployType(ctx, field, obj)
		case "containerId":
			out.Values[i] = ec._App_containerId(ctx, field, obj)
		case "builtinType":
			out.Values[i] = ec._App_builtinType(ctx, field, obj)
		case "workloadManagementId":
			out.Values[i] = ec._App_workloadManagementId(ctx, field, obj)
		case "WorkloadManagementName":
			out.Values[i] = ec._App_WorkloadManagementName(ctx, field, obj)
		case "WorkloadManagementEndPoint":
			out.Values[i] = ec._App_WorkloadManagementEndPoint(ctx, field, obj)
		case "organizationId":
			out.Values[i] = ec._App_organizationId(ctx, field, obj)
		case "organizationName":
			out.Values[i] = ec._App_organizationName(ctx, field, obj)
		case "subOrganizationId":
			out.Values[i] = ec._App_subOrganizationId(ctx, field, obj)
		case "subOrganizationName":
			out.Values[i] = ec._App_subOrganizationName(ctx, field, obj)
		case "businessUnitId":
			out.Values[i] = ec._App_businessUnitId(ctx, field, obj)
		case "businessUnitName":
			out.Values[i] = ec._App_businessUnitName(ctx, field, obj)
		case "clusterDetials":
			out.Values[i] = ec._App_clusterDetials(ctx, field, obj)
		case "replicas":
			out.Values[i] = ec._App_replicas(ctx, field, obj)
		case "userDetails":
			out.Values[i] = ec._App_userDetails(ctx, field, obj)
		case "deploymentTime":
			out.Values[i] = ec._App_deploymentTime(ctx, field, obj)
		case "buildTime":
			out.Values[i] = ec._App_buildTime(ctx, field, obj)
		case "buildLogsUrl":
			out.Values[i] = ec._App_buildLogsUrl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appCertificateImplementors = []string{"AppCertificate"}

func (ec *executionContext) _AppCertificate(ctx context.Context, sel ast.SelectionSet, obj *model.AppCertificate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appCertificateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppCertificate")
		case "id":
			out.Values[i] = ec._AppCertificate_id(ctx, field, obj)
		case "acmeDNSConfigured":
			out.Values[i] = ec._AppCertificate_acmeDNSConfigured(ctx, field, obj)
		case "acmeALPNConfigured":
			out.Values[i] = ec._AppCertificate_acmeALPNConfigured(ctx, field, obj)
		case "configured":
			out.Values[i] = ec._AppCertificate_configured(ctx, field, obj)
		case "certificateAuthority":
			out.Values[i] = ec._AppCertificate_certificateAuthority(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AppCertificate_createdAt(ctx, field, obj)
		case "DNSProvider":
			out.Values[i] = ec._AppCertificate_DNSProvider(ctx, field, obj)
		case "dNSValidationInstructions":
			out.Values[i] = ec._AppCertificate_dNSValidationInstructions(ctx, field, obj)
		case "dNSValidationHostname":
			out.Values[i] = ec._AppCertificate_dNSValidationHostname(ctx, field, obj)
		case "dNSValidationTarget":
			out.Values[i] = ec._AppCertificate_dNSValidationTarget(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._AppCertificate_hostname(ctx, field, obj)
		case "source":
			out.Values[i] = ec._AppCertificate_source(ctx, field, obj)
		case "clientStatus":
			out.Values[i] = ec._AppCertificate_clientStatus(ctx, field, obj)
		case "isApex":
			out.Values[i] = ec._AppCertificate_isApex(ctx, field, obj)
		case "isWildcard":
			out.Values[i] = ec._AppCertificate_isWildcard(ctx, field, obj)
		case "issued":
			out.Values[i] = ec._AppCertificate_issued(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appChangeImplementors = []string{"AppChange"}

func (ec *executionContext) _AppChange(ctx context.Context, sel ast.SelectionSet, obj *model.AppChange) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appChangeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppChange")
		case "id":
			out.Values[i] = ec._AppChange_id(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._AppChange_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._AppChange_updatedAt(ctx, field, obj)
		case "actor":
			out.Values[i] = ec._AppChange_actor(ctx, field, obj)
		case "status":
			out.Values[i] = ec._AppChange_status(ctx, field, obj)
		case "description":
			out.Values[i] = ec._AppChange_description(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._AppChange_reason(ctx, field, obj)
		case "user":
			out.Values[i] = ec._AppChange_user(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appCompactImplementors = []string{"AppCompact"}

func (ec *executionContext) _AppCompact(ctx context.Context, sel ast.SelectionSet, obj *model.AppCompact) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appCompactImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppCompact")
		case "id":
			out.Values[i] = ec._AppCompact_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._AppCompact_name(ctx, field, obj)
		case "status":
			out.Values[i] = ec._AppCompact_status(ctx, field, obj)
		case "deployed":
			out.Values[i] = ec._AppCompact_deployed(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._AppCompact_hostname(ctx, field, obj)
		case "appUrl":
			out.Values[i] = ec._AppCompact_appUrl(ctx, field, obj)
		case "version":
			out.Values[i] = ec._AppCompact_version(ctx, field, obj)
		case "release":
			out.Values[i] = ec._AppCompact_release(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._AppCompact_organization(ctx, field, obj)
		case "ipAddresses":
			out.Values[i] = ec._AppCompact_ipAddresses(ctx, field, obj)
		case "services":
			out.Values[i] = ec._AppCompact_services(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appConfigImplementors = []string{"AppConfig"}

func (ec *executionContext) _AppConfig(ctx context.Context, sel ast.SelectionSet, obj *model.AppConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppConfig")
		case "definition":
			out.Values[i] = ec._AppConfig_definition(ctx, field, obj)
		case "services":
			out.Values[i] = ec._AppConfig_services(ctx, field, obj)
		case "valid":
			out.Values[i] = ec._AppConfig_valid(ctx, field, obj)
		case "build":
			out.Values[i] = ec._AppConfig_build(ctx, field, obj)
		case "errors":
			out.Values[i] = ec._AppConfig_errors(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appDeploymentRegionImplementors = []string{"AppDeploymentRegion"}

func (ec *executionContext) _AppDeploymentRegion(ctx context.Context, sel ast.SelectionSet, obj *model.AppDeploymentRegion) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appDeploymentRegionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppDeploymentRegion")
		case "regions":
			out.Values[i] = ec._AppDeploymentRegion_regions(ctx, field, obj)
		case "availableRegions":
			out.Values[i] = ec._AppDeploymentRegion_availableRegions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appInBusinessUnitImplementors = []string{"AppInBusinessUnit"}

func (ec *executionContext) _AppInBusinessUnit(ctx context.Context, sel ast.SelectionSet, obj *model.AppInBusinessUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appInBusinessUnitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppInBusinessUnit")
		case "businessUnitId":
			out.Values[i] = ec._AppInBusinessUnit_businessUnitId(ctx, field, obj)
		case "businessUnitName":
			out.Values[i] = ec._AppInBusinessUnit_businessUnitName(ctx, field, obj)
		case "appsInBusinessUnit":
			out.Values[i] = ec._AppInBusinessUnit_appsInBusinessUnit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appInSubOrgImplementors = []string{"AppInSubOrg"}

func (ec *executionContext) _AppInSubOrg(ctx context.Context, sel ast.SelectionSet, obj *model.AppInSubOrg) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appInSubOrgImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppInSubOrg")
		case "subOrgId":
			out.Values[i] = ec._AppInSubOrg_subOrgId(ctx, field, obj)
		case "subOrgName":
			out.Values[i] = ec._AppInSubOrg_subOrgName(ctx, field, obj)
		case "appsInSubOrgs":
			out.Values[i] = ec._AppInSubOrg_appsInSubOrgs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appOrgCountImplementors = []string{"AppOrgCount"}

func (ec *executionContext) _AppOrgCount(ctx context.Context, sel ast.SelectionSet, obj *model.AppOrgCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appOrgCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppOrgCount")
		case "organization":
			out.Values[i] = ec._AppOrgCount_organization(ctx, field, obj)
		case "apps":
			out.Values[i] = ec._AppOrgCount_apps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appStatusImplementors = []string{"AppStatus"}

func (ec *executionContext) _AppStatus(ctx context.Context, sel ast.SelectionSet, obj *model.AppStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppStatus")
		case "id":
			out.Values[i] = ec._AppStatus_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AppStatus_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deployed":
			out.Values[i] = ec._AppStatus_deployed(ctx, field, obj)
		case "status":
			out.Values[i] = ec._AppStatus_status(ctx, field, obj)
		case "hostname":
			out.Values[i] = ec._AppStatus_hostname(ctx, field, obj)
		case "version":
			out.Values[i] = ec._AppStatus_version(ctx, field, obj)
		case "appURL":
			out.Values[i] = ec._AppStatus_appURL(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._AppStatus_organization(ctx, field, obj)
		case "deploymentStatus":
			out.Values[i] = ec._AppStatus_deploymentStatus(ctx, field, obj)
		case "allocations":
			out.Values[i] = ec._AppStatus_allocations(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appsImplementors = []string{"Apps"}

func (ec *executionContext) _Apps(ctx context.Context, sel ast.SelectionSet, obj *model.Apps) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Apps")
		case "nodes":
			out.Values[i] = ec._Apps_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appsAndOrgsAndSubOrgCountDetailsImplementors = []string{"AppsAndOrgsAndSubOrgCountDetails"}

func (ec *executionContext) _AppsAndOrgsAndSubOrgCountDetails(ctx context.Context, sel ast.SelectionSet, obj *model.AppsAndOrgsAndSubOrgCountDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appsAndOrgsAndSubOrgCountDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppsAndOrgsAndSubOrgCountDetails")
		case "totalOrgCount":
			out.Values[i] = ec._AppsAndOrgsAndSubOrgCountDetails_totalOrgCount(ctx, field, obj)
		case "totalSubOrgCount":
			out.Values[i] = ec._AppsAndOrgsAndSubOrgCountDetails_totalSubOrgCount(ctx, field, obj)
		case "totalBusinessUnitCount":
			out.Values[i] = ec._AppsAndOrgsAndSubOrgCountDetails_totalBusinessUnitCount(ctx, field, obj)
		case "totalAppCount":
			out.Values[i] = ec._AppsAndOrgsAndSubOrgCountDetails_totalAppCount(ctx, field, obj)
		case "orgByAppCount":
			out.Values[i] = ec._AppsAndOrgsAndSubOrgCountDetails_orgByAppCount(ctx, field, obj)
		case "region":
			out.Values[i] = ec._AppsAndOrgsAndSubOrgCountDetails_region(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appsAndOrgsCountDetailsImplementors = []string{"AppsAndOrgsCountDetails"}

func (ec *executionContext) _AppsAndOrgsCountDetails(ctx context.Context, sel ast.SelectionSet, obj *model.AppsAndOrgsCountDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appsAndOrgsCountDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppsAndOrgsCountDetails")
		case "totalOrgCount":
			out.Values[i] = ec._AppsAndOrgsCountDetails_totalOrgCount(ctx, field, obj)
		case "totalAppCount":
			out.Values[i] = ec._AppsAndOrgsCountDetails_totalAppCount(ctx, field, obj)
		case "orgByAppCount":
			out.Values[i] = ec._AppsAndOrgsCountDetails_orgByAppCount(ctx, field, obj)
		case "region":
			out.Values[i] = ec._AppsAndOrgsCountDetails_region(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appsCountbyBusinessUnitImplementors = []string{"AppsCountbyBusinessUnit"}

func (ec *executionContext) _AppsCountbyBusinessUnit(ctx context.Context, sel ast.SelectionSet, obj *model.AppsCountbyBusinessUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appsCountbyBusinessUnitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppsCountbyBusinessUnit")
		case "appsCount":
			out.Values[i] = ec._AppsCountbyBusinessUnit_appsCount(ctx, field, obj)
		case "newApp":
			out.Values[i] = ec._AppsCountbyBusinessUnit_newApp(ctx, field, obj)
		case "activeApp":
			out.Values[i] = ec._AppsCountbyBusinessUnit_activeApp(ctx, field, obj)
		case "inActiveApp":
			out.Values[i] = ec._AppsCountbyBusinessUnit_inActiveApp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appsOrgsCountImplementors = []string{"AppsOrgsCount"}

func (ec *executionContext) _AppsOrgsCount(ctx context.Context, sel ast.SelectionSet, obj *model.AppsOrgsCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appsOrgsCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppsOrgsCount")
		case "organization":
			out.Values[i] = ec._AppsOrgsCount_organization(ctx, field, obj)
		case "appsCount":
			out.Values[i] = ec._AppsOrgsCount_appsCount(ctx, field, obj)
		case "newApp":
			out.Values[i] = ec._AppsOrgsCount_newApp(ctx, field, obj)
		case "activeApp":
			out.Values[i] = ec._AppsOrgsCount_activeApp(ctx, field, obj)
		case "inActiveApp":
			out.Values[i] = ec._AppsOrgsCount_inActiveApp(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appsOrgsSubCountImplementors = []string{"AppsOrgsSubCount"}

func (ec *executionContext) _AppsOrgsSubCount(ctx context.Context, sel ast.SelectionSet, obj *model.AppsOrgsSubCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appsOrgsSubCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AppsOrgsSubCount")
		case "organization":
			out.Values[i] = ec._AppsOrgsSubCount_organization(ctx, field, obj)
		case "appsCount":
			out.Values[i] = ec._AppsOrgsSubCount_appsCount(ctx, field, obj)
		case "newApp":
			out.Values[i] = ec._AppsOrgsSubCount_newApp(ctx, field, obj)
		case "activeApp":
			out.Values[i] = ec._AppsOrgsSubCount_activeApp(ctx, field, obj)
		case "inActiveApp":
			out.Values[i] = ec._AppsOrgsSubCount_inActiveApp(ctx, field, obj)
		case "subOrganization":
			out.Values[i] = ec._AppsOrgsSubCount_subOrganization(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var attachPaymentImplementors = []string{"AttachPayment"}

func (ec *executionContext) _AttachPayment(ctx context.Context, sel ast.SelectionSet, obj *model.AttachPayment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, attachPaymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AttachPayment")
		case "id":
			out.Values[i] = ec._AttachPayment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerId":
			out.Values[i] = ec._AttachPayment_customerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "paymentMethodId":
			out.Values[i] = ec._AttachPayment_paymentMethodId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._AttachPayment_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._AttachPayment_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "city":
			out.Values[i] = ec._AttachPayment_city(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "country":
			out.Values[i] = ec._AttachPayment_country(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "state":
			out.Values[i] = ec._AttachPayment_state(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._AttachPayment_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var autoscalingConfigImplementors = []string{"AutoscalingConfig"}

func (ec *executionContext) _AutoscalingConfig(ctx context.Context, sel ast.SelectionSet, obj *model.AutoscalingConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, autoscalingConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AutoscalingConfig")
		case "balanceRegions":
			out.Values[i] = ec._AutoscalingConfig_balanceRegions(ctx, field, obj)
		case "enabled":
			out.Values[i] = ec._AutoscalingConfig_enabled(ctx, field, obj)
		case "maxCount":
			out.Values[i] = ec._AutoscalingConfig_maxCount(ctx, field, obj)
		case "minCount":
			out.Values[i] = ec._AutoscalingConfig_minCount(ctx, field, obj)
		case "regions":
			out.Values[i] = ec._AutoscalingConfig_regions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var autoscalingRegionConfigImplementors = []string{"AutoscalingRegionConfig"}

func (ec *executionContext) _AutoscalingRegionConfig(ctx context.Context, sel ast.SelectionSet, obj *model.AutoscalingRegionConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, autoscalingRegionConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AutoscalingRegionConfig")
		case "code":
			out.Values[i] = ec._AutoscalingRegionConfig_code(ctx, field, obj)
		case "minCount":
			out.Values[i] = ec._AutoscalingRegionConfig_minCount(ctx, field, obj)
		case "weight":
			out.Values[i] = ec._AutoscalingRegionConfig_weight(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var buildImplementors = []string{"Build"}

func (ec *executionContext) _Build(ctx context.Context, sel ast.SelectionSet, obj *model.Build) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Build")
		case "id":
			out.Values[i] = ec._Build_id(ctx, field, obj)
		case "inProgress":
			out.Values[i] = ec._Build_inProgress(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Build_status(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Build_user(ctx, field, obj)
		case "logs":
			out.Values[i] = ec._Build_logs(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Build_image(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Build_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Build_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var buildArgsInputImplementors = []string{"BuildArgsInput"}

func (ec *executionContext) _BuildArgsInput(ctx context.Context, sel ast.SelectionSet, obj *model.BuildArgsInput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildArgsInputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BuildArgsInput")
		case "name":
			out.Values[i] = ec._BuildArgsInput_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._BuildArgsInput_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var builderImplementors = []string{"Builder"}

func (ec *executionContext) _Builder(ctx context.Context, sel ast.SelectionSet, obj *model.Builder) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, builderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Builder")
		case "builder":
			out.Values[i] = ec._Builder_builder(ctx, field, obj)
		case "builtin":
			out.Values[i] = ec._Builder_builtin(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Builder_image(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var buildsImplementors = []string{"Builds"}

func (ec *executionContext) _Builds(ctx context.Context, sel ast.SelectionSet, obj *model.Builds) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, buildsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Builds")
		case "nodes":
			out.Values[i] = ec._Builds_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessUnitCountImplementors = []string{"BusinessUnitCount"}

func (ec *executionContext) _BusinessUnitCount(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessUnitCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessUnitCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BusinessUnitCount")
		case "businessUnitCount":
			out.Values[i] = ec._BusinessUnitCount_businessUnitCount(ctx, field, obj)
		case "appsCount":
			out.Values[i] = ec._BusinessUnitCount_appsCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var certificatesImplementors = []string{"Certificates"}

func (ec *executionContext) _Certificates(ctx context.Context, sel ast.SelectionSet, obj *model.Certificates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, certificatesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Certificates")
		case "nodes":
			out.Values[i] = ec._Certificates_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chagesImplementors = []string{"Chages"}

func (ec *executionContext) _Chages(ctx context.Context, sel ast.SelectionSet, obj *model.Chages) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chagesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Chages")
		case "nodes":
			out.Values[i] = ec._Chages_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var changesImplementors = []string{"Changes"}

func (ec *executionContext) _Changes(ctx context.Context, sel ast.SelectionSet, obj *model.Changes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, changesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Changes")
		case "nodes":
			out.Values[i] = ec._Changes_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkImplementors = []string{"Check"}

func (ec *executionContext) _Check(ctx context.Context, sel ast.SelectionSet, obj *model.Check) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Check")
		case "type":
			out.Values[i] = ec._Check_type(ctx, field, obj)
		case "interval":
			out.Values[i] = ec._Check_interval(ctx, field, obj)
		case "timeout":
			out.Values[i] = ec._Check_timeout(ctx, field, obj)
		case "httpMethod":
			out.Values[i] = ec._Check_httpMethod(ctx, field, obj)
		case "httpPath":
			out.Values[i] = ec._Check_httpPath(ctx, field, obj)
		case "httpProtocol":
			out.Values[i] = ec._Check_httpProtocol(ctx, field, obj)
		case "httpSkipTLSVerify":
			out.Values[i] = ec._Check_httpSkipTLSVerify(ctx, field, obj)
		case "httpHeaders":
			out.Values[i] = ec._Check_httpHeaders(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var checkStateImplementors = []string{"CheckState"}

func (ec *executionContext) _CheckState(ctx context.Context, sel ast.SelectionSet, obj *model.CheckState) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, checkStateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CheckState")
		case "name":
			out.Values[i] = ec._CheckState_name(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CheckState_status(ctx, field, obj)
		case "output":
			out.Values[i] = ec._CheckState_output(ctx, field, obj)
		case "serviceName":
			out.Values[i] = ec._CheckState_serviceName(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var cloudRegionsImplementors = []string{"CloudRegions"}

func (ec *executionContext) _CloudRegions(ctx context.Context, sel ast.SelectionSet, obj *model.CloudRegions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, cloudRegionsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CloudRegions")
		case "code":
			out.Values[i] = ec._CloudRegions_code(ctx, field, obj)
		case "name":
			out.Values[i] = ec._CloudRegions_name(ctx, field, obj)
		case "type":
			out.Values[i] = ec._CloudRegions_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterDetailImplementors = []string{"ClusterDetail"}

func (ec *executionContext) _ClusterDetail(ctx context.Context, sel ast.SelectionSet, obj *model.ClusterDetail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clusterDetailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterDetail")
		case "region_code":
			out.Values[i] = ec._ClusterDetail_region_code(ctx, field, obj)
		case "regionName":
			out.Values[i] = ec._ClusterDetail_regionName(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._ClusterDetail_isDefault(ctx, field, obj)
		case "cluster_config_path":
			out.Values[i] = ec._ClusterDetail_cluster_config_path(ctx, field, obj)
		case "ebl_enabled":
			out.Values[i] = ec._ClusterDetail_ebl_enabled(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ClusterDetail_port(ctx, field, obj)
		case "cloudType":
			out.Values[i] = ec._ClusterDetail_cloudType(ctx, field, obj)
		case "clusterType":
			out.Values[i] = ec._ClusterDetail_clusterType(ctx, field, obj)
		case "providerType":
			out.Values[i] = ec._ClusterDetail_providerType(ctx, field, obj)
		case "externalBaseAddress":
			out.Values[i] = ec._ClusterDetail_externalBaseAddress(ctx, field, obj)
		case "externalAgentPlatform":
			out.Values[i] = ec._ClusterDetail_externalAgentPlatform(ctx, field, obj)
		case "externalLBType":
			out.Values[i] = ec._ClusterDetail_externalLBType(ctx, field, obj)
		case "externalCloudType":
			out.Values[i] = ec._ClusterDetail_externalCloudType(ctx, field, obj)
		case "interface":
			out.Values[i] = ec._ClusterDetail_interface(ctx, field, obj)
		case "route53CountryCode":
			out.Values[i] = ec._ClusterDetail_route53CountryCode(ctx, field, obj)
		case "tenantId":
			out.Values[i] = ec._ClusterDetail_tenantId(ctx, field, obj)
		case "allocationTag":
			out.Values[i] = ec._ClusterDetail_allocationTag(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterDetailsImplementors = []string{"ClusterDetails"}

func (ec *executionContext) _ClusterDetails(ctx context.Context, sel ast.SelectionSet, obj *model.ClusterDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clusterDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterDetails")
		case "id":
			out.Values[i] = ec._ClusterDetails_id(ctx, field, obj)
		case "regionCode":
			out.Values[i] = ec._ClusterDetails_regionCode(ctx, field, obj)
		case "providerType":
			out.Values[i] = ec._ClusterDetails_providerType(ctx, field, obj)
		case "clusterType":
			out.Values[i] = ec._ClusterDetails_clusterType(ctx, field, obj)
		case "regionName":
			out.Values[i] = ec._ClusterDetails_regionName(ctx, field, obj)
		case "externalBaseAddress":
			out.Values[i] = ec._ClusterDetails_externalBaseAddress(ctx, field, obj)
		case "externalAgentPlatForm":
			out.Values[i] = ec._ClusterDetails_externalAgentPlatForm(ctx, field, obj)
		case "externalLBType":
			out.Values[i] = ec._ClusterDetails_externalLBType(ctx, field, obj)
		case "externalCloudType":
			out.Values[i] = ec._ClusterDetails_externalCloudType(ctx, field, obj)
		case "interfaceType":
			out.Values[i] = ec._ClusterDetails_interfaceType(ctx, field, obj)
		case "route53countryCode":
			out.Values[i] = ec._ClusterDetails_route53countryCode(ctx, field, obj)
		case "tenantId":
			out.Values[i] = ec._ClusterDetails_tenantId(ctx, field, obj)
		case "allocationTag":
			out.Values[i] = ec._ClusterDetails_allocationTag(ctx, field, obj)
		case "loadBalancerURL":
			out.Values[i] = ec._ClusterDetails_loadBalancerURL(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._ClusterDetails_isDefault(ctx, field, obj)
		case "clusterConfigPath":
			out.Values[i] = ec._ClusterDetails_clusterConfigPath(ctx, field, obj)
		case "clusterConfigUrl":
			out.Values[i] = ec._ClusterDetails_clusterConfigUrl(ctx, field, obj)
		case "eblEnabled":
			out.Values[i] = ec._ClusterDetails_eblEnabled(ctx, field, obj)
		case "port":
			out.Values[i] = ec._ClusterDetails_port(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterInfoImplementors = []string{"ClusterInfo"}

func (ec *executionContext) _ClusterInfo(ctx context.Context, sel ast.SelectionSet, obj *model.ClusterInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clusterInfoImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterInfo")
		case "id":
			out.Values[i] = ec._ClusterInfo_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._ClusterInfo_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "regionCode":
			out.Values[i] = ec._ClusterInfo_regionCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "ipAddress":
			out.Values[i] = ec._ClusterInfo_ipAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clusterConfigPath":
			out.Values[i] = ec._ClusterInfo_clusterConfigPath(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clustertype":
			out.Values[i] = ec._ClusterInfo_clustertype(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isLatency":
			out.Values[i] = ec._ClusterInfo_isLatency(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._ClusterInfo_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._ClusterInfo_longitude(ctx, field, obj)
		case "loadBalancerURL":
			out.Values[i] = ec._ClusterInfo_loadBalancerURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var clusterNodesImplementors = []string{"ClusterNodes"}

func (ec *executionContext) _ClusterNodes(ctx context.Context, sel ast.SelectionSet, obj *model.ClusterNodes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clusterNodesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ClusterNodes")
		case "nodes":
			out.Values[i] = ec._ClusterNodes_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configImplementors = []string{"Config"}

func (ec *executionContext) _Config(ctx context.Context, sel ast.SelectionSet, obj *model.Config) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Config")
		case "registry":
			out.Values[i] = ec._Config_registry(ctx, field, obj)
		case "domain_mapping":
			out.Values[i] = ec._Config_domain_mapping(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var configAppTemplatesImplementors = []string{"ConfigAppTemplates"}

func (ec *executionContext) _ConfigAppTemplates(ctx context.Context, sel ast.SelectionSet, obj *model.ConfigAppTemplates) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, configAppTemplatesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConfigAppTemplates")
		case "id":
			out.Values[i] = ec._ConfigAppTemplates_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._ConfigAppTemplates_name(ctx, field, obj)
		case "config":
			out.Values[i] = ec._ConfigAppTemplates_config(ctx, field, obj)
		case "envArgs":
			out.Values[i] = ec._ConfigAppTemplates_envArgs(ctx, field, obj)
		case "routingPolicy":
			out.Values[i] = ec._ConfigAppTemplates_routingPolicy(ctx, field, obj)
		case "volumeSize":
			out.Values[i] = ec._ConfigAppTemplates_volumeSize(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._ConfigAppTemplates_isActive(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._ConfigAppTemplates_createdBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._ConfigAppTemplates_createdAt(ctx, field, obj)
		case "cpuLimit":
			out.Values[i] = ec._ConfigAppTemplates_cpuLimit(ctx, field, obj)
		case "memoryLimit":
			out.Values[i] = ec._ConfigAppTemplates_memoryLimit(ctx, field, obj)
		case "cpuRequests":
			out.Values[i] = ec._ConfigAppTemplates_cpuRequests(ctx, field, obj)
		case "memoryRequests":
			out.Values[i] = ec._ConfigAppTemplates_memoryRequests(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var createOrganizationImplementors = []string{"CreateOrganization"}

func (ec *executionContext) _CreateOrganization(ctx context.Context, sel ast.SelectionSet, obj *model.CreateOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, createOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CreateOrganization")
		case "organization":
			out.Values[i] = ec._CreateOrganization_organization(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var currentUserEmailImplementors = []string{"CurrentUserEmail"}

func (ec *executionContext) _CurrentUserEmail(ctx context.Context, sel ast.SelectionSet, obj *model.CurrentUserEmail) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, currentUserEmailImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CurrentUserEmail")
		case "email":
			out.Values[i] = ec._CurrentUserEmail_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._CurrentUserEmail_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":
			out.Values[i] = ec._CurrentUserEmail_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dNSRecordImplementors = []string{"DNSRecord"}

func (ec *executionContext) _DNSRecord(ctx context.Context, sel ast.SelectionSet, obj *model.DNSRecord) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dNSRecordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DNSRecord")
		case "id":
			out.Values[i] = ec._DNSRecord_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._DNSRecord_name(ctx, field, obj)
		case "FQDN":
			out.Values[i] = ec._DNSRecord_FQDN(ctx, field, obj)
		case "isApex":
			out.Values[i] = ec._DNSRecord_isApex(ctx, field, obj)
		case "isWildcard":
			out.Values[i] = ec._DNSRecord_isWildcard(ctx, field, obj)
		case "isSystem":
			out.Values[i] = ec._DNSRecord_isSystem(ctx, field, obj)
		case "TTL":
			out.Values[i] = ec._DNSRecord_TTL(ctx, field, obj)
		case "type":
			out.Values[i] = ec._DNSRecord_type(ctx, field, obj)
		case "rData":
			out.Values[i] = ec._DNSRecord_rData(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._DNSRecord_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._DNSRecord_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteOrganizationImplementors = []string{"DeleteOrganization"}

func (ec *executionContext) _DeleteOrganization(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteOrganization")
		case "deletedOrganizationId":
			out.Values[i] = ec._DeleteOrganization_deletedOrganizationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deleteSubOrganizationImplementors = []string{"DeleteSubOrganization"}

func (ec *executionContext) _DeleteSubOrganization(ctx context.Context, sel ast.SelectionSet, obj *model.DeleteSubOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deleteSubOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeleteSubOrganization")
		case "deletedSubOrganizationId":
			out.Values[i] = ec._DeleteSubOrganization_deletedSubOrganizationId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deployImageImplementors = []string{"DeployImage"}

func (ec *executionContext) _DeployImage(ctx context.Context, sel ast.SelectionSet, obj *model.DeployImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deployImageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeployImage")
		case "release":
			out.Values[i] = ec._DeployImage_release(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deployOutputImplementors = []string{"DeployOutput"}

func (ec *executionContext) _DeployOutput(ctx context.Context, sel ast.SelectionSet, obj *model.DeployOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deployOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeployOutput")
		case "deploymentName":
			out.Values[i] = ec._DeployOutput_deploymentName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "serviceName":
			out.Values[i] = ec._DeployOutput_serviceName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hostName":
			out.Values[i] = ec._DeployOutput_hostName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._DeployOutput_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "Id":
			out.Values[i] = ec._DeployOutput_Id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "existDeployment":
			out.Values[i] = ec._DeployOutput_existDeployment(ctx, field, obj)
		case "releaseId":
			out.Values[i] = ec._DeployOutput_releaseId(ctx, field, obj)
		case "loadBalanceURL":
			out.Values[i] = ec._DeployOutput_loadBalanceURL(ctx, field, obj)
		case "containerId":
			out.Values[i] = ec._DeployOutput_containerId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentCountByDateImplementors = []string{"DeploymentCountByDate"}

func (ec *executionContext) _DeploymentCountByDate(ctx context.Context, sel ast.SelectionSet, obj *model.DeploymentCountByDate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentCountByDateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentCountByDate")
		case "date":
			out.Values[i] = ec._DeploymentCountByDate_date(ctx, field, obj)
		case "deployed":
			out.Values[i] = ec._DeploymentCountByDate_deployed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deploymentStatusImplementors = []string{"DeploymentStatus"}

func (ec *executionContext) _DeploymentStatus(ctx context.Context, sel ast.SelectionSet, obj *model.DeploymentStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deploymentStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeploymentStatus")
		case "id":
			out.Values[i] = ec._DeploymentStatus_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._DeploymentStatus_status(ctx, field, obj)
		case "description":
			out.Values[i] = ec._DeploymentStatus_description(ctx, field, obj)
		case "inProgress":
			out.Values[i] = ec._DeploymentStatus_inProgress(ctx, field, obj)
		case "successful":
			out.Values[i] = ec._DeploymentStatus_successful(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._DeploymentStatus_createdAt(ctx, field, obj)
		case "allocations":
			out.Values[i] = ec._DeploymentStatus_allocations(ctx, field, obj)
		case "version":
			out.Values[i] = ec._DeploymentStatus_version(ctx, field, obj)
		case "desiredCount":
			out.Values[i] = ec._DeploymentStatus_desiredCount(ctx, field, obj)
		case "placedCount":
			out.Values[i] = ec._DeploymentStatus_placedCount(ctx, field, obj)
		case "healthyCount":
			out.Values[i] = ec._DeploymentStatus_healthyCount(ctx, field, obj)
		case "unhealthyCount":
			out.Values[i] = ec._DeploymentStatus_unhealthyCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dnsRecordsImplementors = []string{"DnsRecords"}

func (ec *executionContext) _DnsRecords(ctx context.Context, sel ast.SelectionSet, obj *model.DNSRecords) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dnsRecordsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DnsRecords")
		case "nodes":
			out.Values[i] = ec._DnsRecords_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var domainImplementors = []string{"Domain"}

func (ec *executionContext) _Domain(ctx context.Context, sel ast.SelectionSet, obj *model.Domain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, domainImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Domain")
		case "id":
			out.Values[i] = ec._Domain_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Domain_name(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Domain_createdAt(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._Domain_organization(ctx, field, obj)
		case "autoRenew":
			out.Values[i] = ec._Domain_autoRenew(ctx, field, obj)
		case "delegatedNameservers":
			out.Values[i] = ec._Domain_delegatedNameservers(ctx, field, obj)
		case "zoneNameservers":
			out.Values[i] = ec._Domain_zoneNameservers(ctx, field, obj)
		case "dnsStatus":
			out.Values[i] = ec._Domain_dnsStatus(ctx, field, obj)
		case "registrationStatus":
			out.Values[i] = ec._Domain_registrationStatus(ctx, field, obj)
		case "expireAt":
			out.Values[i] = ec._Domain_expireAt(ctx, field, obj)
		case "dnsRecords":
			out.Values[i] = ec._Domain_dnsRecords(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var domainMappingImplementors = []string{"DomainMapping"}

func (ec *executionContext) _DomainMapping(ctx context.Context, sel ast.SelectionSet, obj *model.DomainMapping) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, domainMappingImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DomainMapping")
		case "domain_name":
			out.Values[i] = ec._DomainMapping_domain_name(ctx, field, obj)
		case "ip_address":
			out.Values[i] = ec._DomainMapping_ip_address(ctx, field, obj)
		case "kube_config_path":
			out.Values[i] = ec._DomainMapping_kube_config_path(ctx, field, obj)
		case "node_name":
			out.Values[i] = ec._DomainMapping_node_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var domainsImplementors = []string{"Domains"}

func (ec *executionContext) _Domains(ctx context.Context, sel ast.SelectionSet, obj *model.Domains) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, domainsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Domains")
		case "nodes":
			out.Values[i] = ec._Domains_nodes(ctx, field, obj)
		case "edges":
			out.Values[i] = ec._Domains_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var duploDeployOutputImplementors = []string{"DuploDeployOutput"}

func (ec *executionContext) _DuploDeployOutput(ctx context.Context, sel ast.SelectionSet, obj *model.DuploDeployOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, duploDeployOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DuploDeployOutput")
		case "id":
			out.Values[i] = ec._DuploDeployOutput_id(ctx, field, obj)
		case "status":
			out.Values[i] = ec._DuploDeployOutput_status(ctx, field, obj)
		case "UserId":
			out.Values[i] = ec._DuploDeployOutput_UserId(ctx, field, obj)
		case "info":
			out.Values[i] = ec._DuploDeployOutput_info(ctx, field, obj)
		case "progress":
			out.Values[i] = ec._DuploDeployOutput_progress(ctx, field, obj)
		case "pollCount":
			out.Values[i] = ec._DuploDeployOutput_pollCount(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._DuploDeployOutput_createdAt(ctx, field, obj)
		case "UpdatedAt":
			out.Values[i] = ec._DuploDeployOutput_UpdatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var duplologImplementors = []string{"Duplolog"}

func (ec *executionContext) _Duplolog(ctx context.Context, sel ast.SelectionSet, obj *model.Duplolog) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, duplologImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Duplolog")
		case "data":
			out.Values[i] = ec._Duplolog_data(ctx, field, obj)
		case "dockerId":
			out.Values[i] = ec._Duplolog_dockerId(ctx, field, obj)
		case "hostName":
			out.Values[i] = ec._Duplolog_hostName(ctx, field, obj)
		case "stdOut":
			out.Values[i] = ec._Duplolog_stdOut(ctx, field, obj)
		case "stdErr":
			out.Values[i] = ec._Duplolog_stdErr(ctx, field, obj)
		case "tail":
			out.Values[i] = ec._Duplolog_tail(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var edgesImplementors = []string{"Edges"}

func (ec *executionContext) _Edges(ctx context.Context, sel ast.SelectionSet, obj *model.Edges) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, edgesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Edges")
		case "cursor":
			out.Values[i] = ec._Edges_cursor(ctx, field, obj)
		case "node":
			out.Values[i] = ec._Edges_node(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var elbUrlImplementors = []string{"ElbUrl"}

func (ec *executionContext) _ElbUrl(ctx context.Context, sel ast.SelectionSet, obj *model.ElbURL) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, elbUrlImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ElbUrl")
		case "elbUrl":
			out.Values[i] = ec._ElbUrl_elbUrl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fileImplementors = []string{"File"}

func (ec *executionContext) _File(ctx context.Context, sel ast.SelectionSet, obj *model.File) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fileImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("File")
		case "link":
			out.Values[i] = ec._File_link(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getClientSideLogsImplementors = []string{"GetClientSideLogs"}

func (ec *executionContext) _GetClientSideLogs(ctx context.Context, sel ast.SelectionSet, obj *model.GetClientSideLogs) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getClientSideLogsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetClientSideLogs")
		case "id":
			out.Values[i] = ec._GetClientSideLogs_id(ctx, field, obj)
		case "message":
			out.Values[i] = ec._GetClientSideLogs_message(ctx, field, obj)
		case "level":
			out.Values[i] = ec._GetClientSideLogs_level(ctx, field, obj)
		case "timeStamp":
			out.Values[i] = ec._GetClientSideLogs_timeStamp(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._GetClientSideLogs_userId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getSecRegistryImplementors = []string{"GetSecRegistry"}

func (ec *executionContext) _GetSecRegistry(ctx context.Context, sel ast.SelectionSet, obj *model.GetSecRegistry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getSecRegistryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetSecRegistry")
		case "id":
			out.Values[i] = ec._GetSecRegistry_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._GetSecRegistry_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getUserByIdImplementors = []string{"GetUserById"}

func (ec *executionContext) _GetUserById(ctx context.Context, sel ast.SelectionSet, obj *model.GetUserByID) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getUserByIdImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetUserById")
		case "id":
			out.Values[i] = ec._GetUserById_id(ctx, field, obj)
		case "email":
			out.Values[i] = ec._GetUserById_email(ctx, field, obj)
		case "companyName":
			out.Values[i] = ec._GetUserById_companyName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumber":
			out.Values[i] = ec._GetUserById_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":
			out.Values[i] = ec._GetUserById_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "industry":
			out.Values[i] = ec._GetUserById_industry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._GetUserById_firstName(ctx, field, obj)
		case "lastName":
			out.Values[i] = ec._GetUserById_lastName(ctx, field, obj)
		case "ssoType":
			out.Values[i] = ec._GetUserById_ssoType(ctx, field, obj)
		case "freePlan":
			out.Values[i] = ec._GetUserById_freePlan(ctx, field, obj)
		case "profileImageUrl":
			out.Values[i] = ec._GetUserById_profileImageUrl(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._GetUserById_isActive(ctx, field, obj)
		case "isDelete":
			out.Values[i] = ec._GetUserById_isDelete(ctx, field, obj)
		case "companyId":
			out.Values[i] = ec._GetUserById_companyId(ctx, field, obj)
		case "userProfileCreated":
			out.Values[i] = ec._GetUserById_userProfileCreated(ctx, field, obj)
		case "roleId":
			out.Values[i] = ec._GetUserById_roleId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "companylogo":
			out.Values[i] = ec._GetUserById_companylogo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mode":
			out.Values[i] = ec._GetUserById_mode(ctx, field, obj)
		case "slackWebhookURL":
			out.Values[i] = ec._GetUserById_slackWebhookURL(ctx, field, obj)
		case "organization":
			out.Values[i] = ec._GetUserById_organization(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getUserMetricsImplementors = []string{"GetUserMetrics"}

func (ec *executionContext) _GetUserMetrics(ctx context.Context, sel ast.SelectionSet, obj *model.GetUserMetrics) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getUserMetricsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetUserMetrics")
		case "resolverIp":
			out.Values[i] = ec._GetUserMetrics_resolverIp(ctx, field, obj)
		case "timeStamp":
			out.Values[i] = ec._GetUserMetrics_timeStamp(ctx, field, obj)
		case "queryType":
			out.Values[i] = ec._GetUserMetrics_queryType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getUserPATImplementors = []string{"GetUserPAT"}

func (ec *executionContext) _GetUserPAT(ctx context.Context, sel ast.SelectionSet, obj *model.GetUserPat) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getUserPATImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetUserPAT")
		case "id":
			out.Values[i] = ec._GetUserPAT_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._GetUserPAT_type(ctx, field, obj)
		case "patToken":
			out.Values[i] = ec._GetUserPAT_patToken(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._GetUserPAT_userId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._GetUserPAT_createdAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._GetUserPAT_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getUserSecretImplementors = []string{"GetUserSecret"}

func (ec *executionContext) _GetUserSecret(ctx context.Context, sel ast.SelectionSet, obj *model.GetUserSecret) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getUserSecretImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GetUserSecret")
		case "id":
			out.Values[i] = ec._GetUserSecret_id(ctx, field, obj)
		case "organizationId":
			out.Values[i] = ec._GetUserSecret_organizationId(ctx, field, obj)
		case "name":
			out.Values[i] = ec._GetUserSecret_name(ctx, field, obj)
		case "registryType":
			out.Values[i] = ec._GetUserSecret_registryType(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._GetUserSecret_userName(ctx, field, obj)
		case "passWord":
			out.Values[i] = ec._GetUserSecret_passWord(ctx, field, obj)
		case "Url":
			out.Values[i] = ec._GetUserSecret_Url(ctx, field, obj)
		case "keyFileContent":
			out.Values[i] = ec._GetUserSecret_keyFileContent(ctx, field, obj)
		case "registryName":
			out.Values[i] = ec._GetUserSecret_registryName(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._GetUserSecret_isActive(ctx, field, obj)
		case "secretType":
			out.Values[i] = ec._GetUserSecret_secretType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hTTPHeaderImplementors = []string{"HTTPHeader"}

func (ec *executionContext) _HTTPHeader(ctx context.Context, sel ast.SelectionSet, obj *model.HTTPHeader) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hTTPHeaderImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HTTPHeader")
		case "name":
			out.Values[i] = ec._HTTPHeader_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._HTTPHeader_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hostDetailsImplementors = []string{"HostDetails"}

func (ec *executionContext) _HostDetails(ctx context.Context, sel ast.SelectionSet, obj *model.HostDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hostDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HostDetails")
		case "id":
			out.Values[i] = ec._HostDetails_id(ctx, field, obj)
		case "orgId":
			out.Values[i] = ec._HostDetails_orgId(ctx, field, obj)
		case "type":
			out.Values[i] = ec._HostDetails_type(ctx, field, obj)
		case "serviceAccountURL":
			out.Values[i] = ec._HostDetails_serviceAccountURL(ctx, field, obj)
		case "status":
			out.Values[i] = ec._HostDetails_status(ctx, field, obj)
		case "zone":
			out.Values[i] = ec._HostDetails_zone(ctx, field, obj)
		case "instanceName":
			out.Values[i] = ec._HostDetails_instanceName(ctx, field, obj)
		case "instanceId":
			out.Values[i] = ec._HostDetails_instanceId(ctx, field, obj)
		case "accessKey":
			out.Values[i] = ec._HostDetails_accessKey(ctx, field, obj)
		case "secretKey":
			out.Values[i] = ec._HostDetails_secretKey(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._HostDetails_createdBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._HostDetails_createdAt(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._HostDetails_isActive(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var hostPayloadImplementors = []string{"HostPayload"}

func (ec *executionContext) _HostPayload(ctx context.Context, sel ast.SelectionSet, obj *model.HostPayload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, hostPayloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("HostPayload")
		case "id":
			out.Values[i] = ec._HostPayload_id(ctx, field, obj)
		case "orgId":
			out.Values[i] = ec._HostPayload_orgId(ctx, field, obj)
		case "orgName":
			out.Values[i] = ec._HostPayload_orgName(ctx, field, obj)
		case "type":
			out.Values[i] = ec._HostPayload_type(ctx, field, obj)
		case "serviceAccountURL":
			out.Values[i] = ec._HostPayload_serviceAccountURL(ctx, field, obj)
		case "status":
			out.Values[i] = ec._HostPayload_status(ctx, field, obj)
		case "zone":
			out.Values[i] = ec._HostPayload_zone(ctx, field, obj)
		case "instanceName":
			out.Values[i] = ec._HostPayload_instanceName(ctx, field, obj)
		case "instanceId":
			out.Values[i] = ec._HostPayload_instanceId(ctx, field, obj)
		case "accessKey":
			out.Values[i] = ec._HostPayload_accessKey(ctx, field, obj)
		case "secretKey":
			out.Values[i] = ec._HostPayload_secretKey(ctx, field, obj)
		case "subscriptionId":
			out.Values[i] = ec._HostPayload_subscriptionId(ctx, field, obj)
		case "resourceGroupName":
			out.Values[i] = ec._HostPayload_resourceGroupName(ctx, field, obj)
		case "clientId":
			out.Values[i] = ec._HostPayload_clientId(ctx, field, obj)
		case "clientSecret":
			out.Values[i] = ec._HostPayload_clientSecret(ctx, field, obj)
		case "tenantId":
			out.Values[i] = ec._HostPayload_tenantId(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._HostPayload_createdBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._HostPayload_createdAt(ctx, field, obj)
		case "InstanceActivity":
			out.Values[i] = ec._HostPayload_InstanceActivity(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iPAddressImplementors = []string{"IPAddress"}

func (ec *executionContext) _IPAddress(ctx context.Context, sel ast.SelectionSet, obj *model.IPAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iPAddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IPAddress")
		case "id":
			out.Values[i] = ec._IPAddress_id(ctx, field, obj)
		case "address":
			out.Values[i] = ec._IPAddress_address(ctx, field, obj)
		case "type":
			out.Values[i] = ec._IPAddress_type(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._IPAddress_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var iPAddressesImplementors = []string{"IPAddresses"}

func (ec *executionContext) _IPAddresses(ctx context.Context, sel ast.SelectionSet, obj *model.IPAddresses) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, iPAddressesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("IPAddresses")
		case "nodes":
			out.Values[i] = ec._IPAddresses_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var inviteUserOutputMessageImplementors = []string{"InviteUserOutputMessage"}

func (ec *executionContext) _InviteUserOutputMessage(ctx context.Context, sel ast.SelectionSet, obj *model.InviteUserOutputMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, inviteUserOutputMessageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("InviteUserOutputMessage")
		case "message":
			out.Values[i] = ec._InviteUserOutputMessage_message(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._InviteUserOutputMessage_userId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issueImplementors = []string{"Issue"}

func (ec *executionContext) _Issue(ctx context.Context, sel ast.SelectionSet, obj *model.Issue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issue")
		case "expireAt":
			out.Values[i] = ec._Issue_expireAt(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Issue_type(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var issuedImplementors = []string{"Issued"}

func (ec *executionContext) _Issued(ctx context.Context, sel ast.SelectionSet, obj *model.Issued) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, issuedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Issued")
		case "nodes":
			out.Values[i] = ec._Issued_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkImplementors = []string{"Link"}

func (ec *executionContext) _Link(ctx context.Context, sel ast.SelectionSet, obj *model.Link) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Link")
		case "id":
			out.Values[i] = ec._Link_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Link_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "address":
			out.Values[i] = ec._Link_address(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "user":
			out.Values[i] = ec._Link_user(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var logEntryImplementors = []string{"LogEntry"}

func (ec *executionContext) _LogEntry(ctx context.Context, sel ast.SelectionSet, obj *model.LogEntry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, logEntryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LogEntry")
		case "timestamp":
			out.Values[i] = ec._LogEntry_timestamp(ctx, field, obj)
		case "message":
			out.Values[i] = ec._LogEntry_message(ctx, field, obj)
		case "level":
			out.Values[i] = ec._LogEntry_level(ctx, field, obj)
		case "instance":
			out.Values[i] = ec._LogEntry_instance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._LogEntry_region(ctx, field, obj)
		case "meta":
			out.Values[i] = ec._LogEntry_meta(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var membersImplementors = []string{"Members"}

func (ec *executionContext) _Members(ctx context.Context, sel ast.SelectionSet, obj *model.Members) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, membersImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Members")
		case "edges":
			out.Values[i] = ec._Members_edges(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var metaImplementors = []string{"Meta"}

func (ec *executionContext) _Meta(ctx context.Context, sel ast.SelectionSet, obj *model.Meta) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Meta")
		case "instance":
			out.Values[i] = ec._Meta_instance(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Meta_region(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var multipleRegionResponseImplementors = []string{"MultipleRegionResponse"}

func (ec *executionContext) _MultipleRegionResponse(ctx context.Context, sel ast.SelectionSet, obj *model.MultipleRegionResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, multipleRegionResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MultipleRegionResponse")
		case "region":
			out.Values[i] = ec._MultipleRegionResponse_region(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._MultipleRegionResponse_isDefault(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createApp":
			out.Values[i] = ec._Mutation_createApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteApp":
			out.Values[i] = ec._Mutation_deleteApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "moveApp":
			out.Values[i] = ec._Mutation_moveApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pauseApp":
			out.Values[i] = ec._Mutation_pauseApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resumeApp":
			out.Values[i] = ec._Mutation_resumeApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restartApp":
			out.Values[i] = ec._Mutation_restartApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "configureRegions":
			out.Values[i] = ec._Mutation_configureRegions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateApp":
			out.Values[i] = ec._Mutation_updateApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateImage":
			out.Values[i] = ec._Mutation_updateImage(ctx, field)
		case "editApp":
			out.Values[i] = ec._Mutation_editApp(ctx, field)
		case "updateConfigApps":
			out.Values[i] = ec._Mutation_updateConfigApps(ctx, field)
		case "appTemplate":
			out.Values[i] = ec._Mutation_appTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateAppTemplate":
			out.Values[i] = ec._Mutation_updateAppTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteAppTemplate":
			out.Values[i] = ec._Mutation_deleteAppTemplate(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "checkGithubRepoPrivateOrPublic":
			out.Values[i] = ec._Mutation_checkGithubRepoPrivateOrPublic(ctx, field)
		case "createNifeTomlFile":
			out.Values[i] = ec._Mutation_createNifeTomlFile(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "login":
			out.Values[i] = ec._Mutation_login(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createBusinessUnit":
			out.Values[i] = ec._Mutation_createBusinessUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateBusinessUnit":
			out.Values[i] = ec._Mutation_updateBusinessUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteBusinessUnit":
			out.Values[i] = ec._Mutation_deleteBusinessUnit(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addRegionUsingKubeConfig":
			out.Values[i] = ec._Mutation_addRegionUsingKubeConfig(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteKubeConfigRegion":
			out.Values[i] = ec._Mutation_deleteKubeConfigRegion(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deployImage":
			out.Values[i] = ec._Mutation_deployImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "optimizeImage":
			out.Values[i] = ec._Mutation_optimizeImage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deployK8S":
			out.Values[i] = ec._Mutation_deployK8S(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startBuild":
			out.Values[i] = ec._Mutation_startBuild(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "S3Deployment":
			out.Values[i] = ec._Mutation_S3Deployment(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeFiles":
			out.Values[i] = ec._Mutation_removeFiles(ctx, field)
		case "deleteS3Deployment":
			out.Values[i] = ec._Mutation_deleteS3Deployment(ctx, field)
		case "clientSideLog":
			out.Values[i] = ec._Mutation_clientSideLog(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDuploApp":
			out.Values[i] = ec._Mutation_deleteDuploApp(ctx, field)
		case "singleUpload":
			out.Values[i] = ec._Mutation_singleUpload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addDataDogBYOC":
			out.Values[i] = ec._Mutation_addDataDogBYOC(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDataDogByoc":
			out.Values[i] = ec._Mutation_updateDataDogByoc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteDataDogByoc":
			out.Values[i] = ec._Mutation_deleteDataDogByoc(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "migrateOrganization":
			out.Values[i] = ec._Mutation_migrateOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrganization":
			out.Values[i] = ec._Mutation_createOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createSubOrganization":
			out.Values[i] = ec._Mutation_createSubOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrganization":
			out.Values[i] = ec._Mutation_deleteOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteSubOrganization":
			out.Values[i] = ec._Mutation_deleteSubOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createOrganizationSecret":
			out.Values[i] = ec._Mutation_createOrganizationSecret(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganizationSecret":
			out.Values[i] = ec._Mutation_updateOrganizationSecret(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteOrganizationSecret":
			out.Values[i] = ec._Mutation_deleteOrganizationSecret(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRegistryIdToApp":
			out.Values[i] = ec._Mutation_updateRegistryIdToApp(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateOrganization":
			out.Values[i] = ec._Mutation_updateOrganization(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createNamespaceInCluster":
			out.Values[i] = ec._Mutation_createNamespaceInCluster(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addUserAddedregionsToOrganizatiom":
			out.Values[i] = ec._Mutation_addUserAddedregionsToOrganizatiom(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreatePaymentIntent":
			out.Values[i] = ec._Mutation_CreatePaymentIntent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateAttachPaymentMethod":
			out.Values[i] = ec._Mutation_CreateAttachPaymentMethod(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "CreateStripeSubscription":
			out.Values[i] = ec._Mutation_CreateStripeSubscription(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateDefaultRegion":
			out.Values[i] = ec._Mutation_updateDefaultRegion(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newRegionRequest":
			out.Values[i] = ec._Mutation_newRegionRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "newRegionsRequest":
			out.Values[i] = ec._Mutation_newRegionsRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutipleRegion":
			out.Values[i] = ec._Mutation_mutipleRegion(ctx, field)
		case "deleteRequestedRegion":
			out.Values[i] = ec._Mutation_deleteRequestedRegion(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateRole":
			out.Values[i] = ec._Mutation_updateRole(ctx, field)
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
		case "changePassword":
			out.Values[i] = ec._Mutation_changePassword(ctx, field)
		case "ActiveUser":
			out.Values[i] = ec._Mutation_ActiveUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inviteUser":
			out.Values[i] = ec._Mutation_inviteUser(ctx, field)
		case "addInviteUserRole":
			out.Values[i] = ec._Mutation_addInviteUserRole(ctx, field)
		case "removeUserOrg":
			out.Values[i] = ec._Mutation_removeUserOrg(ctx, field)
		case "userProfileUpdated":
			out.Values[i] = ec._Mutation_userProfileUpdated(ctx, field)
		case "addUserToOrg":
			out.Values[i] = ec._Mutation_addUserToOrg(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uploadCompanyLogo":
			out.Values[i] = ec._Mutation_uploadCompanyLogo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeInviteuser":
			out.Values[i] = ec._Mutation_removeInviteuser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "notificationInfo":
			out.Values[i] = ec._Mutation_notificationInfo(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userRequestingByoh":
			out.Values[i] = ec._Mutation_userRequestingByoh(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "requestingPicoNets":
			out.Values[i] = ec._Mutation_requestingPicoNets(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "setUserTokenExpireTime":
			out.Values[i] = ec._Mutation_setUserTokenExpireTime(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUserwebhookURLSlack":
			out.Values[i] = ec._Mutation_updateUserwebhookURLSlack(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addPAT":
			out.Values[i] = ec._Mutation_addPAT(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePAT":
			out.Values[i] = ec._Mutation_updatePAT(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deletePAT":
			out.Values[i] = ec._Mutation_deletePAT(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "NodeAction":
			out.Values[i] = ec._Mutation_NodeAction(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createHost":
			out.Values[i] = ec._Mutation_createHost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteHost":
			out.Values[i] = ec._Mutation_deleteHost(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "NodeActionAWS":
			out.Values[i] = ec._Mutation_NodeActionAWS(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "NodeActionAzure":
			out.Values[i] = ec._Mutation_NodeActionAzure(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createDuploVolume":
			out.Values[i] = ec._Mutation_createDuploVolume(ctx, field)
		case "updateVolume":
			out.Values[i] = ec._Mutation_updateVolume(ctx, field)
		case "createWorkloadManagement":
			out.Values[i] = ec._Mutation_createWorkloadManagement(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteWorkloadManagement":
			out.Values[i] = ec._Mutation_deleteWorkloadManagement(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "addWorkloadRegions":
			out.Values[i] = ec._Mutation_addWorkloadRegions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "removeWorkloadRegions":
			out.Values[i] = ec._Mutation_removeWorkloadRegions(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var newAppImplementors = []string{"NewApp"}

func (ec *executionContext) _NewApp(ctx context.Context, sel ast.SelectionSet, obj *model.NewApp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, newAppImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NewApp")
		case "app":
			out.Values[i] = ec._NewApp_app(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nodesImplementors = []string{"Nodes"}

func (ec *executionContext) _Nodes(ctx context.Context, sel ast.SelectionSet, obj *model.Nodes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nodesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Nodes")
		case "nodes":
			out.Values[i] = ec._Nodes_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var optimizeImageImplementors = []string{"OptimizeImage"}

func (ec *executionContext) _OptimizeImage(ctx context.Context, sel ast.SelectionSet, obj *model.OptimizeImage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, optimizeImageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OptimizeImage")
		case "status":
			out.Values[i] = ec._OptimizeImage_status(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var orgCountDetailsImplementors = []string{"OrgCountDetails"}

func (ec *executionContext) _OrgCountDetails(ctx context.Context, sel ast.SelectionSet, obj *model.OrgCountDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, orgCountDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrgCountDetails")
		case "totalOrgCount":
			out.Values[i] = ec._OrgCountDetails_totalOrgCount(ctx, field, obj)
		case "orgByAppCount":
			out.Values[i] = ec._OrgCountDetails_orgByAppCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationImplementors = []string{"Organization"}

func (ec *executionContext) _Organization(ctx context.Context, sel ast.SelectionSet, obj *model.Organization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organization")
		case "id":
			out.Values[i] = ec._Organization_id(ctx, field, obj)
		case "parentId":
			out.Values[i] = ec._Organization_parentId(ctx, field, obj)
		case "parentOrgName":
			out.Values[i] = ec._Organization_parentOrgName(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Organization_name(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._Organization_slug(ctx, field, obj)
		case "type":
			out.Values[i] = ec._Organization_type(ctx, field, obj)
		case "domains":
			out.Values[i] = ec._Organization_domains(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Organization_region(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._Organization_isActive(ctx, field, obj)
		case "subOrg":
			out.Values[i] = ec._Organization_subOrg(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationDetailsImplementors = []string{"OrganizationDetails"}

func (ec *executionContext) _OrganizationDetails(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationDetails")
		case "id":
			out.Values[i] = ec._OrganizationDetails_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._OrganizationDetails_name(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._OrganizationDetails_slug(ctx, field, obj)
		case "type":
			out.Values[i] = ec._OrganizationDetails_type(ctx, field, obj)
		case "apps":
			out.Values[i] = ec._OrganizationDetails_apps(ctx, field, obj)
		case "viewerRole":
			out.Values[i] = ec._OrganizationDetails_viewerRole(ctx, field, obj)
		case "members":
			out.Values[i] = ec._OrganizationDetails_members(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationMembershipEdgeImplementors = []string{"OrganizationMembershipEdge"}

func (ec *executionContext) _OrganizationMembershipEdge(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationMembershipEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationMembershipEdgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationMembershipEdge")
		case "id":
			out.Values[i] = ec._OrganizationMembershipEdge_id(ctx, field, obj)
		case "role":
			out.Values[i] = ec._OrganizationMembershipEdge_role(ctx, field, obj)
		case "joinedAt":
			out.Values[i] = ec._OrganizationMembershipEdge_joinedAt(ctx, field, obj)
		case "node":
			out.Values[i] = ec._OrganizationMembershipEdge_node(ctx, field, obj)
		case "cursor":
			out.Values[i] = ec._OrganizationMembershipEdge_cursor(ctx, field, obj)
		case "roleId":
			out.Values[i] = ec._OrganizationMembershipEdge_roleId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationRegionTableImplementors = []string{"OrganizationRegionTable"}

func (ec *executionContext) _OrganizationRegionTable(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationRegionTable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationRegionTableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationRegionTable")
		case "id":
			out.Values[i] = ec._OrganizationRegionTable_id(ctx, field, obj)
		case "organizationId":
			out.Values[i] = ec._OrganizationRegionTable_organizationId(ctx, field, obj)
		case "region_code":
			out.Values[i] = ec._OrganizationRegionTable_region_code(ctx, field, obj)
		case "is_default":
			out.Values[i] = ec._OrganizationRegionTable_is_default(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationRegistryTypeImplementors = []string{"OrganizationRegistryType"}

func (ec *executionContext) _OrganizationRegistryType(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationRegistryType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationRegistryTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationRegistryType")
		case "id":
			out.Values[i] = ec._OrganizationRegistryType_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._OrganizationRegistryType_name(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._OrganizationRegistryType_slug(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._OrganizationRegistryType_isActive(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationsImplementors = []string{"Organizations"}

func (ec *executionContext) _Organizations(ctx context.Context, sel ast.SelectionSet, obj *model.Organizations) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Organizations")
		case "nodes":
			out.Values[i] = ec._Organizations_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var organizationsandBusinessUnitImplementors = []string{"OrganizationsandBusinessUnit"}

func (ec *executionContext) _OrganizationsandBusinessUnit(ctx context.Context, sel ast.SelectionSet, obj *model.OrganizationsandBusinessUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, organizationsandBusinessUnitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OrganizationsandBusinessUnit")
		case "nodes":
			out.Values[i] = ec._OrganizationsandBusinessUnit_nodes(ctx, field, obj)
		case "businessUnit":
			out.Values[i] = ec._OrganizationsandBusinessUnit_businessUnit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var outputMessageImplementors = []string{"OutputMessage"}

func (ec *executionContext) _OutputMessage(ctx context.Context, sel ast.SelectionSet, obj *model.OutputMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, outputMessageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OutputMessage")
		case "message":
			out.Values[i] = ec._OutputMessage_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var passwordImplementors = []string{"Password"}

func (ec *executionContext) _Password(ctx context.Context, sel ast.SelectionSet, obj *model.Password) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, passwordImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Password")
		case "message":
			out.Values[i] = ec._Password_message(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Password_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var paymentImplementors = []string{"Payment"}

func (ec *executionContext) _Payment(ctx context.Context, sel ast.SelectionSet, obj *model.Payment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, paymentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payment")
		case "id":
			out.Values[i] = ec._Payment_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "amount":
			out.Values[i] = ec._Payment_amount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "currency":
			out.Values[i] = ec._Payment_currency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "clientSecretId":
			out.Values[i] = ec._Payment_clientSecretId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var permissionImplementors = []string{"Permission"}

func (ec *executionContext) _Permission(ctx context.Context, sel ast.SelectionSet, obj *model.Permission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, permissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Permission")
		case "id":
			out.Values[i] = ec._Permission_id(ctx, field, obj)
		case "module":
			out.Values[i] = ec._Permission_module(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Permission_title(ctx, field, obj)
		case "create":
			out.Values[i] = ec._Permission_create(ctx, field, obj)
		case "view":
			out.Values[i] = ec._Permission_view(ctx, field, obj)
		case "delete":
			out.Values[i] = ec._Permission_delete(ctx, field, obj)
		case "update":
			out.Values[i] = ec._Permission_update(ctx, field, obj)
		case "is_active":
			out.Values[i] = ec._Permission_is_active(ctx, field, obj)
		case "created_at":
			out.Values[i] = ec._Permission_created_at(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var platFormOutputImplementors = []string{"PlatFormOutput"}

func (ec *executionContext) _PlatFormOutput(ctx context.Context, sel ast.SelectionSet, obj *model.PlatFormOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, platFormOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PlatFormOutput")
		case "code":
			out.Values[i] = ec._PlatFormOutput_code(ctx, field, obj)
		case "name":
			out.Values[i] = ec._PlatFormOutput_name(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._PlatFormOutput_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._PlatFormOutput_longitude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var portHandlerImplementors = []string{"PortHandler"}

func (ec *executionContext) _PortHandler(ctx context.Context, sel ast.SelectionSet, obj *model.PortHandler) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, portHandlerImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PortHandler")
		case "port":
			out.Values[i] = ec._PortHandler_port(ctx, field, obj)
		case "handlers":
			out.Values[i] = ec._PortHandler_handlers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var priceListImplementors = []string{"PriceList"}

func (ec *executionContext) _PriceList(ctx context.Context, sel ast.SelectionSet, obj *model.PriceList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, priceListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PriceList")
		case "productid":
			out.Values[i] = ec._PriceList_productid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priceid":
			out.Values[i] = ec._PriceList_priceid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nickname":
			out.Values[i] = ec._PriceList_nickname(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._PriceList_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unitamount":
			out.Values[i] = ec._PriceList_unitamount(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "app":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_app(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "apps":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_apps(ctx, field)
				return res
			})
		case "appsSubOrg":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appsSubOrg(ctx, field)
				return res
			})
		case "appsBusinessUnit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appsBusinessUnit(ctx, field)
				return res
			})
		case "appsWorkload":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appsWorkload(ctx, field)
				return res
			})
		case "appsWorkloadIdOrUserRole":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appsWorkloadIdOrUserRole(ctx, field)
				return res
			})
		case "appcompact":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appcompact(ctx, field)
				return res
			})
		case "getAppRegion":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAppRegion(ctx, field)
				return res
			})
		case "getAvailabilityCluster":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAvailabilityCluster(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getRegionStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRegionStatus(ctx, field)
				return res
			})
		case "platform":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_platform(ctx, field)
				return res
			})
		case "appStatusList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appStatusList(ctx, field)
				return res
			})
		case "appQuotaExist":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_appQuotaExist(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "checkAppById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_checkAppById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetAppByAppId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAppByAppId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "AppsCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_AppsCount(ctx, field)
				return res
			})
		case "GetAppTemplates":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAppTemplates(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetAppsAndOrgsCountDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAppsAndOrgsCountDetails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetAppsAndOrgsandSubOrgCountDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAppsAndOrgsandSubOrgCountDetails(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "businessUnitList":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_businessUnitList(ctx, field)
				return res
			})
		case "getBusinessUnitById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessUnitById(ctx, field)
				return res
			})
		case "getBusinessUnitByOrgId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessUnitByOrgId(ctx, field)
				return res
			})
		case "getBusinessUnit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getBusinessUnit(ctx, field)
				return res
			})
		case "getClusterDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClusterDetails(ctx, field)
				return res
			})
		case "getClusterDetailsByOrgId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClusterDetailsByOrgId(ctx, field)
				return res
			})
		case "getClusterDetailsByOrgIdMultipleReg":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getClusterDetailsByOrgIdMultipleReg(ctx, field)
				return res
			})
		case "getUserAddedRegions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserAddedRegions(ctx, field)
				return res
			})
		case "getCloudRegions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getCloudRegions(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "GetAvailableBuiltIn":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetAvailableBuiltIn(ctx, field)
				return res
			})
		case "getElbUrl":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getElbUrl(ctx, field)
				return res
			})
		case "getAllS3deployments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllS3deployments(ctx, field)
				return res
			})
		case "getS3deployments":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getS3deployments(ctx, field)
				return res
			})
		case "getQueryLog":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getQueryLog(ctx, field)
				return res
			})
		case "getDuploStatus":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDuploStatus(ctx, field)
				return res
			})
		case "getclusterLog":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getclusterLog(ctx, field)
				return res
			})
		case "userMetrics":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userMetrics(ctx, field)
				return res
			})
		case "getDataDogByUserId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getDataDogByUserId(ctx, field)
				return res
			})
		case "organizations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getAllParentOrganizations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAllParentOrganizations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationsandBusinessUnit":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationsandBusinessUnit(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "subOrganizations":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subOrganizations(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "subOrganizationsByParentId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_subOrganizationsByParentId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getParentIdBySubOrganization":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getParentIdBySubOrganization(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organization":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organization(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getOrganizationByOrgId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getOrganizationByOrgId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "organizationRegistryType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_organizationRegistryType(ctx, field)
				return res
			})
		case "getSecret":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSecret(ctx, field)
				return res
			})
		case "getRegistryByUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRegistryByUser(ctx, field)
				return res
			})
		case "getAppByRegionCount":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getAppByRegionCount(ctx, field)
				return res
			})
		case "getSecretByRegistryId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getSecretByRegistryId(ctx, field)
				return res
			})
		case "getpricelist":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getpricelist(ctx, field)
				return res
			})
		case "getRequestedRegions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getRequestedRegions(ctx, field)
				return res
			})
		case "getUserPermissions":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserPermissions(ctx, field)
				return res
			})
		case "getUserPermissionsByPlan":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserPermissionsByPlan(ctx, field)
				return res
			})
		case "getUserById":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserById(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "currentUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_currentUser(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getUserByAdmin":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserByAdmin(ctx, field)
				return res
			})
		case "getUserByAdminAndOrganization":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserByAdminAndOrganization(ctx, field)
				return res
			})
		case "userActivities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userActivities(ctx, field)
				return res
			})
		case "userActivitiesByDate":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userActivitiesByDate(ctx, field)
				return res
			})
		case "GetInviteUserCountByAdminUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_GetInviteUserCountByAdminUser(ctx, field)
				return res
			})
		case "userDeploymentCountDetails":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_userDeploymentCountDetails(ctx, field)
				return res
			})
		case "getUserByOrganizationId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserByOrganizationId(ctx, field)
				return res
			})
		case "getUserPAT":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getUserPAT(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getHost":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHost(ctx, field)
				return res
			})
		case "getHostByName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getHostByName(ctx, field)
				return res
			})
		case "getVolumeType":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVolumeType(ctx, field)
				return res
			})
		case "getVolumeByAppId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getVolumeByAppId(ctx, field)
				return res
			})
		case "getWorkloadMangementByUser":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkloadMangementByUser(ctx, field)
				return res
			})
		case "getWorkloadMangementByorgnizationId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkloadMangementByorgnizationId(ctx, field)
				return res
			})
		case "getWorkloadMangementByWlId":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkloadMangementByWlId(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getWorkloadMangementByWlName":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkloadMangementByWlName(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getWorkloadRegion":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getWorkloadRegion(ctx, field)
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryLogOutputImplementors = []string{"QueryLogOutput"}

func (ec *executionContext) _QueryLogOutput(ctx context.Context, sel ast.SelectionSet, obj *model.QueryLogOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryLogOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("QueryLogOutput")
		case "id":
			out.Values[i] = ec._QueryLogOutput_id(ctx, field, obj)
		case "message":
			out.Values[i] = ec._QueryLogOutput_message(ctx, field, obj)
		case "queryName":
			out.Values[i] = ec._QueryLogOutput_queryName(ctx, field, obj)
		case "resolverIp":
			out.Values[i] = ec._QueryLogOutput_resolverIp(ctx, field, obj)
		case "timeStamp":
			out.Values[i] = ec._QueryLogOutput_timeStamp(ctx, field, obj)
		case "responseCode":
			out.Values[i] = ec._QueryLogOutput_responseCode(ctx, field, obj)
		case "lastSyncTime":
			out.Values[i] = ec._QueryLogOutput_lastSyncTime(ctx, field, obj)
		case "times":
			out.Values[i] = ec._QueryLogOutput_times(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var reDeploymentCountByDateImplementors = []string{"ReDeploymentCountByDate"}

func (ec *executionContext) _ReDeploymentCountByDate(ctx context.Context, sel ast.SelectionSet, obj *model.ReDeploymentCountByDate) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, reDeploymentCountByDateImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ReDeploymentCountByDate")
		case "date":
			out.Values[i] = ec._ReDeploymentCountByDate_date(ctx, field, obj)
		case "reDeployed":
			out.Values[i] = ec._ReDeploymentCountByDate_reDeployed(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionImplementors = []string{"Region"}

func (ec *executionContext) _Region(ctx context.Context, sel ast.SelectionSet, obj *model.Region) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Region")
		case "code":
			out.Values[i] = ec._Region_code(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Region_name(ctx, field, obj)
		case "latitude":
			out.Values[i] = ec._Region_latitude(ctx, field, obj)
		case "longitude":
			out.Values[i] = ec._Region_longitude(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionDetailsImplementors = []string{"RegionDetails"}

func (ec *executionContext) _RegionDetails(ctx context.Context, sel ast.SelectionSet, obj *model.RegionDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionDetails")
		case "regCode":
			out.Values[i] = ec._RegionDetails_regCode(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._RegionDetails_isDefault(ctx, field, obj)
		case "regionName":
			out.Values[i] = ec._RegionDetails_regionName(ctx, field, obj)
		case "clusterType":
			out.Values[i] = ec._RegionDetails_clusterType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionStatusImplementors = []string{"RegionStatus"}

func (ec *executionContext) _RegionStatus(ctx context.Context, sel ast.SelectionSet, obj *model.RegionStatus) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionStatusImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionStatus")
		case "id":
			out.Values[i] = ec._RegionStatus_id(ctx, field, obj)
		case "regionCode":
			out.Values[i] = ec._RegionStatus_regionCode(ctx, field, obj)
		case "status":
			out.Values[i] = ec._RegionStatus_status(ctx, field, obj)
		case "deploymentId":
			out.Values[i] = ec._RegionStatus_deploymentId(ctx, field, obj)
		case "port":
			out.Values[i] = ec._RegionStatus_port(ctx, field, obj)
		case "appUrl":
			out.Values[i] = ec._RegionStatus_appUrl(ctx, field, obj)
		case "releaseId":
			out.Values[i] = ec._RegionStatus_releaseId(ctx, field, obj)
		case "elbRecordName":
			out.Values[i] = ec._RegionStatus_elbRecordName(ctx, field, obj)
		case "elbRecordId":
			out.Values[i] = ec._RegionStatus_elbRecordId(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionStatusNodesImplementors = []string{"RegionStatusNodes"}

func (ec *executionContext) _RegionStatusNodes(ctx context.Context, sel ast.SelectionSet, obj *model.RegionStatusNodes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionStatusNodesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RegionStatusNodes")
		case "nodes":
			out.Values[i] = ec._RegionStatusNodes_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionsImplementors = []string{"Regions"}

func (ec *executionContext) _Regions(ctx context.Context, sel ast.SelectionSet, obj *model.Regions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Regions")
		case "regions":
			out.Values[i] = ec._Regions_regions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var registryImplementors = []string{"Registry"}

func (ec *executionContext) _Registry(ctx context.Context, sel ast.SelectionSet, obj *model.Registry) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, registryImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Registry")
		case "server":
			out.Values[i] = ec._Registry_server(ctx, field, obj)
		case "username":
			out.Values[i] = ec._Registry_username(ctx, field, obj)
		case "password":
			out.Values[i] = ec._Registry_password(ctx, field, obj)
		case "email":
			out.Values[i] = ec._Registry_email(ctx, field, obj)
		case "secret_name":
			out.Values[i] = ec._Registry_secret_name(ctx, field, obj)
		case "repo_type":
			out.Values[i] = ec._Registry_repo_type(ctx, field, obj)
		case "organization_id":
			out.Values[i] = ec._Registry_organization_id(ctx, field, obj)
		case "isDefault":
			out.Values[i] = ec._Registry_isDefault(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releaseImplementors = []string{"Release"}

func (ec *executionContext) _Release(ctx context.Context, sel ast.SelectionSet, obj *model.Release) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releaseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Release")
		case "id":
			out.Values[i] = ec._Release_id(ctx, field, obj)
		case "version":
			out.Values[i] = ec._Release_version(ctx, field, obj)
		case "stable":
			out.Values[i] = ec._Release_stable(ctx, field, obj)
		case "inProgress":
			out.Values[i] = ec._Release_inProgress(ctx, field, obj)
		case "reason":
			out.Values[i] = ec._Release_reason(ctx, field, obj)
		case "description":
			out.Values[i] = ec._Release_description(ctx, field, obj)
		case "image":
			out.Values[i] = ec._Release_image(ctx, field, obj)
		case "status":
			out.Values[i] = ec._Release_status(ctx, field, obj)
		case "port":
			out.Values[i] = ec._Release_port(ctx, field, obj)
		case "deploymentStrategy":
			out.Values[i] = ec._Release_deploymentStrategy(ctx, field, obj)
		case "deployment":
			out.Values[i] = ec._Release_deployment(ctx, field, obj)
		case "user":
			out.Values[i] = ec._Release_user(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Release_createdAt(ctx, field, obj)
		case "archiveUrl":
			out.Values[i] = ec._Release_archiveUrl(ctx, field, obj)
		case "builderType":
			out.Values[i] = ec._Release_builderType(ctx, field, obj)
		case "routingPolicy":
			out.Values[i] = ec._Release_routingPolicy(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var releasesImplementors = []string{"Releases"}

func (ec *executionContext) _Releases(ctx context.Context, sel ast.SelectionSet, obj *model.Releases) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, releasesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Releases")
		case "nodes":
			out.Values[i] = ec._Releases_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestedRegionsImplementors = []string{"RequestedRegions"}

func (ec *executionContext) _RequestedRegions(ctx context.Context, sel ast.SelectionSet, obj *model.RequestedRegions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestedRegionsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestedRegions")
		case "id":
			out.Values[i] = ec._RequestedRegions_id(ctx, field, obj)
		case "userName":
			out.Values[i] = ec._RequestedRegions_userName(ctx, field, obj)
		case "status":
			out.Values[i] = ec._RequestedRegions_status(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._RequestedRegions_createdBy(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._RequestedRegions_createdAt(ctx, field, obj)
		case "requestedRegion":
			out.Values[i] = ec._RequestedRegions_requestedRegion(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requestedRegionsResponseImplementors = []string{"RequestedRegionsResponse"}

func (ec *executionContext) _RequestedRegionsResponse(ctx context.Context, sel ast.SelectionSet, obj *model.RequestedRegionsResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requestedRegionsResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequestedRegionsResponse")
		case "requestedRegions":
			out.Values[i] = ec._RequestedRegionsResponse_requestedRegions(ctx, field, obj)
		case "alreadyRequestedRegions":
			out.Values[i] = ec._RequestedRegionsResponse_alreadyRequestedRegions(ctx, field, obj)
		case "message":
			out.Values[i] = ec._RequestedRegionsResponse_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requirementImplementors = []string{"Requirement"}

func (ec *executionContext) _Requirement(ctx context.Context, sel ast.SelectionSet, obj *model.Requirement) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requirementImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Requirement")
		case "requestRequirement":
			out.Values[i] = ec._Requirement_requestRequirement(ctx, field, obj)
		case "LimitRequirement":
			out.Values[i] = ec._Requirement_LimitRequirement(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var requirementPropertiesImplementors = []string{"RequirementProperties"}

func (ec *executionContext) _RequirementProperties(ctx context.Context, sel ast.SelectionSet, obj *model.RequirementProperties) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, requirementPropertiesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RequirementProperties")
		case "memory":
			out.Values[i] = ec._RequirementProperties_memory(ctx, field, obj)
		case "cpu":
			out.Values[i] = ec._RequirementProperties_cpu(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var responseImplementors = []string{"Response"}

func (ec *executionContext) _Response(ctx context.Context, sel ast.SelectionSet, obj *model.Response) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, responseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Response")
		case "message":
			out.Values[i] = ec._Response_message(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var restartAppImplementors = []string{"RestartApp"}

func (ec *executionContext) _RestartApp(ctx context.Context, sel ast.SelectionSet, obj *model.RestartApp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, restartAppImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RestartApp")
		case "app":
			out.Values[i] = ec._RestartApp_app(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var resumeAppImplementors = []string{"ResumeApp"}

func (ec *executionContext) _ResumeApp(ctx context.Context, sel ast.SelectionSet, obj *model.ResumeApp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, resumeAppImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ResumeApp")
		case "app":
			out.Values[i] = ec._ResumeApp_app(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3BuildCommandImplementors = []string{"S3BuildCommand"}

func (ec *executionContext) _S3BuildCommand(ctx context.Context, sel ast.SelectionSet, obj *model.S3BuildCommand) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3BuildCommandImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3BuildCommand")
		case "s3Cmd":
			out.Values[i] = ec._S3BuildCommand_s3Cmd(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3DeploymentsImplementors = []string{"S3Deployments"}

func (ec *executionContext) _S3Deployments(ctx context.Context, sel ast.SelectionSet, obj *model.S3Deployments) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3DeploymentsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3Deployments")
		case "id":
			out.Values[i] = ec._S3Deployments_id(ctx, field, obj)
		case "s3AppName":
			out.Values[i] = ec._S3Deployments_s3AppName(ctx, field, obj)
		case "status":
			out.Values[i] = ec._S3Deployments_status(ctx, field, obj)
		case "appUrl":
			out.Values[i] = ec._S3Deployments_appUrl(ctx, field, obj)
		case "buildCommandsS3":
			out.Values[i] = ec._S3Deployments_buildCommandsS3(ctx, field, obj)
		case "envVariablesS3":
			out.Values[i] = ec._S3Deployments_envVariablesS3(ctx, field, obj)
		case "organizationId":
			out.Values[i] = ec._S3Deployments_organizationId(ctx, field, obj)
		case "orgDetails":
			out.Values[i] = ec._S3Deployments_orgDetails(ctx, field, obj)
		case "deploymentTime":
			out.Values[i] = ec._S3Deployments_deploymentTime(ctx, field, obj)
		case "buildTime":
			out.Values[i] = ec._S3Deployments_buildTime(ctx, field, obj)
		case "createdBy":
			out.Values[i] = ec._S3Deployments_createdBy(ctx, field, obj)
		case "userDetails":
			out.Values[i] = ec._S3Deployments_userDetails(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._S3Deployments_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var s3EnvVariableImplementors = []string{"S3EnvVariable"}

func (ec *executionContext) _S3EnvVariable(ctx context.Context, sel ast.SelectionSet, obj *model.S3EnvVariable) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, s3EnvVariableImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("S3EnvVariable")
		case "name":
			out.Values[i] = ec._S3EnvVariable_name(ctx, field, obj)
		case "value":
			out.Values[i] = ec._S3EnvVariable_value(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var secretImplementors = []string{"Secret"}

func (ec *executionContext) _Secret(ctx context.Context, sel ast.SelectionSet, obj *model.Secret) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, secretImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Secret")
		case "name":
			out.Values[i] = ec._Secret_name(ctx, field, obj)
		case "digest":
			out.Values[i] = ec._Secret_digest(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Secret_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceImplementors = []string{"Service"}

func (ec *executionContext) _Service(ctx context.Context, sel ast.SelectionSet, obj *model.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Service")
		case "description":
			out.Values[i] = ec._Service_description(ctx, field, obj)
		case "protocol":
			out.Values[i] = ec._Service_protocol(ctx, field, obj)
		case "internalPort":
			out.Values[i] = ec._Service_internalPort(ctx, field, obj)
		case "ports":
			out.Values[i] = ec._Service_ports(ctx, field, obj)
		case "checks":
			out.Values[i] = ec._Service_checks(ctx, field, obj)
		case "softConcurrency":
			out.Values[i] = ec._Service_softConcurrency(ctx, field, obj)
		case "hardConcurrency":
			out.Values[i] = ec._Service_hardConcurrency(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var startBuildImplementors = []string{"StartBuild"}

func (ec *executionContext) _StartBuild(ctx context.Context, sel ast.SelectionSet, obj *model.StartBuild) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, startBuildImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StartBuild")
		case "build":
			out.Values[i] = ec._StartBuild_build(ctx, field, obj)
		case "buildLogs":
			out.Values[i] = ec._StartBuild_buildLogs(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var stripeSubscriptionImplementors = []string{"StripeSubscription"}

func (ec *executionContext) _StripeSubscription(ctx context.Context, sel ast.SelectionSet, obj *model.StripeSubscription) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, stripeSubscriptionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("StripeSubscription")
		case "customerId":
			out.Values[i] = ec._StripeSubscription_customerId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priceId":
			out.Values[i] = ec._StripeSubscription_priceId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultPaymentMethodid":
			out.Values[i] = ec._StripeSubscription_defaultPaymentMethodid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "planId":
			out.Values[i] = ec._StripeSubscription_planId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "userID":
			out.Values[i] = ec._StripeSubscription_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "customerSubscriptionId":
			out.Values[i] = ec._StripeSubscription_customerSubscriptionId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "accessToken":
			out.Values[i] = ec._StripeSubscription_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._StripeSubscription_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "price":
			out.Values[i] = ec._StripeSubscription_price(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._StripeSubscription_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._StripeSubscription_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subOrgCountImplementors = []string{"SubOrgCount"}

func (ec *executionContext) _SubOrgCount(ctx context.Context, sel ast.SelectionSet, obj *model.SubOrgCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subOrgCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubOrgCount")
		case "subOrganizationCount":
			out.Values[i] = ec._SubOrgCount_subOrganizationCount(ctx, field, obj)
		case "businessUnit":
			out.Values[i] = ec._SubOrgCount_businessUnit(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var subOrganizationImplementors = []string{"SubOrganization"}

func (ec *executionContext) _SubOrganization(ctx context.Context, sel ast.SelectionSet, obj *model.SubOrganization) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, subOrganizationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SubOrganization")
		case "id":
			out.Values[i] = ec._SubOrganization_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._SubOrganization_name(ctx, field, obj)
		case "slug":
			out.Values[i] = ec._SubOrganization_slug(ctx, field, obj)
		case "type":
			out.Values[i] = ec._SubOrganization_type(ctx, field, obj)
		case "domains":
			out.Values[i] = ec._SubOrganization_domains(ctx, field, obj)
		case "region":
			out.Values[i] = ec._SubOrganization_region(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._SubOrganization_isActive(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var suspendAppImplementors = []string{"SuspendApp"}

func (ec *executionContext) _SuspendApp(ctx context.Context, sel ast.SelectionSet, obj *model.SuspendApp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, suspendAppImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SuspendApp")
		case "app":
			out.Values[i] = ec._SuspendApp_app(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tokenValidationImplementors = []string{"TokenValidation"}

func (ec *executionContext) _TokenValidation(ctx context.Context, sel ast.SelectionSet, obj *model.TokenValidation) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tokenValidationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("TokenValidation")
		case "refreshToken":
			out.Values[i] = ec._TokenValidation_refreshToken(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateAppConfigImplementors = []string{"UpdateAppConfig"}

func (ec *executionContext) _UpdateAppConfig(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateAppConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateAppConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateAppConfig")
		case "appId":
			out.Values[i] = ec._UpdateAppConfig_appId(ctx, field, obj)
		case "appName":
			out.Values[i] = ec._UpdateAppConfig_appName(ctx, field, obj)
		case "internalPort":
			out.Values[i] = ec._UpdateAppConfig_internalPort(ctx, field, obj)
		case "externalPort":
			out.Values[i] = ec._UpdateAppConfig_externalPort(ctx, field, obj)
		case "image":
			out.Values[i] = ec._UpdateAppConfig_image(ctx, field, obj)
		case "version":
			out.Values[i] = ec._UpdateAppConfig_version(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateImageOutputImplementors = []string{"UpdateImageOutput"}

func (ec *executionContext) _UpdateImageOutput(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateImageOutput) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateImageOutputImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateImageOutput")
		case "message":
			out.Values[i] = ec._UpdateImageOutput_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateUserImplementors = []string{"UpdateUser"}

func (ec *executionContext) _UpdateUser(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateUser) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateUserImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UpdateUser")
		case "companyName":
			out.Values[i] = ec._UpdateUser_companyName(ctx, field, obj)
		case "phoneNumber":
			out.Values[i] = ec._UpdateUser_phoneNumber(ctx, field, obj)
		case "location":
			out.Values[i] = ec._UpdateUser_location(ctx, field, obj)
		case "industry":
			out.Values[i] = ec._UpdateUser_industry(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._UpdateUser_updatedAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			out.Values[i] = ec._User_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._User_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "firstName":
			out.Values[i] = ec._User_firstName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lastName":
			out.Values[i] = ec._User_lastName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userDeploymentDetailCountImplementors = []string{"UserDeploymentDetailCount"}

func (ec *executionContext) _UserDeploymentDetailCount(ctx context.Context, sel ast.SelectionSet, obj *model.UserDeploymentDetailCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userDeploymentDetailCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("UserDeploymentDetailCount")
		case "userName":
			out.Values[i] = ec._UserDeploymentDetailCount_userName(ctx, field, obj)
		case "email":
			out.Values[i] = ec._UserDeploymentDetailCount_email(ctx, field, obj)
		case "companyName":
			out.Values[i] = ec._UserDeploymentDetailCount_companyName(ctx, field, obj)
		case "roleId":
			out.Values[i] = ec._UserDeploymentDetailCount_roleId(ctx, field, obj)
		case "totalDeployed":
			out.Values[i] = ec._UserDeploymentDetailCount_totalDeployed(ctx, field, obj)
		case "totalReDeployed":
			out.Values[i] = ec._UserDeploymentDetailCount_totalReDeployed(ctx, field, obj)
		case "deployData":
			out.Values[i] = ec._UserDeploymentDetailCount_deployData(ctx, field, obj)
		case "reDeployData":
			out.Values[i] = ec._UserDeploymentDetailCount_reDeployData(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vMSizeImplementors = []string{"VMSize"}

func (ec *executionContext) _VMSize(ctx context.Context, sel ast.SelectionSet, obj *model.VMSize) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vMSizeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VMSize")
		case "name":
			out.Values[i] = ec._VMSize_name(ctx, field, obj)
		case "cPUCores":
			out.Values[i] = ec._VMSize_cPUCores(ctx, field, obj)
		case "memoryGb":
			out.Values[i] = ec._VMSize_memoryGb(ctx, field, obj)
		case "memoryMB":
			out.Values[i] = ec._VMSize_memoryMB(ctx, field, obj)
		case "priceMonth":
			out.Values[i] = ec._VMSize_priceMonth(ctx, field, obj)
		case "priceSecond":
			out.Values[i] = ec._VMSize_priceSecond(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var vmInstanceMessageImplementors = []string{"VmInstanceMessage"}

func (ec *executionContext) _VmInstanceMessage(ctx context.Context, sel ast.SelectionSet, obj *model.VMInstanceMessage) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, vmInstanceMessageImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VmInstanceMessage")
		case "id":
			out.Values[i] = ec._VmInstanceMessage_id(ctx, field, obj)
		case "message":
			out.Values[i] = ec._VmInstanceMessage_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var volumeImplementors = []string{"Volume"}

func (ec *executionContext) _Volume(ctx context.Context, sel ast.SelectionSet, obj *model.Volume) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, volumeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Volume")
		case "id":
			out.Values[i] = ec._Volume_id(ctx, field, obj)
		case "app":
			out.Values[i] = ec._Volume_app(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Volume_name(ctx, field, obj)
		case "sizeGb":
			out.Values[i] = ec._Volume_sizeGb(ctx, field, obj)
		case "region":
			out.Values[i] = ec._Volume_region(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._Volume_createdAt(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var volumeByAppImplementors = []string{"VolumeByApp"}

func (ec *executionContext) _VolumeByApp(ctx context.Context, sel ast.SelectionSet, obj *model.VolumeByApp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, volumeByAppImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VolumeByApp")
		case "appId":
			out.Values[i] = ec._VolumeByApp_appId(ctx, field, obj)
		case "accessMode":
			out.Values[i] = ec._VolumeByApp_accessMode(ctx, field, obj)
		case "name":
			out.Values[i] = ec._VolumeByApp_name(ctx, field, obj)
		case "path":
			out.Values[i] = ec._VolumeByApp_path(ctx, field, obj)
		case "containerPath":
			out.Values[i] = ec._VolumeByApp_containerPath(ctx, field, obj)
		case "hostPath":
			out.Values[i] = ec._VolumeByApp_hostPath(ctx, field, obj)
		case "size":
			out.Values[i] = ec._VolumeByApp_size(ctx, field, obj)
		case "volumeTypeId":
			out.Values[i] = ec._VolumeByApp_volumeTypeId(ctx, field, obj)
		case "isRead":
			out.Values[i] = ec._VolumeByApp_isRead(ctx, field, obj)
		case "isHostVolume":
			out.Values[i] = ec._VolumeByApp_isHostVolume(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var volumeTypeImplementors = []string{"VolumeType"}

func (ec *executionContext) _VolumeType(ctx context.Context, sel ast.SelectionSet, obj *model.VolumeType) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, volumeTypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("VolumeType")
		case "id":
			out.Values[i] = ec._VolumeType_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._VolumeType_name(ctx, field, obj)
		case "isRead":
			out.Values[i] = ec._VolumeType_isRead(ctx, field, obj)
		case "isHostVolume":
			out.Values[i] = ec._VolumeType_isHostVolume(ctx, field, obj)
		case "description":
			out.Values[i] = ec._VolumeType_description(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var volumesImplementors = []string{"Volumes"}

func (ec *executionContext) _Volumes(ctx context.Context, sel ast.SelectionSet, obj *model.Volumes) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, volumesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Volumes")
		case "nodes":
			out.Values[i] = ec._Volumes_nodes(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var workLoadRegionsImplementors = []string{"WorkLoadRegions"}

func (ec *executionContext) _WorkLoadRegions(ctx context.Context, sel ast.SelectionSet, obj *model.WorkLoadRegions) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workLoadRegionsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkLoadRegions")
		case "id":
			out.Values[i] = ec._WorkLoadRegions_id(ctx, field, obj)
		case "environmentName":
			out.Values[i] = ec._WorkLoadRegions_environmentName(ctx, field, obj)
		case "environmentEndpoint":
			out.Values[i] = ec._WorkLoadRegions_environmentEndpoint(ctx, field, obj)
		case "organizationId":
			out.Values[i] = ec._WorkLoadRegions_organizationId(ctx, field, obj)
		case "addedWorkLoadRegions":
			out.Values[i] = ec._WorkLoadRegions_addedWorkLoadRegions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var workloadManagementListImplementors = []string{"WorkloadManagementList"}

func (ec *executionContext) _WorkloadManagementList(ctx context.Context, sel ast.SelectionSet, obj *model.WorkloadManagementList) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, workloadManagementListImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("WorkloadManagementList")
		case "id":
			out.Values[i] = ec._WorkloadManagementList_id(ctx, field, obj)
		case "environmentName":
			out.Values[i] = ec._WorkloadManagementList_environmentName(ctx, field, obj)
		case "environmentEndpoint":
			out.Values[i] = ec._WorkloadManagementList_environmentEndpoint(ctx, field, obj)
		case "organizationId":
			out.Values[i] = ec._WorkloadManagementList_organizationId(ctx, field, obj)
		case "organizationName":
			out.Values[i] = ec._WorkloadManagementList_organizationName(ctx, field, obj)
		case "subOrganizationId":
			out.Values[i] = ec._WorkloadManagementList_subOrganizationId(ctx, field, obj)
		case "businessUnitId":
			out.Values[i] = ec._WorkloadManagementList_businessUnitId(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._WorkloadManagementList_userId(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._WorkloadManagementList_createdAt(ctx, field, obj)
		case "apps":
			out.Values[i] = ec._WorkloadManagementList_apps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appCountImplementors = []string{"appCount"}

func (ec *executionContext) _appCount(ctx context.Context, sel ast.SelectionSet, obj *model.AppCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("appCount")
		case "totalApps":
			out.Values[i] = ec._appCount_totalApps(ctx, field, obj)
		case "new":
			out.Values[i] = ec._appCount_new(ctx, field, obj)
		case "active":
			out.Values[i] = ec._appCount_active(ctx, field, obj)
		case "inActive":
			out.Values[i] = ec._appCount_inActive(ctx, field, obj)
		case "terminated":
			out.Values[i] = ec._appCount_terminated(ctx, field, obj)
		case "region":
			out.Values[i] = ec._appCount_region(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var appCountsDetailsImplementors = []string{"appCountsDetails"}

func (ec *executionContext) _appCountsDetails(ctx context.Context, sel ast.SelectionSet, obj *model.AppCountsDetails) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, appCountsDetailsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("appCountsDetails")
		case "activeApps":
			out.Values[i] = ec._appCountsDetails_activeApps(ctx, field, obj)
		case "deletedApps":
			out.Values[i] = ec._appCountsDetails_deletedApps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var businessUnitListInSubOrgImplementors = []string{"businessUnitListInSubOrg"}

func (ec *executionContext) _businessUnitListInSubOrg(ctx context.Context, sel ast.SelectionSet, obj *model.BusinessUnitListInSubOrg) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, businessUnitListInSubOrgImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("businessUnitListInSubOrg")
		case "subOrgId":
			out.Values[i] = ec._businessUnitListInSubOrg_subOrgId(ctx, field, obj)
		case "subOrgName":
			out.Values[i] = ec._businessUnitListInSubOrg_subOrgName(ctx, field, obj)
		case "businessUnitUnderSubOrg":
			out.Values[i] = ec._businessUnitListInSubOrg_businessUnitUnderSubOrg(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var getBusinessUnitImplementors = []string{"getBusinessUnit"}

func (ec *executionContext) _getBusinessUnit(ctx context.Context, sel ast.SelectionSet, obj *model.GetBusinessUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, getBusinessUnitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("getBusinessUnit")
		case "id":
			out.Values[i] = ec._getBusinessUnit_id(ctx, field, obj)
		case "name":
			out.Values[i] = ec._getBusinessUnit_name(ctx, field, obj)
		case "isActive":
			out.Values[i] = ec._getBusinessUnit_isActive(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var listBusinessUnitImplementors = []string{"listBusinessUnit"}

func (ec *executionContext) _listBusinessUnit(ctx context.Context, sel ast.SelectionSet, obj *model.ListBusinessUnit) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, listBusinessUnitImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("listBusinessUnit")
		case "id":
			out.Values[i] = ec._listBusinessUnit_id(ctx, field, obj)
		case "orgId":
			out.Values[i] = ec._listBusinessUnit_orgId(ctx, field, obj)
		case "orgName":
			out.Values[i] = ec._listBusinessUnit_orgName(ctx, field, obj)
		case "subOrgId":
			out.Values[i] = ec._listBusinessUnit_subOrgId(ctx, field, obj)
		case "subOrgName":
			out.Values[i] = ec._listBusinessUnit_subOrgName(ctx, field, obj)
		case "name":
			out.Values[i] = ec._listBusinessUnit_name(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var planAndPermissionImplementors = []string{"planAndPermission"}

func (ec *executionContext) _planAndPermission(ctx context.Context, sel ast.SelectionSet, obj *model.PlanAndPermission) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, planAndPermissionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("planAndPermission")
		case "id":
			out.Values[i] = ec._planAndPermission_id(ctx, field, obj)
		case "planName":
			out.Values[i] = ec._planAndPermission_planName(ctx, field, obj)
		case "apps":
			out.Values[i] = ec._planAndPermission_apps(ctx, field, obj)
		case "workloadManagement":
			out.Values[i] = ec._planAndPermission_workloadManagement(ctx, field, obj)
		case "organizationManagement":
			out.Values[i] = ec._planAndPermission_organizationManagement(ctx, field, obj)
		case "inviteUserLimit":
			out.Values[i] = ec._planAndPermission_inviteUserLimit(ctx, field, obj)
		case "applicationHealthDashboard":
			out.Values[i] = ec._planAndPermission_applicationHealthDashboard(ctx, field, obj)
		case "byoh":
			out.Values[i] = ec._planAndPermission_byoh(ctx, field, obj)
		case "storage":
			out.Values[i] = ec._planAndPermission_storage(ctx, field, obj)
		case "versionControlPanel":
			out.Values[i] = ec._planAndPermission_versionControlPanel(ctx, field, obj)
		case "singleSignOn":
			out.Values[i] = ec._planAndPermission_singleSignOn(ctx, field, obj)
		case "organizationCount":
			out.Values[i] = ec._planAndPermission_organizationCount(ctx, field, obj)
		case "subOrganizationCount":
			out.Values[i] = ec._planAndPermission_subOrganizationCount(ctx, field, obj)
		case "businessunitCount":
			out.Values[i] = ec._planAndPermission_businessunitCount(ctx, field, obj)
		case "customDomain":
			out.Values[i] = ec._planAndPermission_customDomain(ctx, field, obj)
		case "appNotification":
			out.Values[i] = ec._planAndPermission_appNotification(ctx, field, obj)
		case "secret":
			out.Values[i] = ec._planAndPermission_secret(ctx, field, obj)
		case "monitoringPlatform":
			out.Values[i] = ec._planAndPermission_monitoringPlatform(ctx, field, obj)
		case "alertsAdvisories":
			out.Values[i] = ec._planAndPermission_alertsAdvisories(ctx, field, obj)
		case "auditLogs":
			out.Values[i] = ec._planAndPermission_auditLogs(ctx, field, obj)
		case "sslSecurity":
			out.Values[i] = ec._planAndPermission_sslSecurity(ctx, field, obj)
		case "infrastructureConfiguration":
			out.Values[i] = ec._planAndPermission_infrastructureConfiguration(ctx, field, obj)
		case "replicas":
			out.Values[i] = ec._planAndPermission_replicas(ctx, field, obj)
		case "k8sRegions":
			out.Values[i] = ec._planAndPermission_k8sRegions(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var regionAppCountImplementors = []string{"regionAppCount"}

func (ec *executionContext) _regionAppCount(ctx context.Context, sel ast.SelectionSet, obj *model.RegionAppCount) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, regionAppCountImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("regionAppCount")
		case "Region":
			out.Values[i] = ec._regionAppCount_Region(ctx, field, obj)
		case "apps":
			out.Values[i] = ec._regionAppCount_apps(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var updateConfigAppImplementors = []string{"updateConfigApp"}

func (ec *executionContext) _updateConfigApp(ctx context.Context, sel ast.SelectionSet, obj *model.UpdateConfigApp) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, updateConfigAppImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("updateConfigApp")
		case "message":
			out.Values[i] = ec._updateConfigApp_message(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userActivitiesImplementors = []string{"userActivities"}

func (ec *executionContext) _userActivities(ctx context.Context, sel ast.SelectionSet, obj *model.UserActivities) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userActivitiesImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("userActivities")
		case "id":
			out.Values[i] = ec._userActivities_id(ctx, field, obj)
		case "type":
			out.Values[i] = ec._userActivities_type(ctx, field, obj)
		case "userId":
			out.Values[i] = ec._userActivities_userId(ctx, field, obj)
		case "activities":
			out.Values[i] = ec._userActivities_activities(ctx, field, obj)
		case "message":
			out.Values[i] = ec._userActivities_message(ctx, field, obj)
		case "isRead":
			out.Values[i] = ec._userActivities_isRead(ctx, field, obj)
		case "createdAt":
			out.Values[i] = ec._userActivities_createdAt(ctx, field, obj)
		case "organizationName":
			out.Values[i] = ec._userActivities_organizationName(ctx, field, obj)
		case "subOrganizationName":
			out.Values[i] = ec._userActivities_subOrganizationName(ctx, field, obj)
		case "referenceId":
			out.Values[i] = ec._userActivities_referenceId(ctx, field, obj)
		case "appsCount":
			out.Values[i] = ec._userActivities_appsCount(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNApp2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx context.Context, sel ast.SelectionSet, v model.App) graphql.Marshaler {
	return ec._App(ctx, sel, &v)
}

func (ec *executionContext) marshalNApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx context.Context, sel ast.SelectionSet, v *model.App) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._App(ctx, sel, v)
}

func (ec *executionContext) marshalNAppsAndOrgsAndSubOrgCountDetails2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsAndOrgsAndSubOrgCountDetails(ctx context.Context, sel ast.SelectionSet, v model.AppsAndOrgsAndSubOrgCountDetails) graphql.Marshaler {
	return ec._AppsAndOrgsAndSubOrgCountDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppsAndOrgsAndSubOrgCountDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsAndOrgsAndSubOrgCountDetails(ctx context.Context, sel ast.SelectionSet, v *model.AppsAndOrgsAndSubOrgCountDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppsAndOrgsAndSubOrgCountDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNAppsAndOrgsCountDetails2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsAndOrgsCountDetails(ctx context.Context, sel ast.SelectionSet, v model.AppsAndOrgsCountDetails) graphql.Marshaler {
	return ec._AppsAndOrgsCountDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNAppsAndOrgsCountDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsAndOrgsCountDetails(ctx context.Context, sel ast.SelectionSet, v *model.AppsAndOrgsCountDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AppsAndOrgsCountDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNAttachPayment2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAttachPayment(ctx context.Context, sel ast.SelectionSet, v model.AttachPayment) graphql.Marshaler {
	return ec._AttachPayment(ctx, sel, &v)
}

func (ec *executionContext) marshalNAttachPayment2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAttachPayment(ctx context.Context, sel ast.SelectionSet, v *model.AttachPayment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AttachPayment(ctx, sel, v)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBusinessUnitInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitInput(ctx context.Context, v interface{}) (model.BusinessUnitInput, error) {
	res, err := ec.unmarshalInputBusinessUnitInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNChangePassword2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐChangePassword(ctx context.Context, v interface{}) (model.ChangePassword, error) {
	res, err := ec.unmarshalInputChangePassword(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNClientSideLogs2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClientSideLogs(ctx context.Context, v interface{}) (model.ClientSideLogs, error) {
	res, err := ec.unmarshalInputClientSideLogs(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCloudRegions2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCloudRegions(ctx context.Context, sel ast.SelectionSet, v []*model.CloudRegions) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCloudRegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCloudRegions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNClusterNodes2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterNodes(ctx context.Context, sel ast.SelectionSet, v model.ClusterNodes) graphql.Marshaler {
	return ec._ClusterNodes(ctx, sel, &v)
}

func (ec *executionContext) marshalNClusterNodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterNodes(ctx context.Context, sel ast.SelectionSet, v *model.ClusterNodes) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ClusterNodes(ctx, sel, v)
}

func (ec *executionContext) marshalNConfigAppTemplates2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigAppTemplates(ctx context.Context, sel ast.SelectionSet, v []*model.ConfigAppTemplates) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConfigAppTemplates2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigAppTemplates(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNConfigTemplate2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigTemplate(ctx context.Context, v interface{}) (model.ConfigTemplate, error) {
	res, err := ec.unmarshalInputConfigTemplate(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateAppInput(ctx context.Context, v interface{}) (model.CreateAppInput, error) {
	res, err := ec.unmarshalInputCreateAppInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateAttachPaymentMethod2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateAttachPaymentMethod(ctx context.Context, v interface{}) (model.CreateAttachPaymentMethod, error) {
	res, err := ec.unmarshalInputCreateAttachPaymentMethod(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCreateOrganization2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateOrganization(ctx context.Context, sel ast.SelectionSet, v model.CreateOrganization) graphql.Marshaler {
	return ec._CreateOrganization(ctx, sel, &v)
}

func (ec *executionContext) marshalNCreateOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateOrganization(ctx context.Context, sel ast.SelectionSet, v *model.CreateOrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CreateOrganization(ctx, sel, v)
}

func (ec *executionContext) unmarshalNCreateOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateOrganizationInput(ctx context.Context, v interface{}) (model.CreateOrganizationInput, error) {
	res, err := ec.unmarshalInputCreateOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePaymentIntent2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreatePaymentIntent(ctx context.Context, v interface{}) (model.CreatePaymentIntent, error) {
	res, err := ec.unmarshalInputCreatePaymentIntent(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateStripeSubscription2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateStripeSubscription(ctx context.Context, v interface{}) (model.CreateStripeSubscription, error) {
	res, err := ec.unmarshalInputCreateStripeSubscription(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateSubOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateSubOrganizationInput(ctx context.Context, v interface{}) (model.CreateSubOrganizationInput, error) {
	res, err := ec.unmarshalInputCreateSubOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCurrentUserEmail2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCurrentUserEmail(ctx context.Context, sel ast.SelectionSet, v model.CurrentUserEmail) graphql.Marshaler {
	return ec._CurrentUserEmail(ctx, sel, &v)
}

func (ec *executionContext) marshalNCurrentUserEmail2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCurrentUserEmail(ctx context.Context, sel ast.SelectionSet, v *model.CurrentUserEmail) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._CurrentUserEmail(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDataDogInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDataDogInput(ctx context.Context, v interface{}) (model.DataDogInput, error) {
	res, err := ec.unmarshalInputDataDogInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteOrganization2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteOrganization(ctx context.Context, sel ast.SelectionSet, v model.DeleteOrganization) graphql.Marshaler {
	return ec._DeleteOrganization(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteOrganization(ctx context.Context, sel ast.SelectionSet, v *model.DeleteOrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteOrganization(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteOrganizationInput(ctx context.Context, v interface{}) (model.DeleteOrganizationInput, error) {
	res, err := ec.unmarshalInputDeleteOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeleteSubOrganization2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteSubOrganization(ctx context.Context, sel ast.SelectionSet, v model.DeleteSubOrganization) graphql.Marshaler {
	return ec._DeleteSubOrganization(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeleteSubOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteSubOrganization(ctx context.Context, sel ast.SelectionSet, v *model.DeleteSubOrganization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeleteSubOrganization(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeleteSubOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeleteSubOrganizationInput(ctx context.Context, v interface{}) (model.DeleteSubOrganizationInput, error) {
	res, err := ec.unmarshalInputDeleteSubOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeployImage2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployImage(ctx context.Context, sel ast.SelectionSet, v model.DeployImage) graphql.Marshaler {
	return ec._DeployImage(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeployImage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployImage(ctx context.Context, sel ast.SelectionSet, v *model.DeployImage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeployImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeployImageInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployImageInput(ctx context.Context, v interface{}) (model.DeployImageInput, error) {
	res, err := ec.unmarshalInputDeployImageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNDeployInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployInput(ctx context.Context, v interface{}) (model.DeployInput, error) {
	res, err := ec.unmarshalInputDeployInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeployOutput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployOutput(ctx context.Context, sel ast.SelectionSet, v model.DeployOutput) graphql.Marshaler {
	return ec._DeployOutput(ctx, sel, &v)
}

func (ec *executionContext) marshalNDeployOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeployOutput(ctx context.Context, sel ast.SelectionSet, v *model.DeployOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._DeployOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNFile2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐFile(ctx context.Context, sel ast.SelectionSet, v model.File) graphql.Marshaler {
	return ec._File(ctx, sel, &v)
}

func (ec *executionContext) marshalNFile2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐFile(ctx context.Context, sel ast.SelectionSet, v *model.File) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._File(ctx, sel, v)
}

func (ec *executionContext) unmarshalNGetQueryLog2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetQueryLog(ctx context.Context, v interface{}) (model.GetQueryLog, error) {
	res, err := ec.unmarshalInputGetQueryLog(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNGetSecRegistry2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetSecRegistry(ctx context.Context, sel ast.SelectionSet, v *model.GetSecRegistry) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetSecRegistry(ctx, sel, v)
}

func (ec *executionContext) marshalNGetUserById2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx context.Context, sel ast.SelectionSet, v model.GetUserByID) graphql.Marshaler {
	return ec._GetUserById(ctx, sel, &v)
}

func (ec *executionContext) marshalNGetUserById2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx context.Context, sel ast.SelectionSet, v *model.GetUserByID) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetUserById(ctx, sel, v)
}

func (ec *executionContext) marshalNGetUserPAT2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserPat(ctx context.Context, sel ast.SelectionSet, v []*model.GetUserPat) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetUserPAT2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserPat(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGetUserSecret2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserSecret(ctx context.Context, sel ast.SelectionSet, v *model.GetUserSecret) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GetUserSecret(ctx, sel, v)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNLogin2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐLogin(ctx context.Context, v interface{}) (model.Login, error) {
	res, err := ec.unmarshalInputLogin(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMigrateOrganizationInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMigrateOrganizationInput(ctx context.Context, v interface{}) (model.MigrateOrganizationInput, error) {
	res, err := ec.unmarshalInputMigrateOrganizationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNMoveAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMoveAppInput(ctx context.Context, v interface{}) (model.MoveAppInput, error) {
	res, err := ec.unmarshalInputMoveAppInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNewApp2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNewApp(ctx context.Context, sel ast.SelectionSet, v model.NewApp) graphql.Marshaler {
	return ec._NewApp(ctx, sel, &v)
}

func (ec *executionContext) marshalNNewApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNewApp(ctx context.Context, sel ast.SelectionSet, v *model.NewApp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NewApp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNNewUser2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNewUser(ctx context.Context, v interface{}) (model.NewUser, error) {
	res, err := ec.unmarshalInputNewUser(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOptimizeImage2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOptimizeImage(ctx context.Context, sel ast.SelectionSet, v model.OptimizeImage) graphql.Marshaler {
	return ec._OptimizeImage(ctx, sel, &v)
}

func (ec *executionContext) marshalNOptimizeImage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOptimizeImage(ctx context.Context, sel ast.SelectionSet, v *model.OptimizeImage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OptimizeImage(ctx, sel, v)
}

func (ec *executionContext) unmarshalNOptimizeImageInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOptimizeImageInput(ctx context.Context, v interface{}) (model.OptimizeImageInput, error) {
	res, err := ec.unmarshalInputOptimizeImageInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrganization2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v model.Organization) graphql.Marshaler {
	return ec._Organization(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *model.Organization) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationDetails2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationDetails(ctx context.Context, sel ast.SelectionSet, v model.OrganizationDetails) graphql.Marshaler {
	return ec._OrganizationDetails(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationDetails(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationDetails) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationDetails(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationRegistryType2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationRegistryType(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationRegistryType) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationRegistryType(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizations2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx context.Context, sel ast.SelectionSet, v model.Organizations) graphql.Marshaler {
	return ec._Organizations(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx context.Context, sel ast.SelectionSet, v *model.Organizations) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Organizations(ctx, sel, v)
}

func (ec *executionContext) marshalNOrganizationsandBusinessUnit2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationsandBusinessUnit(ctx context.Context, sel ast.SelectionSet, v model.OrganizationsandBusinessUnit) graphql.Marshaler {
	return ec._OrganizationsandBusinessUnit(ctx, sel, &v)
}

func (ec *executionContext) marshalNOrganizationsandBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationsandBusinessUnit(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationsandBusinessUnit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._OrganizationsandBusinessUnit(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPauseAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPauseAppInput(ctx context.Context, v interface{}) (model.PauseAppInput, error) {
	res, err := ec.unmarshalInputPauseAppInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPayment2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPayment(ctx context.Context, sel ast.SelectionSet, v model.Payment) graphql.Marshaler {
	return ec._Payment(ctx, sel, &v)
}

func (ec *executionContext) marshalNPayment2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPayment(ctx context.Context, sel ast.SelectionSet, v *model.Payment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Payment(ctx, sel, v)
}

func (ec *executionContext) marshalNQueryLogOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐQueryLogOutput(ctx context.Context, sel ast.SelectionSet, v *model.QueryLogOutput) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._QueryLogOutput(ctx, sel, v)
}

func (ec *executionContext) marshalNRequestedRegionsResponse2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegionsResponse(ctx context.Context, sel ast.SelectionSet, v model.RequestedRegionsResponse) graphql.Marshaler {
	return ec._RequestedRegionsResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNRequestedRegionsResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegionsResponse(ctx context.Context, sel ast.SelectionSet, v *model.RequestedRegionsResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RequestedRegionsResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNResponse2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResponse(ctx context.Context, sel ast.SelectionSet, v model.Response) graphql.Marshaler {
	return ec._Response(ctx, sel, &v)
}

func (ec *executionContext) marshalNResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResponse(ctx context.Context, sel ast.SelectionSet, v *model.Response) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Response(ctx, sel, v)
}

func (ec *executionContext) marshalNRestartApp2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRestartApp(ctx context.Context, sel ast.SelectionSet, v model.RestartApp) graphql.Marshaler {
	return ec._RestartApp(ctx, sel, &v)
}

func (ec *executionContext) marshalNRestartApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRestartApp(ctx context.Context, sel ast.SelectionSet, v *model.RestartApp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RestartApp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNRestartAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRestartAppInput(ctx context.Context, v interface{}) (model.RestartAppInput, error) {
	res, err := ec.unmarshalInputRestartAppInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNResumeApp2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResumeApp(ctx context.Context, sel ast.SelectionSet, v model.ResumeApp) graphql.Marshaler {
	return ec._ResumeApp(ctx, sel, &v)
}

func (ec *executionContext) marshalNResumeApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResumeApp(ctx context.Context, sel ast.SelectionSet, v *model.ResumeApp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._ResumeApp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNResumeAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐResumeAppInput(ctx context.Context, v interface{}) (model.ResumeAppInput, error) {
	res, err := ec.unmarshalInputResumeAppInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStartBuild2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartBuild(ctx context.Context, sel ast.SelectionSet, v model.StartBuild) graphql.Marshaler {
	return ec._StartBuild(ctx, sel, &v)
}

func (ec *executionContext) marshalNStartBuild2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartBuild(ctx context.Context, sel ast.SelectionSet, v *model.StartBuild) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StartBuild(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStartBuildInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartBuildInput(ctx context.Context, v interface{}) (model.StartBuildInput, error) {
	res, err := ec.unmarshalInputStartBuildInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalNStripeSubscription2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStripeSubscription(ctx context.Context, sel ast.SelectionSet, v model.StripeSubscription) graphql.Marshaler {
	return ec._StripeSubscription(ctx, sel, &v)
}

func (ec *executionContext) marshalNStripeSubscription2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStripeSubscription(ctx context.Context, sel ast.SelectionSet, v *model.StripeSubscription) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._StripeSubscription(ctx, sel, v)
}

func (ec *executionContext) marshalNSuspendApp2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSuspendApp(ctx context.Context, sel ast.SelectionSet, v model.SuspendApp) graphql.Marshaler {
	return ec._SuspendApp(ctx, sel, &v)
}

func (ec *executionContext) marshalNSuspendApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSuspendApp(ctx context.Context, sel ast.SelectionSet, v *model.SuspendApp) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SuspendApp(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUpdateAppInput2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateAppInput(ctx context.Context, v interface{}) (model.UpdateAppInput, error) {
	res, err := ec.unmarshalInputUpdateAppInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, v interface{}) (graphql.Upload, error) {
	res, err := graphql.UnmarshalUpload(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚐUpload(ctx context.Context, sel ast.SelectionSet, v graphql.Upload) graphql.Marshaler {
	res := graphql.MarshalUpload(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalNVmInstanceMessage2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMInstanceMessage(ctx context.Context, sel ast.SelectionSet, v model.VMInstanceMessage) graphql.Marshaler {
	return ec._VmInstanceMessage(ctx, sel, &v)
}

func (ec *executionContext) marshalNVmInstanceMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMInstanceMessage(ctx context.Context, sel ast.SelectionSet, v *model.VMInstanceMessage) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._VmInstanceMessage(ctx, sel, v)
}

func (ec *executionContext) marshalNWorkloadManagementList2githubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementList(ctx context.Context, sel ast.SelectionSet, v model.WorkloadManagementList) graphql.Marshaler {
	return ec._WorkloadManagementList(ctx, sel, &v)
}

func (ec *executionContext) marshalNWorkloadManagementList2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementList(ctx context.Context, sel ast.SelectionSet, v *model.WorkloadManagementList) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._WorkloadManagementList(ctx, sel, v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNgetBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetBusinessUnit(ctx context.Context, sel ast.SelectionSet, v *model.GetBusinessUnit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._getBusinessUnit(ctx, sel, v)
}

func (ec *executionContext) marshalNlistBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx context.Context, sel ast.SelectionSet, v *model.ListBusinessUnit) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._listBusinessUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOActivity2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v []*model.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOActivity2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐActivity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOActivity2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐActivity(ctx context.Context, sel ast.SelectionSet, v *model.Activity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Activity(ctx, sel, v)
}

func (ec *executionContext) marshalOActor2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐActor(ctx context.Context, sel ast.SelectionSet, v *model.Actor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Actor(ctx, sel, v)
}

func (ec *executionContext) unmarshalOAddUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAddUser(ctx context.Context, v interface{}) (*model.AddUser, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputAddUser(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOAddedDataDog2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAddedDataDog(ctx context.Context, sel ast.SelectionSet, v []*model.AddedDataDog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAddedDataDog2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAddedDataDog(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAddedDataDog2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAddedDataDog(ctx context.Context, sel ast.SelectionSet, v *model.AddedDataDog) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AddedDataDog(ctx, sel, v)
}

func (ec *executionContext) marshalOAllocationEvent2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationEvent(ctx context.Context, sel ast.SelectionSet, v []*model.AllocationEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllocationEvent2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationEvent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAllocationEvent2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationEvent(ctx context.Context, sel ast.SelectionSet, v *model.AllocationEvent) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AllocationEvent(ctx, sel, v)
}

func (ec *executionContext) marshalOAllocationStatus2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx context.Context, sel ast.SelectionSet, v []*model.AllocationStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAllocationStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAllocationStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAllocationStatus(ctx context.Context, sel ast.SelectionSet, v *model.AllocationStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AllocationStatus(ctx, sel, v)
}

func (ec *executionContext) marshalOApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx context.Context, sel ast.SelectionSet, v []*model.App) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApp(ctx context.Context, sel ast.SelectionSet, v *model.App) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._App(ctx, sel, v)
}

func (ec *executionContext) marshalOAppCertificate2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCertificate(ctx context.Context, sel ast.SelectionSet, v []*model.AppCertificate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAppCertificate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCertificate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAppCertificate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCertificate(ctx context.Context, sel ast.SelectionSet, v *model.AppCertificate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppCertificate(ctx, sel, v)
}

func (ec *executionContext) marshalOAppChange2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppChange(ctx context.Context, sel ast.SelectionSet, v []*model.AppChange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAppChange2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppChange(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAppChange2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppChange(ctx context.Context, sel ast.SelectionSet, v *model.AppChange) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppChange(ctx, sel, v)
}

func (ec *executionContext) marshalOAppCompact2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCompact(ctx context.Context, sel ast.SelectionSet, v *model.AppCompact) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppCompact(ctx, sel, v)
}

func (ec *executionContext) marshalOAppConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppConfig(ctx context.Context, sel ast.SelectionSet, v *model.AppConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppConfig(ctx, sel, v)
}

func (ec *executionContext) marshalOAppDeploymentRegion2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppDeploymentRegion(ctx context.Context, sel ast.SelectionSet, v *model.AppDeploymentRegion) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppDeploymentRegion(ctx, sel, v)
}

func (ec *executionContext) marshalOAppOrgCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppOrgCount(ctx context.Context, sel ast.SelectionSet, v []*model.AppOrgCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAppOrgCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppOrgCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAppOrgCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppOrgCount(ctx context.Context, sel ast.SelectionSet, v *model.AppOrgCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppOrgCount(ctx, sel, v)
}

func (ec *executionContext) marshalOApps2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐApps(ctx context.Context, sel ast.SelectionSet, v *model.Apps) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Apps(ctx, sel, v)
}

func (ec *executionContext) marshalOAppsCountbyBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsCountbyBusinessUnit(ctx context.Context, sel ast.SelectionSet, v *model.AppsCountbyBusinessUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppsCountbyBusinessUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOAppsOrgsCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsCount(ctx context.Context, sel ast.SelectionSet, v []*model.AppsOrgsCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAppsOrgsCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAppsOrgsCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsCount(ctx context.Context, sel ast.SelectionSet, v *model.AppsOrgsCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppsOrgsCount(ctx, sel, v)
}

func (ec *executionContext) marshalOAppsOrgsSubCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsSubCount(ctx context.Context, sel ast.SelectionSet, v []*model.AppsOrgsSubCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAppsOrgsSubCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsSubCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAppsOrgsSubCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppsOrgsSubCount(ctx context.Context, sel ast.SelectionSet, v *model.AppsOrgsSubCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AppsOrgsSubCount(ctx, sel, v)
}

func (ec *executionContext) marshalOAutoscalingConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAutoscalingConfig(ctx context.Context, sel ast.SelectionSet, v *model.AutoscalingConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AutoscalingConfig(ctx, sel, v)
}

func (ec *executionContext) marshalOAutoscalingRegionConfig2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAutoscalingRegionConfig(ctx context.Context, sel ast.SelectionSet, v []*model.AutoscalingRegionConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAutoscalingRegionConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAutoscalingRegionConfig(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOAutoscalingRegionConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAutoscalingRegionConfig(ctx context.Context, sel ast.SelectionSet, v *model.AutoscalingRegionConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._AutoscalingRegionConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) marshalOBuild2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuild(ctx context.Context, sel ast.SelectionSet, v []*model.Build) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBuild2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuild(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBuild2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuild(ctx context.Context, sel ast.SelectionSet, v *model.Build) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Build(ctx, sel, v)
}

func (ec *executionContext) marshalOBuilder2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuilder(ctx context.Context, sel ast.SelectionSet, v *model.Builder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Builder(ctx, sel, v)
}

func (ec *executionContext) marshalOBuilds2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBuilds(ctx context.Context, sel ast.SelectionSet, v *model.Builds) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Builds(ctx, sel, v)
}

func (ec *executionContext) marshalOBusinessUnitCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitCount(ctx context.Context, sel ast.SelectionSet, v []*model.BusinessUnitCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBusinessUnitCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOBusinessUnitCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐBusinessUnitCount(ctx context.Context, sel ast.SelectionSet, v *model.BusinessUnitCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BusinessUnitCount(ctx, sel, v)
}

func (ec *executionContext) unmarshalOByohRequest2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐByohRequest(ctx context.Context, v interface{}) (*model.ByohRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputByohRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCertificates2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCertificates(ctx context.Context, sel ast.SelectionSet, v *model.Certificates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Certificates(ctx, sel, v)
}

func (ec *executionContext) marshalOChanges2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐChanges(ctx context.Context, sel ast.SelectionSet, v *model.Changes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Changes(ctx, sel, v)
}

func (ec *executionContext) marshalOCheck2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheck(ctx context.Context, sel ast.SelectionSet, v []*model.Check) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCheck2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheck(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCheck2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheck(ctx context.Context, sel ast.SelectionSet, v *model.Check) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Check(ctx, sel, v)
}

func (ec *executionContext) marshalOCheckState2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheckState(ctx context.Context, sel ast.SelectionSet, v []*model.CheckState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOCheckState2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheckState(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOCheckState2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCheckState(ctx context.Context, sel ast.SelectionSet, v *model.CheckState) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CheckState(ctx, sel, v)
}

func (ec *executionContext) marshalOCloudRegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCloudRegions(ctx context.Context, sel ast.SelectionSet, v *model.CloudRegions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._CloudRegions(ctx, sel, v)
}

func (ec *executionContext) marshalOClusterDetail2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetail(ctx context.Context, sel ast.SelectionSet, v *model.ClusterDetail) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClusterDetail(ctx, sel, v)
}

func (ec *executionContext) marshalOClusterDetails2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx context.Context, sel ast.SelectionSet, v []*model.ClusterDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOClusterDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOClusterDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetails(ctx context.Context, sel ast.SelectionSet, v *model.ClusterDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClusterDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalOClusterDetailsInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterDetailsInput(ctx context.Context, v interface{}) (*model.ClusterDetailsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClusterDetailsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOClusterInfo2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterInfo(ctx context.Context, sel ast.SelectionSet, v []*model.ClusterInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOClusterInfo2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterInfo(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOClusterInfo2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐClusterInfo(ctx context.Context, sel ast.SelectionSet, v *model.ClusterInfo) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ClusterInfo(ctx, sel, v)
}

func (ec *executionContext) marshalOConfigAppTemplates2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigAppTemplates(ctx context.Context, sel ast.SelectionSet, v *model.ConfigAppTemplates) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConfigAppTemplates(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConfigureRegionsInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐConfigureRegionsInput(ctx context.Context, v interface{}) (*model.ConfigureRegionsInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConfigureRegionsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateAppToml2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateAppToml(ctx context.Context, v interface{}) (*model.CreateAppToml, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateAppToml(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateNamespace2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateNamespace(ctx context.Context, v interface{}) (*model.CreateNamespace, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateNamespace(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCreateSecretInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐCreateSecretInput(ctx context.Context, v interface{}) (*model.CreateSecretInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputCreateSecretInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODNSRecord2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDNSRecord(ctx context.Context, sel ast.SelectionSet, v []*model.DNSRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODNSRecord2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDNSRecord(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODNSRecord2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDNSRecord(ctx context.Context, sel ast.SelectionSet, v *model.DNSRecord) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DNSRecord(ctx, sel, v)
}

func (ec *executionContext) unmarshalODataDogInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDataDogInput(ctx context.Context, v interface{}) (*model.DataDogInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDataDogInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalODefaultRegionInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDefaultRegionInput(ctx context.Context, v interface{}) (*model.DefaultRegionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDefaultRegionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeploymentCountByDate2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentCountByDate(ctx context.Context, sel ast.SelectionSet, v []*model.DeploymentCountByDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODeploymentCountByDate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentCountByDate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODeploymentCountByDate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentCountByDate(ctx context.Context, sel ast.SelectionSet, v *model.DeploymentCountByDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeploymentCountByDate(ctx, sel, v)
}

func (ec *executionContext) marshalODeploymentStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDeploymentStatus(ctx context.Context, sel ast.SelectionSet, v *model.DeploymentStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DeploymentStatus(ctx, sel, v)
}

func (ec *executionContext) marshalODnsRecords2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDNSRecords(ctx context.Context, sel ast.SelectionSet, v *model.DNSRecords) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DnsRecords(ctx, sel, v)
}

func (ec *executionContext) marshalODomain2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomain(ctx context.Context, sel ast.SelectionSet, v []*model.Domain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODomain2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomain(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODomain2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomain(ctx context.Context, sel ast.SelectionSet, v *model.Domain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Domain(ctx, sel, v)
}

func (ec *executionContext) marshalODomainMapping2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomainMapping(ctx context.Context, sel ast.SelectionSet, v []*model.DomainMapping) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODomainMapping2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomainMapping(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODomainMapping2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomainMapping(ctx context.Context, sel ast.SelectionSet, v *model.DomainMapping) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DomainMapping(ctx, sel, v)
}

func (ec *executionContext) marshalODomains2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDomains(ctx context.Context, sel ast.SelectionSet, v *model.Domains) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Domains(ctx, sel, v)
}

func (ec *executionContext) marshalODuploDeployOutput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploDeployOutput(ctx context.Context, sel ast.SelectionSet, v []*model.DuploDeployOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalODuploDeployOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploDeployOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalODuploDeployOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploDeployOutput(ctx context.Context, sel ast.SelectionSet, v *model.DuploDeployOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DuploDeployOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalODuploVolumeInput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploVolumeInput(ctx context.Context, v interface{}) ([]*model.DuploVolumeInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.DuploVolumeInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalODuploVolumeInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploVolumeInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalODuploVolumeInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐDuploVolumeInput(ctx context.Context, v interface{}) (*model.DuploVolumeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputDuploVolumeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEdges2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐEdges(ctx context.Context, sel ast.SelectionSet, v []*model.Edges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOEdges2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐEdges(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOEdges2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐEdges(ctx context.Context, sel ast.SelectionSet, v *model.Edges) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Edges(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEditAppByOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐEditAppByOrganization(ctx context.Context, v interface{}) (*model.EditAppByOrganization, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEditAppByOrganization(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOElbUrl2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐElbURL(ctx context.Context, sel ast.SelectionSet, v *model.ElbURL) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ElbUrl(ctx, sel, v)
}

func (ec *executionContext) unmarshalOElbUrlInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐElbURLInput(ctx context.Context, v interface{}) (*model.ElbURLInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputElbUrlInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloat(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalFloat(*v)
}

func (ec *executionContext) marshalOGetSecRegistry2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetSecRegistryᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetSecRegistry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetSecRegistry2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetSecRegistry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGetUserById2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx context.Context, sel ast.SelectionSet, v []*model.GetUserByID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetUserById2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGetUserById2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserByID(ctx context.Context, sel ast.SelectionSet, v *model.GetUserByID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetUserById(ctx, sel, v)
}

func (ec *executionContext) marshalOGetUserMetrics2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserMetrics(ctx context.Context, sel ast.SelectionSet, v []*model.GetUserMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOGetUserMetrics2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserMetrics(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGetUserMetrics2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserMetrics(ctx context.Context, sel ast.SelectionSet, v *model.GetUserMetrics) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetUserMetrics(ctx, sel, v)
}

func (ec *executionContext) marshalOGetUserPAT2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserPat(ctx context.Context, sel ast.SelectionSet, v *model.GetUserPat) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetUserPAT(ctx, sel, v)
}

func (ec *executionContext) marshalOGetUserSecret2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserSecretᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetUserSecret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGetUserSecret2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserSecret(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOGetUserSecret2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetUserSecret(ctx context.Context, sel ast.SelectionSet, v *model.GetUserSecret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._GetUserSecret(ctx, sel, v)
}

func (ec *executionContext) marshalOHTTPHeader2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHTTPHeader(ctx context.Context, sel ast.SelectionSet, v []*model.HTTPHeader) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHTTPHeader2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHTTPHeader(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHTTPHeader2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHTTPHeader(ctx context.Context, sel ast.SelectionSet, v *model.HTTPHeader) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HTTPHeader(ctx, sel, v)
}

func (ec *executionContext) unmarshalOHost2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHost(ctx context.Context, v interface{}) (*model.Host, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputHost(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOHostDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHostDetails(ctx context.Context, sel ast.SelectionSet, v *model.HostDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HostDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOHostPayload2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHostPayload(ctx context.Context, sel ast.SelectionSet, v []*model.HostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOHostPayload2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHostPayload(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOHostPayload2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐHostPayload(ctx context.Context, sel ast.SelectionSet, v *model.HostPayload) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._HostPayload(ctx, sel, v)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) marshalOIPAddress2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddress(ctx context.Context, sel ast.SelectionSet, v []*model.IPAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIPAddress2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIPAddress2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddress(ctx context.Context, sel ast.SelectionSet, v *model.IPAddress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IPAddress(ctx, sel, v)
}

func (ec *executionContext) marshalOIPAddresses2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIPAddresses(ctx context.Context, sel ast.SelectionSet, v *model.IPAddresses) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._IPAddresses(ctx, sel, v)
}

func (ec *executionContext) unmarshalOImage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐImage(ctx context.Context, v interface{}) (*model.Image, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputImage(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOInviteUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐInviteUser(ctx context.Context, v interface{}) (*model.InviteUser, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputInviteUser(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInviteUserOutputMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐInviteUserOutputMessage(ctx context.Context, sel ast.SelectionSet, v *model.InviteUserOutputMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._InviteUserOutputMessage(ctx, sel, v)
}

func (ec *executionContext) marshalOIssue2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v []*model.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOIssue2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIssue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOIssue2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIssue(ctx context.Context, sel ast.SelectionSet, v *model.Issue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Issue(ctx, sel, v)
}

func (ec *executionContext) marshalOIssued2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐIssued(ctx context.Context, sel ast.SelectionSet, v *model.Issued) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Issued(ctx, sel, v)
}

func (ec *executionContext) marshalOLogEntry2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐLogEntry(ctx context.Context, sel ast.SelectionSet, v []*model.LogEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLogEntry2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐLogEntry(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOLogEntry2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐLogEntry(ctx context.Context, sel ast.SelectionSet, v *model.LogEntry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LogEntry(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalMap(v)
}

func (ec *executionContext) unmarshalOMap2ᚕmap(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOMap2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOMap2ᚕmap(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOMap2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalOMembers2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMembers(ctx context.Context, sel ast.SelectionSet, v *model.Members) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Members(ctx, sel, v)
}

func (ec *executionContext) marshalOMeta2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMeta(ctx context.Context, sel ast.SelectionSet, v *model.Meta) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Meta(ctx, sel, v)
}

func (ec *executionContext) unmarshalOMultipleRegionInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMultipleRegionInput(ctx context.Context, v interface{}) (*model.MultipleRegionInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputMultipleRegionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMultipleRegionResponse2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐMultipleRegionResponse(ctx context.Context, sel ast.SelectionSet, v *model.MultipleRegionResponse) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MultipleRegionResponse(ctx, sel, v)
}

func (ec *executionContext) marshalONodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNodes(ctx context.Context, sel ast.SelectionSet, v *model.Nodes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Nodes(ctx, sel, v)
}

func (ec *executionContext) unmarshalONotification2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐNotification(ctx context.Context, v interface{}) (*model.Notification, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputNotification(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOOrgCountDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrgCountDetails(ctx context.Context, sel ast.SelectionSet, v *model.OrgCountDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrgCountDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganization2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v []*model.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganization(ctx context.Context, sel ast.SelectionSet, v *model.Organization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organization(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationMembershipEdge2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationMembershipEdge(ctx context.Context, sel ast.SelectionSet, v []*model.OrganizationMembershipEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganizationMembershipEdge2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationMembershipEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganizationMembershipEdge2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationMembershipEdge(ctx context.Context, sel ast.SelectionSet, v *model.OrganizationMembershipEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OrganizationMembershipEdge(ctx, sel, v)
}

func (ec *executionContext) marshalOOrganizationRegistryType2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationRegistryTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.OrganizationRegistryType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNOrganizationRegistryType2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizationRegistryType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganizations2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx context.Context, sel ast.SelectionSet, v []*model.Organizations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOOrganizations2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOrganizations(ctx context.Context, sel ast.SelectionSet, v *model.Organizations) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Organizations(ctx, sel, v)
}

func (ec *executionContext) marshalOOutputMessage2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐOutputMessage(ctx context.Context, sel ast.SelectionSet, v *model.OutputMessage) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OutputMessage(ctx, sel, v)
}

func (ec *executionContext) marshalOPassword2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPassword(ctx context.Context, sel ast.SelectionSet, v *model.Password) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Password(ctx, sel, v)
}

func (ec *executionContext) marshalOPermission2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPermission(ctx context.Context, sel ast.SelectionSet, v []*model.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPermission2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPermission(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPermission2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPermission(ctx context.Context, sel ast.SelectionSet, v *model.Permission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Permission(ctx, sel, v)
}

func (ec *executionContext) marshalOPlatFormOutput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPlatFormOutput(ctx context.Context, sel ast.SelectionSet, v []*model.PlatFormOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPlatFormOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPlatFormOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPlatFormOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPlatFormOutput(ctx context.Context, sel ast.SelectionSet, v *model.PlatFormOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PlatFormOutput(ctx, sel, v)
}

func (ec *executionContext) marshalOPortHandler2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPortHandler(ctx context.Context, sel ast.SelectionSet, v []*model.PortHandler) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPortHandler2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPortHandler(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPortHandler2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPortHandler(ctx context.Context, sel ast.SelectionSet, v *model.PortHandler) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PortHandler(ctx, sel, v)
}

func (ec *executionContext) marshalOPriceList2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPriceList(ctx context.Context, sel ast.SelectionSet, v []*model.PriceList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOPriceList2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPriceList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOPriceList2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPriceList(ctx context.Context, sel ast.SelectionSet, v *model.PriceList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._PriceList(ctx, sel, v)
}

func (ec *executionContext) marshalOQueryLogOutput2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐQueryLogOutputᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.QueryLogOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNQueryLogOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐQueryLogOutput(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReDeploymentCountByDate2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐReDeploymentCountByDate(ctx context.Context, sel ast.SelectionSet, v []*model.ReDeploymentCountByDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOReDeploymentCountByDate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐReDeploymentCountByDate(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOReDeploymentCountByDate2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐReDeploymentCountByDate(ctx context.Context, sel ast.SelectionSet, v *model.ReDeploymentCountByDate) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ReDeploymentCountByDate(ctx, sel, v)
}

func (ec *executionContext) marshalORegion2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx context.Context, sel ast.SelectionSet, v []*model.Region) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegion2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORegion2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegion(ctx context.Context, sel ast.SelectionSet, v *model.Region) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Region(ctx, sel, v)
}

func (ec *executionContext) marshalORegionDetails2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionDetails(ctx context.Context, sel ast.SelectionSet, v []*model.RegionDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegionDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionDetails(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORegionDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionDetails(ctx context.Context, sel ast.SelectionSet, v *model.RegionDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionDetails(ctx, sel, v)
}

func (ec *executionContext) unmarshalORegionRequest2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionRequest(ctx context.Context, v interface{}) (*model.RegionRequest, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputRegionRequest(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORegionStatus2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionStatus(ctx context.Context, sel ast.SelectionSet, v []*model.RegionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORegionStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionStatus(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORegionStatus2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionStatus(ctx context.Context, sel ast.SelectionSet, v *model.RegionStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionStatus(ctx, sel, v)
}

func (ec *executionContext) marshalORegionStatusNodes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionStatusNodes(ctx context.Context, sel ast.SelectionSet, v *model.RegionStatusNodes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RegionStatusNodes(ctx, sel, v)
}

func (ec *executionContext) marshalORegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegions(ctx context.Context, sel ast.SelectionSet, v *model.Regions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Regions(ctx, sel, v)
}

func (ec *executionContext) marshalORegistry2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegistry(ctx context.Context, sel ast.SelectionSet, v *model.Registry) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Registry(ctx, sel, v)
}

func (ec *executionContext) marshalORelease2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx context.Context, sel ast.SelectionSet, v []*model.Release) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORelease2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORelease2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRelease(ctx context.Context, sel ast.SelectionSet, v *model.Release) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Release(ctx, sel, v)
}

func (ec *executionContext) marshalOReleases2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐReleases(ctx context.Context, sel ast.SelectionSet, v *model.Releases) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Releases(ctx, sel, v)
}

func (ec *executionContext) marshalORequestedRegions2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegions(ctx context.Context, sel ast.SelectionSet, v []*model.RequestedRegions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalORequestedRegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegions(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalORequestedRegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequestedRegions(ctx context.Context, sel ast.SelectionSet, v *model.RequestedRegions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RequestedRegions(ctx, sel, v)
}

func (ec *executionContext) marshalORequirementProperties2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRequirementProperties(ctx context.Context, sel ast.SelectionSet, v *model.RequirementProperties) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._RequirementProperties(ctx, sel, v)
}

func (ec *executionContext) marshalOS3BuildCommand2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommand(ctx context.Context, sel ast.SelectionSet, v []*model.S3BuildCommand) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOS3BuildCommand2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommand(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOS3BuildCommand2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommand(ctx context.Context, sel ast.SelectionSet, v *model.S3BuildCommand) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._S3BuildCommand(ctx, sel, v)
}

func (ec *executionContext) unmarshalOS3BuildCommands2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommands(ctx context.Context, v interface{}) ([]*model.S3BuildCommands, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.S3BuildCommands, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOS3BuildCommands2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommands(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOS3BuildCommands2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3BuildCommands(ctx context.Context, v interface{}) (*model.S3BuildCommands, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputS3BuildCommands(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOS3DeployInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3DeployInput(ctx context.Context, v interface{}) (*model.S3DeployInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputS3DeployInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOS3Deployments2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3Deployments(ctx context.Context, sel ast.SelectionSet, v []*model.S3Deployments) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOS3Deployments2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3Deployments(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOS3Deployments2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3Deployments(ctx context.Context, sel ast.SelectionSet, v *model.S3Deployments) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._S3Deployments(ctx, sel, v)
}

func (ec *executionContext) marshalOS3EnvVariable2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariable(ctx context.Context, sel ast.SelectionSet, v []*model.S3EnvVariable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOS3EnvVariable2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariable(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOS3EnvVariable2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariable(ctx context.Context, sel ast.SelectionSet, v *model.S3EnvVariable) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._S3EnvVariable(ctx, sel, v)
}

func (ec *executionContext) unmarshalOS3EnvVariables2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariables(ctx context.Context, v interface{}) ([]*model.S3EnvVariables, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*model.S3EnvVariables, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOS3EnvVariables2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariables(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOS3EnvVariables2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐS3EnvVariables(ctx context.Context, v interface{}) (*model.S3EnvVariables, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputS3EnvVariables(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOSecret2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSecret(ctx context.Context, sel ast.SelectionSet, v []*model.Secret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSecret2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSecret(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSecret2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSecret(ctx context.Context, sel ast.SelectionSet, v *model.Secret) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Secret(ctx, sel, v)
}

func (ec *executionContext) marshalOService2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐService(ctx context.Context, sel ast.SelectionSet, v []*model.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOService2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOService2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐService(ctx context.Context, sel ast.SelectionSet, v *model.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Service(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStartAndStopVM2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐStartAndStopVM(ctx context.Context, v interface{}) (*model.StartAndStopVM, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStartAndStopVM(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚕᚖstring(ctx context.Context, v interface{}) ([]*string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2ᚖstring(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕᚖstring(ctx context.Context, sel ast.SelectionSet, v []*string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2ᚖstring(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) marshalOSubOrgCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrgCount(ctx context.Context, sel ast.SelectionSet, v []*model.SubOrgCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSubOrgCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrgCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSubOrgCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrgCount(ctx context.Context, sel ast.SelectionSet, v *model.SubOrgCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubOrgCount(ctx, sel, v)
}

func (ec *executionContext) marshalOSubOrganization2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrganization(ctx context.Context, sel ast.SelectionSet, v []*model.SubOrganization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSubOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrganization(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOSubOrganization2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐSubOrganization(ctx context.Context, sel ast.SelectionSet, v *model.SubOrganization) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._SubOrganization(ctx, sel, v)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) marshalOUpdateAppConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateAppConfig(ctx context.Context, sel ast.SelectionSet, v *model.UpdateAppConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateAppConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpdateConfig2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateConfig(ctx context.Context, v interface{}) (*model.UpdateConfig, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateConfig(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpdateImageOutput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateImageOutput(ctx context.Context, sel ast.SelectionSet, v *model.UpdateImageOutput) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateImageOutput(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpdateSecretInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateSecretInput(ctx context.Context, v interface{}) (*model.UpdateSecretInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateSecretInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUpdateUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateUser(ctx context.Context, sel ast.SelectionSet, v *model.UpdateUser) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UpdateUser(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUpdateUserInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateUserInput(ctx context.Context, v interface{}) (*model.UpdateUserInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateUserInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUpdateVolumeInput2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUpdateVolumeInput(ctx context.Context, v interface{}) (*model.UpdateVolumeInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUpdateVolumeInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalOUserDeploymentDetailCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserDeploymentDetailCount(ctx context.Context, sel ast.SelectionSet, v []*model.UserDeploymentDetailCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUserDeploymentDetailCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserDeploymentDetailCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOUserDeploymentDetailCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserDeploymentDetailCount(ctx context.Context, sel ast.SelectionSet, v *model.UserDeploymentDetailCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._UserDeploymentDetailCount(ctx, sel, v)
}

func (ec *executionContext) unmarshalOUserPAT2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserPat(ctx context.Context, v interface{}) (*model.UserPat, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserPAT(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVMSize2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVMSize(ctx context.Context, sel ast.SelectionSet, v *model.VMSize) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VMSize(ctx, sel, v)
}

func (ec *executionContext) marshalOVolume2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolume(ctx context.Context, sel ast.SelectionSet, v []*model.Volume) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVolume2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolume(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVolume2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolume(ctx context.Context, sel ast.SelectionSet, v *model.Volume) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Volume(ctx, sel, v)
}

func (ec *executionContext) marshalOVolumeByApp2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeByApp(ctx context.Context, sel ast.SelectionSet, v []*model.VolumeByApp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVolumeByApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeByApp(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVolumeByApp2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeByApp(ctx context.Context, sel ast.SelectionSet, v *model.VolumeByApp) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VolumeByApp(ctx, sel, v)
}

func (ec *executionContext) marshalOVolumeType2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeType(ctx context.Context, sel ast.SelectionSet, v []*model.VolumeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOVolumeType2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOVolumeType2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumeType(ctx context.Context, sel ast.SelectionSet, v *model.VolumeType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._VolumeType(ctx, sel, v)
}

func (ec *executionContext) marshalOVolumes2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐVolumes(ctx context.Context, sel ast.SelectionSet, v *model.Volumes) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Volumes(ctx, sel, v)
}

func (ec *executionContext) marshalOWorkLoadRegions2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkLoadRegions(ctx context.Context, sel ast.SelectionSet, v *model.WorkLoadRegions) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._WorkLoadRegions(ctx, sel, v)
}

func (ec *executionContext) unmarshalOWorkloadManagement2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagement(ctx context.Context, v interface{}) (*model.WorkloadManagement, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputWorkloadManagement(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOWorkloadManagementList2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementListᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.WorkloadManagementList) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNWorkloadManagementList2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐWorkloadManagementList(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) marshalOappCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCount(ctx context.Context, sel ast.SelectionSet, v *model.AppCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._appCount(ctx, sel, v)
}

func (ec *executionContext) marshalOappCountsDetails2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐAppCountsDetails(ctx context.Context, sel ast.SelectionSet, v *model.AppCountsDetails) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._appCountsDetails(ctx, sel, v)
}

func (ec *executionContext) marshalOgetBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetBusinessUnitᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.GetBusinessUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNgetBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐGetBusinessUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOlistBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx context.Context, sel ast.SelectionSet, v []*model.ListBusinessUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOlistBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOlistBusinessUnit2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnitᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.ListBusinessUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNlistBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOlistBusinessUnit2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐListBusinessUnit(ctx context.Context, sel ast.SelectionSet, v *model.ListBusinessUnit) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._listBusinessUnit(ctx, sel, v)
}

func (ec *executionContext) marshalOplanAndPermission2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐPlanAndPermission(ctx context.Context, sel ast.SelectionSet, v *model.PlanAndPermission) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._planAndPermission(ctx, sel, v)
}

func (ec *executionContext) marshalOregionAppCount2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionAppCount(ctx context.Context, sel ast.SelectionSet, v []*model.RegionAppCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOregionAppCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionAppCount(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOregionAppCount2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐRegionAppCount(ctx context.Context, sel ast.SelectionSet, v *model.RegionAppCount) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._regionAppCount(ctx, sel, v)
}

func (ec *executionContext) marshalOuserActivities2ᚕᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserActivities(ctx context.Context, sel ast.SelectionSet, v []*model.UserActivities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOuserActivities2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserActivities(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOuserActivities2ᚖgithubᚗcomᚋnifetencyᚋnifeᚗioᚋapiᚋmodelᚐUserActivities(ctx context.Context, sel ast.SelectionSet, v *model.UserActivities) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._userActivities(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
